// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`a_expr 1`] = `
"CREATE VIEW superschema.app_authorized_grants AS SELECT COALESCE(NULLIF((s)[1], ''), 'PUBLIC') AS grantee,
relname AS table_name,
nspname AS table_schema,
string_agg((s)[2], ', ') AS privileges,
relkind AS table_type FROM pg_class AS c INNER JOIN pg_namespace AS n ON n.oid = relnamespace INNER JOIN pg_roles AS r ON r.oid = relowner,
unnest(COALESCE(relacl::text[], format('{%%s=arwdDxt/%%s}', rolname, rolname)::text[])) AS acl,
regexp_split_to_array(acl, '=|/') AS s WHERE ((s)[1] = 'authenticated' OR (s)[1] IS NULL) AND nspname NOT IN ( 'pg_catalog', 'information_schema', 'pg_toast' ) GROUP BY grantee,
table_name,
table_schema,
relkind ORDER BY relkind <> 'r',
relkind <> 'v',
relkind <> 'm',
relkind <> 'i',
relkind,
nspname,
relname;
SELECT a = b;
SELECT foo = ANY( x ) FROM vtable;
SELECT foo = ALL( x ) FROM vtable;
SELECT foo,
bar FROM vtable WHERE foo IS DISTINCT FROM bar;
SELECT foo,
bar FROM vtable WHERE foo IS NOT DISTINCT FROM bar;
SELECT t1.foo,
t1.bar,
t1.baz FROM t1 LEFT OUTER JOIN t2 ON t1.foo IS NOT DISTINCT FROM t2.foo AND t1.bar IS NOT DISTINCT FROM t2.bar AND t1.baz IS NOT DISTINCT FROM t2.baz WHERE t2.foo IS NULL;
SELECT NULLIF(NULL, '');
SELECT x,
x IS OF ( text ) AS is_text FROM q;
SELECT x,
x IS NOT OF ( text ) AS is_text FROM q;
SELECT COALESCE(4::domainint4, 7::domainint4) IS OF ( domainint4 ) AS t;
SELECT value IN (SELECT column_name FROM table_name);
SELECT NOT (value IN (SELECT column_name FROM table_name));
SELECT customer_id,
rental_id,
return_date FROM rental WHERE customer_id IN ( 1, 2 ) ORDER BY return_date DESC;
SELECT customer_id,
rental_id,
return_date FROM rental WHERE customer_id NOT IN ( 1, 2 );
SELECT customer_id,
rental_id,
return_date FROM rental WHERE customer_id <> 1 AND customer_id <> 2;
SELECT * FROM employees WHERE name IN ( 'James John', 'Mercy Bush', 'Kate Joel' );
SELECT * FROM employees WHERE name NOT IN ( 'James John', 'Mercy Bush', 'Kate Joel' );
SELECT customer_id FROM rental WHERE return_date::date = '2005-05-27' ORDER BY customer_id;
SELECT customer_id,
first_name,
last_name FROM customer WHERE customer_id IN (SELECT customer_id FROM rental WHERE return_date::date = '2005-05-27') ORDER BY customer_id;
SELECT * FROM student WHERE name LIKE ( 'a%' );
SELECT * FROM student WHERE name NOT LIKE ( 'a%' );
SELECT 'foo' LIKE ( 'foo' ),
'foo' LIKE ( 'f%' ),
'foo' LIKE ( '_o_' ),
'bar' LIKE ( 'b_' );
SELECT * FROM student WHERE name ILIKE ( 'a%' );
SELECT * FROM student WHERE name NOT ILIKE ( 'a%' );
SELECT 'xyz' SIMILAR TO 'xyz';
SELECT 'xyz' SIMILAR TO 'x';
SELECT 'xyz' SIMILAR TO '%(y|a)%';
SELECT 'xyz' SIMILAR TO '(y|z)%';
SELECT 'xyz' SIMILAR TO 'xyz' ESCAPE 'x';
SELECT 'xyz' SIMILAR TO 'x' ESCAPE 'x';
SELECT 'xyz' SIMILAR TO '%(y|a)%' ESCAPE 'x';
SELECT 'xyz' SIMILAR TO '(y|z)%' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO 'xyz';
SELECT 'xyz' NOT SIMILAR TO 'x';
SELECT 'xyz' NOT SIMILAR TO '%(y|a)%';
SELECT 'xyz' NOT SIMILAR TO '(y|z)%';
SELECT 'xyz' NOT SIMILAR TO 'xyz' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO 'x' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO '%(y|a)%' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO '(y|z)%' ESCAPE 'x';
SELECT * FROM generate_series(1, 10) AS numbers (a) WHERE numbers.a BETWEEN SYMMETRIC 6 AND 3;
SELECT * FROM generate_series(1, 10) AS numbers (a) WHERE numbers.a BETWEEN 6 AND 3;
SELECT * FROM generate_series(1, 10) AS numbers (a) WHERE numbers.a NOT BETWEEN SYMMETRIC 6 AND 3;
SELECT * FROM generate_series(1, 10) AS numbers (a) WHERE numbers.a NOT BETWEEN 6 AND 3;"
`;

exports[`a_expr 2`] = `
"CREATE VIEW superschema.app_authorized_grants AS SELECT COALESCE(NULLIF((s)[1], ''), 'PUBLIC') AS grantee,
relname AS table_name,
nspname AS table_schema,
string_agg((s)[2], ', ') AS privileges,
relkind AS table_type FROM pg_class AS c INNER JOIN pg_namespace AS n ON n.oid = relnamespace INNER JOIN pg_roles AS r ON r.oid = relowner,
unnest(COALESCE(relacl::text[], format('{%%s=arwdDxt/%%s}', rolname, rolname)::text[])) AS acl,
regexp_split_to_array(acl, '=|/') AS s WHERE ((s)[1] = 'authenticated' OR (s)[1] IS NULL) AND nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast') GROUP BY grantee,
table_name,
table_schema,
relkind ORDER BY relkind <> 'r',
relkind <> 'v',
relkind <> 'm',
relkind <> 'i',
relkind,
nspname,
relname;
SELECT a = b;
SELECT foo = ANY (x) FROM vtable;
SELECT foo = ALL (x) FROM vtable;
SELECT foo,
bar FROM vtable WHERE foo IS DISTINCT FROM bar;
SELECT foo,
bar FROM vtable WHERE foo IS NOT DISTINCT FROM bar;
SELECT t1.foo,
t1.bar,
t1.baz FROM t1 LEFT OUTER JOIN t2 ON t1.foo IS NOT DISTINCT FROM t2.foo AND t1.bar IS NOT DISTINCT FROM t2.bar AND t1.baz IS NOT DISTINCT FROM t2.baz WHERE t2.foo IS NULL;
SELECT NULLIF(NULL, '');
SELECT x,
x IS OF (text) AS is_text FROM q;
SELECT x,
x IS NOT OF (text) AS is_text FROM q;
SELECT COALESCE(4::domainint4, 7::domainint4) IS OF (domainint4) AS t;
SELECT value IN (SELECT column_name FROM table_name);
SELECT NOT (value IN (SELECT column_name FROM table_name));
SELECT customer_id,
rental_id,
return_date FROM rental WHERE customer_id IN (1, 2) ORDER BY return_date DESC;
SELECT customer_id,
rental_id,
return_date FROM rental WHERE customer_id NOT IN (1, 2);
SELECT customer_id,
rental_id,
return_date FROM rental WHERE customer_id <> 1 AND customer_id <> 2;
SELECT * FROM employees WHERE name IN ('James John', 'Mercy Bush', 'Kate Joel');
SELECT * FROM employees WHERE name NOT IN ('James John', 'Mercy Bush', 'Kate Joel');
SELECT customer_id FROM rental WHERE return_date::date = '2005-05-27' ORDER BY customer_id;
SELECT customer_id,
first_name,
last_name FROM customer WHERE customer_id IN (SELECT customer_id FROM rental WHERE return_date::date = '2005-05-27') ORDER BY customer_id;
SELECT * FROM student WHERE name LIKE ('a%');
SELECT * FROM student WHERE name NOT LIKE ('a%');
SELECT 'foo' LIKE ('foo'),
'foo' LIKE ('f%'),
'foo' LIKE ('_o_'),
'bar' LIKE ('b_');
SELECT * FROM student WHERE name ILIKE ('a%');
SELECT * FROM student WHERE name NOT ILIKE ('a%');
SELECT 'xyz' SIMILAR TO 'xyz';
SELECT 'xyz' SIMILAR TO 'x';
SELECT 'xyz' SIMILAR TO '%(y|a)%';
SELECT 'xyz' SIMILAR TO '(y|z)%';
SELECT 'xyz' SIMILAR TO 'xyz' ESCAPE 'x';
SELECT 'xyz' SIMILAR TO 'x' ESCAPE 'x';
SELECT 'xyz' SIMILAR TO '%(y|a)%' ESCAPE 'x';
SELECT 'xyz' SIMILAR TO '(y|z)%' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO 'xyz';
SELECT 'xyz' NOT SIMILAR TO 'x';
SELECT 'xyz' NOT SIMILAR TO '%(y|a)%';
SELECT 'xyz' NOT SIMILAR TO '(y|z)%';
SELECT 'xyz' NOT SIMILAR TO 'xyz' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO 'x' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO '%(y|a)%' ESCAPE 'x';
SELECT 'xyz' NOT SIMILAR TO '(y|z)%' ESCAPE 'x';
SELECT * FROM generate_series(1, 10) AS numbers(a) WHERE numbers.a BETWEEN SYMMETRIC 6 AND 3;
SELECT * FROM generate_series(1, 10) AS numbers(a) WHERE numbers.a BETWEEN 6 AND 3;
SELECT * FROM generate_series(1, 10) AS numbers(a) WHERE numbers.a NOT BETWEEN SYMMETRIC 6 AND 3;
SELECT * FROM generate_series(1, 10) AS numbers(a) WHERE numbers.a NOT BETWEEN 6 AND 3;"
`;

exports[`comment 1`] = `
"COMMENT ON COLUMN my_schema.my_table.my_column IS E'@name meta
@isImportant
@jsonField date timestamp
@jsonField name text
@jsonField episode enum ONE=1 TWO=2
This field has a load of arbitrary tags.';
COMMENT ON TABLE my_schema.my_table IS E'@name my_new_table_name
@omit update,delete
This is the documentation.';
COMMENT ON VIEW my_schema.mv_view IS E'@name my_new_view_name
@omit update,delete
This is the documentation.';
COMMENT ON MATERIALIZED VIEW my_schema.mv_view IS E'@name my_new_view_name
@omit update,delete
This is the documentation.';
COMMENT ON TYPE my_schema.my_type IS E'@name my_new_type_name
This is the documentation.';
COMMENT ON COLUMN my_schema.my_table.my_column IS E'@name my_new_column
@omit create,update
This is the documentation.';
COMMENT ON CONSTRAINT my_constraint ON my_schema.my_table IS E'@foreignFieldName foos
@fieldName bar
Documentation here.';
COMMENT ON FUNCTION my_function ( arg_type_1, arg_type_2 ) IS E'@name my_new_function_name
Documentation here.';
COMMENT ON FUNCTION my_function ( arg_type_1, arg_type_2 ) IS E'
inmycomment';
COMMENT ON FUNCTION my_function ( arg_type_1, arg_type_2 ) IS 'inmycomment';"
`;

exports[`comment 2`] = `
"COMMENT ON COLUMN my_schema.my_table.my_column IS E'@name meta
@isImportant
@jsonField date timestamp
@jsonField name text
@jsonField episode enum ONE=1 TWO=2
This field has a load of arbitrary tags.';
COMMENT ON TABLE my_schema.my_table IS E'@name my_new_table_name
@omit update,delete
This is the documentation.';
COMMENT ON VIEW my_schema.mv_view IS E'@name my_new_view_name
@omit update,delete
This is the documentation.';
COMMENT ON MATERIALIZED VIEW my_schema.mv_view IS E'@name my_new_view_name
@omit update,delete
This is the documentation.';
COMMENT ON TYPE my_schema.my_type IS E'@name my_new_type_name
This is the documentation.';
COMMENT ON COLUMN my_schema.my_table.my_column IS E'@name my_new_column
@omit create,update
This is the documentation.';
COMMENT ON CONSTRAINT my_constraint ON my_schema.my_table IS E'@foreignFieldName foos
@fieldName bar
Documentation here.';
COMMENT ON FUNCTION my_function ( arg_type_1,arg_type_2 ) IS E'@name my_new_function_name
Documentation here.';
COMMENT ON FUNCTION my_function ( arg_type_1,arg_type_2 ) IS E'
inmycomment';
COMMENT ON FUNCTION my_function ( arg_type_1,arg_type_2 ) IS 'inmycomment';"
`;

exports[`drops 1`] = `
"DROP POLICY policy_name ON schema_name.table_name;
DROP POLICY policy_name ON table_name;
REVOKE DELETE ON TABLE schema_name.table_name FROM authenticated;
REVOKE DELETE ON TABLE table_name FROM authenticated;
DROP TABLE table_name;
DROP TABLE schema_name.table_name;
ALTER TABLE schema_name.table_name DROP COLUMN column_name;
ALTER TABLE \\"schema-name\\".table_name DROP COLUMN column_name;
ALTER TABLE \\"schema-name\\".\\"aa-bdd\\" DROP COLUMN \\"sdf-sdf\\";
ALTER TABLE \\"table-name\\" DROP COLUMN column_name;
ALTER TABLE table_name DROP COLUMN column_name;
DROP SEQUENCE IF EXISTS hsseq;
DROP SEQUENCE IF EXISTS \\"some-thing\\".hsseq;
ALTER TABLE schemaname.table_name RENAME COLUMN column_name1 TO new_column_name1;
ALTER TABLE table_name RENAME COLUMN column_name1 TO new_column_name1;
DROP TYPE test_type;
DROP TYPE schema_name.test_type;
DROP TYPE \\"schema-name\\".test_type;
DROP TYPE \\"schema-name\\".\\"test-type\\";
DROP TYPE IF EXISTS test_type_exists;
DROP TYPE IF EXISTS \\"aa-bb\\".test_type_exists;
DROP TYPE eitype CASCADE;
DROP DOMAIN testdomain2b;
DROP DOMAIN schema_name.testdomain2b;
DROP FUNCTION testfunc5b ( testdomain1 );
DROP FUNCTION \\"my-schema\\".testfunc5b ( testdomain1 );
DROP FUNCTION testfunc6b ( int );
DROP FUNCTION \\"my-schema\\".testfunc6b ( int );
DROP FUNCTION \\"my-schema\\".\\"test-func6b\\" ( int );
DROP FUNCTION testfunc7777;
DROP FUNCTION \\"my-schema\\".testfunc7777;
DROP TRIGGER trigger_name ON table_name;
DROP TRIGGER IF EXISTS trigger_name ON table_name;
DROP TRIGGER trigger_name ON schema_name.table_name;
DROP TRIGGER IF EXISTS trigger_name ON schema_name.table_name;
DROP RULE rule_name ON table_name;
DROP RULE IF EXISTS rule_name ON table_name;
DROP RULE rule_name ON schema_name.table_name;
DROP RULE IF EXISTS rule_name ON schema_name.table_name;
DROP VIEW IF EXISTS test_view_exists;
DROP VIEW test_view_exists;
DROP EXTENSION test_extension_exists;
DROP EXTENSION IF EXISTS test_extension_exists;
DROP FOREIGN DATA WRAPPER test_fdw_exists;
DROP FOREIGN DATA WRAPPER IF EXISTS test_fdw_exists;
DROP AGGREGATE IF EXISTS no_such_schema.foo ( int );
DROP AGGREGATE IF EXISTS foo ( no_such_type );
DROP AGGREGATE IF EXISTS foo ( no_such_schema.no_such_type );
DROP CAST IF EXISTS ( int AS no_such_type2 );
DROP CAST IF EXISTS ( no_such_type1 AS int );
DROP CAST IF EXISTS ( int AS no_such_schema.bar );
DROP CAST IF EXISTS ( no_such_schema.foo AS int );
DROP COLLATION IF EXISTS no_such_schema.foo;
DROP CONVERSION IF EXISTS no_such_schema.foo;
DROP DOMAIN IF EXISTS no_such_schema.foo;
DROP FOREIGN TABLE IF EXISTS no_such_schema.foo;
DROP INDEX IF EXISTS no_such_schema.foo;
DROP MATERIALIZED VIEW IF EXISTS no_such_schema.foo;"
`;

exports[`drops 2`] = `
"DROP POLICY policy_name ON schema_name.table_name;
DROP POLICY policy_name ON table_name;
REVOKE DELETE ON TABLE schema_name.table_name FROM authenticated;
REVOKE DELETE ON TABLE table_name FROM authenticated;
DROP TABLE table_name;
DROP TABLE schema_name.table_name;
ALTER TABLE schema_name.table_name DROP COLUMN column_name;
ALTER TABLE \\"schema-name\\".table_name DROP COLUMN column_name;
ALTER TABLE \\"schema-name\\".\\"aa-bdd\\" DROP COLUMN \\"sdf-sdf\\";
ALTER TABLE \\"table-name\\" DROP COLUMN column_name;
ALTER TABLE table_name DROP COLUMN column_name;
DROP SEQUENCE IF EXISTS hsseq;
DROP SEQUENCE IF EXISTS \\"some-thing\\".hsseq;
ALTER TABLE schemaname.table_name RENAME column_name1 TO new_column_name1;
ALTER TABLE table_name RENAME column_name1 TO new_column_name1;
DROP TYPE test_type;
DROP TYPE schema_name.test_type;
DROP TYPE \\"schema-name\\".test_type;
DROP TYPE \\"schema-name\\".\\"test-type\\";
DROP TYPE IF EXISTS test_type_exists;
DROP TYPE IF EXISTS \\"aa-bb\\".test_type_exists;
DROP TYPE eitype CASCADE;
DROP DOMAIN testdomain2b;
DROP DOMAIN schema_name.testdomain2b;
DROP FUNCTION testfunc5b ( testdomain1 );
DROP FUNCTION \\"my-schema\\".testfunc5b ( testdomain1 );
DROP FUNCTION testfunc6b ( int );
DROP FUNCTION \\"my-schema\\".testfunc6b ( int );
DROP FUNCTION \\"my-schema\\".\\"test-func6b\\" ( int );
DROP FUNCTION testfunc7777;
DROP FUNCTION \\"my-schema\\".testfunc7777;
DROP TRIGGER trigger_name ON table_name;
DROP TRIGGER IF EXISTS trigger_name ON table_name;
DROP TRIGGER trigger_name ON schema_name.table_name;
DROP TRIGGER IF EXISTS trigger_name ON schema_name.table_name;
DROP RULE rule_name ON table_name;
DROP RULE IF EXISTS rule_name ON table_name;
DROP RULE rule_name ON schema_name.table_name;
DROP RULE IF EXISTS rule_name ON schema_name.table_name;
DROP VIEW IF EXISTS test_view_exists;
DROP VIEW test_view_exists;
DROP EXTENSION test_extension_exists;
DROP EXTENSION IF EXISTS test_extension_exists;
DROP FOREIGN DATA WRAPPER test_fdw_exists;
DROP FOREIGN DATA WRAPPER IF EXISTS test_fdw_exists;
DROP AGGREGATE IF EXISTS no_such_schema.foo ( int );
DROP AGGREGATE IF EXISTS foo ( no_such_type );
DROP AGGREGATE IF EXISTS foo ( no_such_schema.no_such_type );
DROP CAST IF EXISTS ( int AS no_such_type2 );
DROP CAST IF EXISTS ( no_such_type1 AS int );
DROP CAST IF EXISTS ( int AS no_such_schema.bar );
DROP CAST IF EXISTS ( no_such_schema.foo AS int );
DROP COLLATION IF EXISTS no_such_schema.foo;
DROP CONVERSION IF EXISTS no_such_schema.foo;
DROP DOMAIN IF EXISTS no_such_schema.foo;
DROP FOREIGN TABLE IF EXISTS no_such_schema.foo;
DROP INDEX IF EXISTS no_such_schema.foo;
DROP MATERIALIZED VIEW IF EXISTS no_such_schema.foo;"
`;

exports[`kitchen sink alias 1`] = `
"SELECT * FROM generate_series(1, 1) AS \\"a#b\\";
SELECT * FROM generate_series(1, 1) AS \\"a#b\\" (\\"c#d\\");
SELECT * FROM generate_series(1, 1) AS aba;
SELECT * FROM generate_series(1, 1) AS aba (ccd);"
`;

exports[`kitchen sink alias 2`] = `
"SELECT * FROM generate_series(1, 1) AS \\"a#b\\";
SELECT * FROM generate_series(1, 1) AS \\"a#b\\"(\\"c#d\\");
SELECT * FROM generate_series(1, 1) AS aba;
SELECT * FROM generate_series(1, 1) AS aba(ccd);"
`;

exports[`kitchen sink alter 1`] = `
"CREATE SCHEMA IF NOT EXISTS app_jobs;
CREATE TABLE app_jobs.job_queues (
queue_name varchar NOT NULL PRIMARY KEY,
job_count int DEFAULT (0) NOT NULL,
locked_at pg_catalog.timestamptz,
locked_by varchar
);
ALTER TABLE app_jobs.job_queues ENABLE ROW LEVEL SECURITY;
CREATE TABLE foo (
name text,
foo_timestamp timestampz DEFAULT (CURRENT_DATE)
);
ALTER TABLE foo RENAME COLUMN name TO city;
ALTER TABLE foo ALTER COLUMN foo_timestamp DROP DEFAULT, ALTER COLUMN foo_timestamp TYPE pg_catalog.timestamptz USING 'epoch'::pg_catalog.timestamptz + (foo_timestamp * '1 second'::interval), ALTER COLUMN foo_timestamp SET DEFAULT now();
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ;
ALTER TABLE scha.foo ADD CONSTRAINT \\"MyConstraintKey\\" FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id) ON DELETE CASCADE ;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id) ON DELETE RESTRICT ;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id) ON DELETE SET NULL ;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ON UPDATE CASCADE;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ON UPDATE RESTRICT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ON UPDATE SET NULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id)  ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (order_id) REFERENCES othr.orders (id) ON DELETE SET NULL ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (a, b) REFERENCES othr.orders (c, d)   MATCH FULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY (a, b) REFERENCES othr.orders (c, d)  ;
ALTER TABLE ONLY collections.mfield ADD CONSTRAINT col_field_pkey PRIMARY KEY (id);
ALTER TABLE collections.mfield ADD CONSTRAINT col_field_pkey PRIMARY KEY (id);
ALTER TABLE schema_name.table_name ALTER COLUMN column_name TYPE new_column_type USING column_name::new_column_type;
ALTER TABLE schema_name.table_name ALTER COLUMN column_name TYPE new_column_type USING column_name::new_column_type;
ALTER TABLE schema_name.table_name ADD COLUMN column_name column_type;
ALTER TABLE schema_name.table_name ADD COLUMN column_name geometry(polygon, 4326);
ALTER TABLE schema_name.table_name ADD COLUMN \\"column-name\\" geometry(polygon, 4326);
ALTER TABLE schema_name.table_name ADD COLUMN column_name int;
ALTER TABLE schema_name.table_name DROP COLUMN column_name;
ALTER TABLE mytable OWNER TO regtest_alter_user2;
ALTER FUNCTION alt_func3 ( int ) RENAME TO alt_func4;
ALTER FUNCTION alt_func1 ( int ) RENAME TO alt_func4;
ALTER FUNCTION alt_func3 ( int ) OWNER TO regtest_alter_user2;
ALTER FUNCTION alt_func2 ( int ) OWNER TO regtest_alter_user3;
ALTER FUNCTION alt_func3 ( int ) SET SCHEMA alt_nsp2;
ALTER FUNCTION alt_func2 ( int ) SET SCHEMA alt_nsp2;
ALTER TABLE old_schema_name.table_name SET SCHEMA new_schema_name;
ALTER FOREIGN DATA WRAPPER alt_fdw1 RENAME TO alt_fdw2;
ALTER FOREIGN DATA WRAPPER alt_fdw1 RENAME TO alt_fdw3;
ALTER SERVER alt_fserv1 RENAME TO alt_fserv2;
ALTER SERVER alt_fserv1 RENAME TO alt_fserv3;
ALTER TYPE test_type2 ADD ATTRIBUTE c text;
ALTER TYPE test_type2 ADD ATTRIBUTE c text CASCADE;
ALTER TYPE test_type2 ALTER ATTRIBUTE b TYPE varchar;
ALTER TYPE test_type2 ALTER ATTRIBUTE b TYPE varchar CASCADE;
ALTER TYPE test_type2 DROP ATTRIBUTE b;
ALTER TYPE test_type2 DROP ATTRIBUTE b CASCADE;
ALTER TYPE test_type2 RENAME ATTRIBUTE a TO aa;
ALTER TYPE test_type2 RENAME ATTRIBUTE a TO aa CASCADE;
ALTER TYPE test_type3 DROP ATTRIBUTE a, ADD ATTRIBUTE b int;
CREATE TYPE tt_t0 AS (z inet,x int,y numeric(8, 2));
ALTER TYPE tt_t0 DROP ATTRIBUTE z;
ALTER TABLE tt7 DROP COLUMN q;
ALTER TABLE tt1 OF tt_t0;
ALTER TABLE tt7 NOT OF;
ALTER TABLE ONLY test_drop_constr_parent DROP CONSTRAINT test_drop_constr_parent_c_check;
ALTER TABLE IF EXISTS tt8 ADD COLUMN f int;
ALTER TABLE IF EXISTS tt8 ADD CONSTRAINT xxx PRIMARY KEY (f);
ALTER TABLE IF EXISTS tt8 ADD CHECK (f BETWEEN 0 AND 10);
ALTER TABLE IF EXISTS tt8 ALTER COLUMN f SET DEFAULT 0;
ALTER TABLE IF EXISTS tt8 RENAME COLUMN f TO f1;
ALTER TABLE IF EXISTS tt8 SET SCHEMA alter2;
ALTER TABLE IF EXISTS tt8 ADD COLUMN f int;
ALTER TABLE IF EXISTS tt8 ADD CONSTRAINT xxx PRIMARY KEY (f);
ALTER TABLE IF EXISTS tt8 ADD CHECK (f BETWEEN 0 AND 10);
ALTER TABLE IF EXISTS tt8 ALTER COLUMN f SET DEFAULT 0;
ALTER TABLE IF EXISTS tt8 RENAME COLUMN f TO f1;
ALTER TABLE IF EXISTS tt8 SET SCHEMA alter2;
ALTER TABLE comment_test ALTER COLUMN indexed_col TYPE int;
ALTER TABLE comment_test ALTER COLUMN indexed_col TYPE text;
ALTER TABLE test_add_column ADD COLUMN IF NOT EXISTS c2 int, ADD COLUMN IF NOT EXISTS c3 int, ADD COLUMN c4 int;
ALTER TYPE bogus ADD VALUE 'good';
ALTER TYPE schemaname.bogus ADD VALUE 'good';
ALTER TYPE \\"schema-name\\".bogus ADD VALUE 'good';
ALTER TYPE \\"schema-name\\".\\"bog-us\\" ADD VALUE 'good';
ALTER TYPE \\"schema-name\\".\\"bog-us\\" ADD VALUE 'goo''d';
ALTER TYPE bogus RENAME TO bogon;
ALTER TYPE test8b ADD ATTRIBUTE c testdomain1;
ALTER TYPE test8b ALTER ATTRIBUTE b TYPE testdomain1;
REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (value < 11);
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (value < 11) NOT VALID;
ALTER DOMAIN things VALIDATE CONSTRAINT meow;
ALTER DOMAIN con ADD CONSTRAINT t CHECK (value < 1);
ALTER DOMAIN con ADD CONSTRAINT t CHECK (value < 34);
ALTER DOMAIN con ADD CHECK (value > 0);
CREATE DOMAIN dinter AS vchar4 CHECK (pg_catalog.\\"substring\\"(value, 1, 1) = 'x');
CREATE DOMAIN dtop AS dinter CHECK (pg_catalog.\\"substring\\"(value, 2, 1) = '1');
ALTER DOMAIN testdomain1 RENAME TO testdomain2;
ALTER TYPE testdomain2 RENAME TO testdomain3;
CREATE DOMAIN testdomain1 AS int CONSTRAINT unsigned CHECK (value > 0);
ALTER DOMAIN testdomain1 RENAME CONSTRAINT unsigned TO unsigned_foo;
ALTER DOMAIN testdomain1 DROP CONSTRAINT unsigned_foo;
DROP DOMAIN testdomain1;
ALTER TABLE mytable ADD COLUMN height_in numeric GENERATED ALWAYS AS (height_cm / 2.54) STORED;
ALTER SCHEMA schemaname RENAME TO newname;
ALTER SCHEMA schemaname OWNER TO newowner;"
`;

exports[`kitchen sink alter 2`] = `
"CREATE SCHEMA IF NOT EXISTS app_jobs;
CREATE TABLE app_jobs.job_queues (
queue_name varchar NOT NULL PRIMARY KEY,
job_count int DEFAULT ( 0 ) NOT NULL,
locked_at pg_catalog.timestamptz,
locked_by varchar
);
ALTER TABLE app_jobs.job_queues ENABLE ROW LEVEL SECURITY;
CREATE TABLE foo (
name text,
foo_timestamp timestampz DEFAULT ( CURRENT_DATE )
);
ALTER TABLE foo RENAME name TO city;
ALTER TABLE foo ALTER COLUMN foo_timestamp DROP DEFAULT, ALTER COLUMN foo_timestamp TYPE pg_catalog.timestamptz USING 'epoch'::pg_catalog.timestamptz + (foo_timestamp * '1 second'::interval), ALTER COLUMN foo_timestamp SET DEFAULT now();
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT \\"MyConstraintKey\\" FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE CASCADE;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE RESTRICT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE SET NULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE CASCADE;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE RESTRICT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE SET NULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE SET NULL ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( a, b ) REFERENCES othr.orders ( c, d ) MATCH FULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_key FOREIGN KEY ( a, b ) REFERENCES othr.orders ( c, d );
ALTER TABLE ONLY collections.mfield ADD CONSTRAINT col_field_pkey PRIMARY KEY ( id );
ALTER TABLE collections.mfield ADD CONSTRAINT col_field_pkey PRIMARY KEY ( id );
ALTER TABLE schema_name.table_name ALTER COLUMN column_name TYPE new_column_type USING column_name::new_column_type;
ALTER TABLE schema_name.table_name ALTER COLUMN column_name TYPE new_column_type USING column_name::new_column_type;
ALTER TABLE schema_name.table_name ADD COLUMN  column_name column_type;
ALTER TABLE schema_name.table_name ADD COLUMN  column_name geometry(polygon, 4326);
ALTER TABLE schema_name.table_name ADD COLUMN  \\"column-name\\" geometry(polygon, 4326);
ALTER TABLE schema_name.table_name ADD COLUMN  column_name int;
ALTER TABLE schema_name.table_name DROP COLUMN column_name;
ALTER TABLE mytable OWNER TO regtest_alter_user2;
ALTER FUNCTION alt_func3 ( int ) RENAME TO alt_func4;
ALTER FUNCTION alt_func1 ( int ) RENAME TO alt_func4;
ALTER FUNCTION alt_func3 ( int ) OWNER TO regtest_alter_user2;
ALTER FUNCTION alt_func2 ( int ) OWNER TO regtest_alter_user3;
ALTER FUNCTION alt_func3 ( int ) SET SCHEMA alt_nsp2;
ALTER FUNCTION alt_func2 ( int ) SET SCHEMA alt_nsp2;
ALTER TABLE old_schema_name.table_name SET SCHEMA new_schema_name;
ALTER FOREIGN DATA WRAPPER alt_fdw1 RENAME TO alt_fdw2;
ALTER FOREIGN DATA WRAPPER alt_fdw1 RENAME TO alt_fdw3;
ALTER SERVER alt_fserv1 RENAME TO alt_fserv2;
ALTER SERVER alt_fserv1 RENAME TO alt_fserv3;
ALTER TYPE test_type2 ADD ATTRIBUTE  c text;
ALTER TYPE test_type2 ADD ATTRIBUTE  c text CASCADE;
ALTER TYPE test_type2 ALTER ATTRIBUTE b TYPE varchar;
ALTER TYPE test_type2 ALTER ATTRIBUTE b TYPE varchar CASCADE;
ALTER TYPE test_type2 DROP ATTRIBUTE b;
ALTER TYPE test_type2 DROP ATTRIBUTE b CASCADE;
ALTER TYPE test_type2 RENAME ATTRIBUTE a TO aa;
ALTER TYPE test_type2 RENAME ATTRIBUTE a TO aa CASCADE;
ALTER TYPE test_type3 DROP ATTRIBUTE a, ADD ATTRIBUTE  b int;
CREATE TYPE tt_t0 AS ( 	z inet,
x int,
y numeric(8, 2) );
ALTER TYPE tt_t0 DROP ATTRIBUTE z;
ALTER TABLE tt7 DROP COLUMN q;
ALTER TABLE tt1 OF tt_t0;
ALTER TABLE tt7 NOT OF;
ALTER TABLE ONLY test_drop_constr_parent DROP CONSTRAINT test_drop_constr_parent_c_check;
ALTER TABLE IF EXISTS tt8 ADD COLUMN  f int;
ALTER TABLE IF EXISTS tt8 ADD CONSTRAINT xxx PRIMARY KEY ( f );
ALTER TABLE IF EXISTS tt8 ADD CHECK ( f BETWEEN 0 AND 10 );
ALTER TABLE IF EXISTS tt8 ALTER COLUMN f SET DEFAULT 0;
ALTER TABLE IF EXISTS tt8 RENAME f TO f1;
ALTER TABLE IF EXISTS tt8 SET SCHEMA alter2;
ALTER TABLE IF EXISTS tt8 ADD COLUMN  f int;
ALTER TABLE IF EXISTS tt8 ADD CONSTRAINT xxx PRIMARY KEY ( f );
ALTER TABLE IF EXISTS tt8 ADD CHECK ( f BETWEEN 0 AND 10 );
ALTER TABLE IF EXISTS tt8 ALTER COLUMN f SET DEFAULT 0;
ALTER TABLE IF EXISTS tt8 RENAME f TO f1;
ALTER TABLE IF EXISTS tt8 SET SCHEMA alter2;
ALTER TABLE comment_test ALTER COLUMN indexed_col TYPE int;
ALTER TABLE comment_test ALTER COLUMN indexed_col TYPE text;
ALTER TABLE test_add_column ADD COLUMN IF NOT EXISTS  c2 int, ADD COLUMN IF NOT EXISTS  c3 int, ADD COLUMN  c4 int;
ALTER TYPE bogus ADD VALUE 'good';
ALTER TYPE schemaname.bogus ADD VALUE 'good';
ALTER TYPE \\"schema-name\\".bogus ADD VALUE 'good';
ALTER TYPE \\"schema-name\\".\\"bog-us\\" ADD VALUE 'good';
ALTER TYPE \\"schema-name\\".\\"bog-us\\" ADD VALUE 'goo''d';
ALTER TYPE bogus RENAME TO bogon;
ALTER TYPE test8b ADD ATTRIBUTE  c testdomain1;
ALTER TYPE test8b ALTER ATTRIBUTE b TYPE testdomain1;
REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
ALTER DOMAIN things ADD CONSTRAINT meow CHECK ( value < 11 );
ALTER DOMAIN things ADD CONSTRAINT meow CHECK ( value < 11 ) NOT VALID;
ALTER DOMAIN things VALIDATE CONSTRAINT meow;
ALTER DOMAIN con ADD CONSTRAINT t CHECK ( value < 1 );
ALTER DOMAIN con ADD CONSTRAINT t CHECK ( value < 34 );
ALTER DOMAIN con ADD CHECK ( value > 0 );
CREATE DOMAIN dinter AS vchar4 CHECK ( pg_catalog.substring(value, 1, 1) = 'x' );
CREATE DOMAIN dtop AS dinter CHECK ( pg_catalog.substring(value, 2, 1) = '1' );
ALTER DOMAIN testdomain1 RENAME TO testdomain2;
ALTER TYPE testdomain2 RENAME TO testdomain3;
CREATE DOMAIN testdomain1 AS int CONSTRAINT unsigned CHECK ( value > 0 );
ALTER DOMAIN testdomain1 RENAME CONSTRAINT unsigned TO unsigned_foo;
ALTER DOMAIN testdomain1 DROP CONSTRAINT unsigned_foo;
DROP DOMAIN testdomain1;
ALTER TABLE mytable ADD COLUMN  height_in numeric GENERATED ALWAYS AS ( height_cm / 2.54 ) STORED;
ALTER SCHEMA schemaname RENAME TO newname;
ALTER SCHEMA schemaname OWNER TO newowner;"
`;

exports[`kitchen sink alter enums 1`] = `
"ALTER TYPE electronic_mail RENAME TO email;
ALTER TYPE email OWNER TO joe;
ALTER TYPE email SET SCHEMA customers;
ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
ALTER TYPE colors ADD VALUE 'orange' BEFORE 'red';
ALTER TYPE enum_type ADD VALUE 'new_value';"
`;

exports[`kitchen sink alter enums 2`] = `
"ALTER TYPE electronic_mail RENAME TO email;
ALTER TYPE email OWNER TO joe;
ALTER TYPE email SET SCHEMA customers;
ALTER TYPE compfoo ADD ATTRIBUTE  f3 int;
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
ALTER TYPE colors ADD VALUE 'orange' BEFORE 'red';
ALTER TYPE enum_type ADD VALUE 'new_value';"
`;

exports[`kitchen sink conflicts 1`] = `
"INSERT INTO yo.\\"table\\" (project_id, name, field_name) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT (project_id, name) DO UPDATE SET field_name = EXCLUDED.field_name;
INSERT INTO yo.\\"table\\" (project_id, name, field_name) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT (project_id, name) DO UPDATE SET field_name = EXCLUDED.field_name WHERE prop = 1;
INSERT INTO yo.\\"table\\" (project_id, name, field_name) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT (project_id, name) DO NOTHING;
INSERT INTO customers (name, email) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT ON CONSTRAINT customers_name_key DO NOTHING;
INSERT INTO customers (name, email) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT (name) DO UPDATE SET email = (EXCLUDED.email || ';') || customers.email;"
`;

exports[`kitchen sink conflicts 2`] = `
"INSERT INTO yo.\\"table\\" ( project_id, name, field_name ) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT ( project_id, name ) DO UPDATE SET field_name = excluded.field_name;
INSERT INTO yo.\\"table\\" ( project_id, name, field_name ) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT ( project_id, name ) DO UPDATE SET field_name = excluded.field_name WHERE prop = 1;
INSERT INTO yo.\\"table\\" ( project_id, name, field_name ) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT ( project_id, name ) DO NOTHING;
INSERT INTO customers ( name, email ) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT ON CONSTRAINT customers_name_key DO NOTHING;
INSERT INTO customers ( name, email ) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT ( name ) DO UPDATE SET email = (excluded.email || ';') || customers.email;"
`;

exports[`kitchen sink default privs 1`] = `
"ALTER DEFAULT PRIVILEGES IN SCHEMA objects_public
GRANT EXECUTE ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
GRANT SELECT ON TABLES  TO PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
GRANT INSERT ON TABLES  TO webuser;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
REVOKE SELECT ON TABLES  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
REVOKE INSERT ON TABLES  FROM webuser;
ALTER DEFAULT PRIVILEGES FOR ROLE admin
REVOKE EXECUTE ON FUNCTIONS  FROM PUBLIC;"
`;

exports[`kitchen sink default privs 2`] = `
"ALTER DEFAULT PRIVILEGES IN SCHEMA objects_public
GRANT EXECUTE ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
GRANT SELECT ON TABLES  TO PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
GRANT INSERT ON TABLES  TO webuser;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
REVOKE SELECT ON TABLES  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
REVOKE INSERT ON TABLES  FROM webuser;
ALTER DEFAULT PRIVILEGES FOR ROLE admin
REVOKE EXECUTE ON FUNCTIONS  FROM PUBLIC;"
`;

exports[`kitchen sink delete 1`] = `
"DELETE FROM shoelace_data WHERE sl_name = old.sl_name;
DELETE FROM delete_test AS dt WHERE dt.a > 75;
DELETE FROM delete_test AS dt WHERE delete_test.a > 25;
DELETE FROM delete_test WHERE a > 25;"
`;

exports[`kitchen sink delete 2`] = `
"DELETE FROM shoelace_data WHERE sl_name = old.sl_name;
DELETE FROM delete_test AS dt WHERE dt.a > 75;
DELETE FROM delete_test AS dt WHERE delete_test.a > 25;
DELETE FROM delete_test WHERE a > 25;"
`;

exports[`kitchen sink do stmt 1`] = `
"DO $CODEZ$
BEGIN
IF NOT EXISTS (
SELECT
1
FROM
pg_roles
WHERE
rolname = 'administrator') THEN
CREATE ROLE administrator;
COMMENT ON ROLE administrator IS 'Administration group';
END IF;
END $CODEZ$;"
`;

exports[`kitchen sink do stmt 2`] = `
"DO $$
BEGIN
IF NOT EXISTS (
SELECT
1
FROM
pg_roles
WHERE
rolname = 'administrator') THEN
CREATE ROLE administrator;
COMMENT ON ROLE administrator IS 'Administration group';
END IF;
END $$;"
`;

exports[`kitchen sink domain 1`] = `
"CREATE DOMAIN v8.json AS json;
CREATE DOMAIN email AS citext CHECK (value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$');"
`;

exports[`kitchen sink domain 2`] = `
"CREATE DOMAIN v8.json AS json;
CREATE DOMAIN email AS citext CHECK ( value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' );"
`;

exports[`kitchen sink domains 1`] = `
"CREATE DOMAIN v8.json AS json;
CREATE DOMAIN email AS citext CHECK (value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$');"
`;

exports[`kitchen sink domains 2`] = `
"CREATE DOMAIN v8.json AS json;
CREATE DOMAIN email AS citext CHECK ( value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' );"
`;

exports[`kitchen sink enums 1`] = `
"CREATE TYPE myschema.special_type AS ENUM (
'oh',
'yea'
);"
`;

exports[`kitchen sink enums 2`] = `
"CREATE TYPE myschema.special_type AS ENUM (
'oh',
'yea'
);"
`;

exports[`kitchen sink fixtures complex.sql 1`] = `
"SELECT p1.playerid,
f1.playername,
p2.playerid,
f2.playername FROM player AS f1,
player AS f2,
plays AS p1 FULL OUTER JOIN plays AS p2 ON p1.playerid < p2.playerid AND p1.teamid = p2.teamid GROUP BY p1.playerid,
f1.playerid,
p2.playerid,
f2.playerid HAVING count(p1.playerid) = count(*) AND count(p2.playerid) = count(*) AND p1.playerid = f1.playerid AND p2.playerid = f2.playerid;"
`;

exports[`kitchen sink fixtures complex.sql 2`] = `
"SELECT p1.playerid,
f1.playername,
p2.playerid,
f2.playername FROM player AS f1,
player AS f2,
plays AS p1 FULL OUTER JOIN plays AS p2 ON p1.playerid < p2.playerid AND p1.teamid = p2.teamid GROUP BY p1.playerid,
f1.playerid,
p2.playerid,
f2.playerid HAVING count(p1.playerid) = count(*) AND count(p2.playerid) = count(*) AND p1.playerid = f1.playerid AND p2.playerid = f2.playerid;"
`;

exports[`kitchen sink fixtures custom.sql 1`] = `
"SELECT * FROM tab ORDER BY col USING <;
SELECT * FROM tab ORDER BY col USING >;
SELECT * FROM tab ORDER BY col USING =;
SELECT * FROM tab ORDER BY col USING = NULLS FIRST,
col2 USING < NULLS LAST;
SELECT mleast(VARIADIC arr:=ARRAY[10, (-1), 5, 4.4]);
SELECT encode('''123\\\\000\\\\001', 'base64');
SELECT 'слон';
SELECT 'data';
SELECT 3 OPERATOR(pg_catalog.+) 4;
SELECT * FROM ROWS FROM (getfoo6(1) AS (fooid int, foosubid int, fooname text), getfoo7(1) AS (fooid int, foosubid int, fooname text)) AS (fooid int, foosubid int, fooname text);
SELECT a FROM b WHERE a < (SELECT 1);
SELECT a FROM b WHERE a < ALL (SELECT 1);
SELECT a FROM b WHERE a < ANY (SELECT 1);
SELECT a FROM b WHERE EXISTS (SELECT 1);
SELECT a FROM b WHERE a < ARRAY (SELECT DISTINCT (SELECT 1),
(SELECT DISTINCT 1 GROUP BY 7 HAVING 1 < (SELECT 1)));
SELECT 1 WHERE 'abc' SIMILAR TO 'abc';
SELECT 1 WHERE 'abc' SIMILAR TO test('test');
SELECT 1 WHERE 'abc' SIMILAR TO test('test') ESCAPE 't';
SELECT 1::bit(1);
SET client_encoding = 'UNICODE';
SET client_encoding = 'UNICODE';
SET client_min_messages = 'notice';
SHOW client_encoding;"
`;

exports[`kitchen sink fixtures custom.sql 2`] = `
"SELECT * FROM tab ORDER BY col USING <;
SELECT * FROM tab ORDER BY col USING >;
SELECT * FROM tab ORDER BY col USING =;
SELECT * FROM tab ORDER BY col USING = NULLS FIRST,
col2 USING < NULLS LAST;
SELECT mleast(VARIADIC arr := ARRAY[10, (-1), 5, 4.4]);
SELECT encode('''123\\\\000\\\\001', 'base64');
SELECT 'слон';
SELECT 'data';
SELECT 3 OPERATOR(pg_catalog.+) 4;
SELECT * FROM ROWS FROM (getfoo6(1) AS (fooid int, foosubid int, fooname text), getfoo7(1) AS (fooid int, foosubid int, fooname text))  AS (fooid int, foosubid int, fooname text);
SELECT a FROM b WHERE a < (SELECT 1);
SELECT a FROM b WHERE a < ALL (SELECT 1);
SELECT a FROM b WHERE a < ANY (SELECT 1);
SELECT a FROM b WHERE EXISTS (SELECT 1);
SELECT a FROM b WHERE a < ARRAY (SELECT DISTINCT (SELECT 1),
(SELECT DISTINCT 1 GROUP BY 7 HAVING 1 < (SELECT 1)));
SELECT 1 WHERE 'abc' SIMILAR TO 'abc';
SELECT 1 WHERE 'abc' SIMILAR TO test('test');
SELECT 1 WHERE 'abc' SIMILAR TO test('test') ESCAPE 't';
SELECT 1::bit(1);
SET client_encoding = 'UNICODE';
SET client_encoding = 'UNICODE';
SET client_min_messages = 'notice';
SHOW client_encoding;"
`;

exports[`kitchen sink fixtures param-ref.sql 1`] = `
"SELECT * FROM table_name WHERE name = ?;
SELECT * FROM table_name WHERE name = $1;
SELECT $1::text AS name;"
`;

exports[`kitchen sink fixtures param-ref.sql 2`] = `
"SELECT * FROM table_name WHERE name = ?;
SELECT * FROM table_name WHERE name = $1;
SELECT $1::text AS name;"
`;

exports[`kitchen sink fixtures query-001.sql 1`] = `
"SELECT array_agg(players),
player_teams FROM (SELECT DISTINCT t1.t1player AS players_dist,
t1.player_teams FROM (SELECT p.playerid AS t1id,
concat(p.playerid, ':', p.playername, ' ') AS t1player,
array_agg(pl.teamid ORDER BY pl.teamid ) AS player_teams FROM player AS p LEFT OUTER JOIN plays AS pl ON p.playerid = pl.playerid GROUP BY p.playerid,
p.playername) AS t1 INNER JOIN (SELECT p.playerid AS t2id,
array_agg(pl.teamid ORDER BY pl.teamid ) AS player_teams FROM player AS p LEFT OUTER JOIN plays AS pl ON p.playerid = pl.playerid GROUP BY p.playerid,
p.playername) AS t2 ON t1.player_teams = t2.player_teams AND t1.t1id <> t2.t2id) AS innerquery GROUP BY player_teams;"
`;

exports[`kitchen sink fixtures query-001.sql 2`] = `
"SELECT array_agg(players),
player_teams FROM (SELECT DISTINCT t1.t1player AS players_dist,
t1.player_teams FROM (SELECT p.playerid AS t1id,
concat(p.playerid, ':', p.playername, ' ') AS t1player,
array_agg(pl.teamid ORDER BY pl.teamid) AS player_teams FROM player AS p LEFT OUTER JOIN plays AS pl ON p.playerid = pl.playerid GROUP BY p.playerid,
p.playername) AS t1 INNER JOIN (SELECT p.playerid AS t2id,
array_agg(pl.teamid ORDER BY pl.teamid) AS player_teams FROM player AS p LEFT OUTER JOIN plays AS pl ON p.playerid = pl.playerid GROUP BY p.playerid,
p.playername) AS t2 ON t1.player_teams = t2.player_teams AND t1.t1id <> t2.t2id) AS innerquery GROUP BY player_teams;"
`;

exports[`kitchen sink fixtures query-002.sql 1`] = `"SELECT * FROM \\"Foo\\" AS f1 WHERE f1.\\"FooUID\\" = (SELECT f2.\\"FooUID\\" FROM \\"Foo\\" AS f2 LEFT OUTER JOIN \\"Bar\\" AS b ON f2.\\"BarUID\\" = b.\\"BarUID\\" WHERE f2.\\"BarUID\\" IS NOT NULL AND b.\\"BarUID\\" IS NULL LIMIT 1)"`;

exports[`kitchen sink fixtures query-002.sql 2`] = `"SELECT * FROM \\"Foo\\" AS f1 WHERE f1.\\"FooUID\\" = (SELECT f2.\\"FooUID\\" FROM \\"Foo\\" AS f2 LEFT OUTER JOIN \\"Bar\\" AS b ON f2.\\"BarUID\\" = b.\\"BarUID\\" WHERE f2.\\"BarUID\\" IS NOT NULL AND b.\\"BarUID\\" IS NULL LIMIT 1)"`;

exports[`kitchen sink fixtures query-003.sql 1`] = `"SELECT ((SELECT ROW(1, 1, 1, 1)::test)::test).*;"`;

exports[`kitchen sink fixtures query-003.sql 2`] = `"SELECT ((SELECT ROW(1, 1, 1, 1)::test)::test).*;"`;

exports[`kitchen sink fixtures simple.sql 1`] = `
"SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name LIKE ( '%''test''%' );
SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name NOT LIKE ( '%''test''%' );
SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name ILIKE ( '%''test''%' );
SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name NOT ILIKE ( '%''test''%' );
SELECT * FROM table_name WHERE last_name SIMILAR TO '%(b|d)%';
SELECT * FROM table_name WHERE last_name SIMILAR TO '%(b|d)%' ESCAPE 'a';
SELECT * FROM table_name WHERE last_name NOT SIMILAR TO '%(b|d)%';
SELECT * FROM table_name WHERE last_name NOT SIMILAR TO '%(b|d)%' ESCAPE 'a';
SELECT * FROM table_name WHERE last_name > first_name;
SELECT * FROM table_name WHERE last_name <> first_name;
SELECT * FROM table_name WHERE last_name = ANY( stuff );
SELECT * FROM table_name WHERE last_name = ALL( stuff );
SELECT title,
category_id FROM film JOIN film_category USING (film_id) WHERE category_id = ANY (SELECT category_id FROM category WHERE name = 'Action' OR name = 'Drama');
SELECT title,
category_id FROM film JOIN film_category USING (film_id) WHERE category_id IN (SELECT category_id FROM category WHERE name = 'Action' OR name = 'Drama');
SELECT title,
category_id FROM film JOIN film_category USING (film_id) WHERE NOT (category_id IN (SELECT category_id FROM category WHERE name = 'Action' OR name = 'Drama'));
SELECT title FROM film WHERE length >= ANY (SELECT max(length) FROM film JOIN film_category USING (film_id) GROUP BY category_id);
SELECT * FROM transactions.transaction WHERE transaction_date BETWEEN to_date('2020-01-01', 'YYYY-MM-DD') AND to_date('2020-12-31', 'YYYY-MM-DD') AND owner = 0;
SELECT * FROM transactions.transaction WHERE transaction_date NOT BETWEEN to_date('2020-01-01', 'YYYY-MM-DD') AND to_date('2020-12-31', 'YYYY-MM-DD') AND owner = 0;"
`;

exports[`kitchen sink fixtures simple.sql 2`] = `
"SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name LIKE ('%''test''%');
SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name NOT LIKE ('%''test''%');
SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name ILIKE ('%''test''%');
SELECT * FROM table_name WHERE name = 'test' AND num > 7 AND last_name NOT ILIKE ('%''test''%');
SELECT * FROM table_name WHERE last_name SIMILAR TO '%(b|d)%';
SELECT * FROM table_name WHERE last_name SIMILAR TO '%(b|d)%' ESCAPE 'a';
SELECT * FROM table_name WHERE last_name NOT SIMILAR TO '%(b|d)%';
SELECT * FROM table_name WHERE last_name NOT SIMILAR TO '%(b|d)%' ESCAPE 'a';
SELECT * FROM table_name WHERE last_name > first_name;
SELECT * FROM table_name WHERE last_name <> first_name;
SELECT * FROM table_name WHERE last_name = ANY (stuff);
SELECT * FROM table_name WHERE last_name = ALL (stuff);
SELECT title,
category_id FROM film JOIN film_category USING (film_id) WHERE category_id = ANY (SELECT category_id FROM category WHERE name = 'Action' OR name = 'Drama');
SELECT title,
category_id FROM film JOIN film_category USING (film_id) WHERE category_id IN (SELECT category_id FROM category WHERE name = 'Action' OR name = 'Drama');
SELECT title,
category_id FROM film JOIN film_category USING (film_id) WHERE NOT (category_id IN (SELECT category_id FROM category WHERE name = 'Action' OR name = 'Drama'));
SELECT title FROM film WHERE length >= ANY (SELECT max(length) FROM film JOIN film_category USING (film_id) GROUP BY category_id);
SELECT * FROM transactions.transaction WHERE transaction_date BETWEEN to_date('2020-01-01', 'YYYY-MM-DD') AND to_date('2020-12-31', 'YYYY-MM-DD') AND owner = 0;
SELECT * FROM transactions.transaction WHERE transaction_date NOT BETWEEN to_date('2020-01-01', 'YYYY-MM-DD') AND to_date('2020-12-31', 'YYYY-MM-DD') AND owner = 0;"
`;

exports[`kitchen sink functions basic 1`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS void AS $LQLCODEZ$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id;
$LQLCODEZ$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS obj.geo AS $LQLCODEZ$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id;
$LQLCODEZ$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions basic 2`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS void AS $EOFCODE$UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id;$EOFCODE$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS obj.geo AS $EOFCODE$UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id;$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions returns_table 1`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id obj.geo_type, other_id obj.geo_type ) RETURNS TABLE ( path text, name int ) AS $LQLCODEZ$
SELECT * FROM
mytable
$LQLCODEZ$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions returns_table 2`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id obj.geo_type, other_id obj.geo_type ) RETURNS TABLE ( path text, name int ) AS $EOFCODE$SELECT * FROM
mytable$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions returns_trigger 1`] = `
"CREATE OR REPLACE FUNCTION helpers.some_method ( ) RETURNS TRIGGER AS $LQLCODEZ$
BEGIN
IF tg_op = 'INSERT' THEN
NEW.some_prop = helpers.do_magic (NEW.data);
RETURN NEW;
END IF;
END;
$LQLCODEZ$ LANGUAGE plpgsql;"
`;

exports[`kitchen sink functions returns_trigger 2`] = `
"CREATE OR REPLACE FUNCTION helpers.some_method (  ) RETURNS trigger AS $EOFCODE$BEGIN
IF tg_op = 'INSERT' THEN
NEW.some_prop = helpers.do_magic (NEW.data);
RETURN NEW;
END IF;
END;$EOFCODE$ LANGUAGE plpgsql;"
`;

exports[`kitchen sink functions setof 1`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS SETOF obj.geo AS $LQLCODEZ$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$LQLCODEZ$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id obj.geo_type, other_id obj.geo_type ) RETURNS SETOF obj.geo AS $LQLCODEZ$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$LQLCODEZ$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions setof 2`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS SETOF obj.geo AS $EOFCODE$UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id$EOFCODE$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id obj.geo_type, other_id obj.geo_type ) RETURNS SETOF obj.geo AS $EOFCODE$UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink grants 1`] = `
"GRANT USAGE ON SCHEMA users TO administrator;
GRANT EXECUTE ON FUNCTION auth.authenticate TO anonymous;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE auth.token TO administrator;
REVOKE USAGE ON SCHEMA users FROM administrator;
REVOKE EXECUTE ON FUNCTION auth.authenticate FROM anonymous;
REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE auth.token FROM administrator;
GRANT SELECT, INSERT ON TABLE someschema.sometable2 TO somerole;
GRANT UPDATE ( col2 ) ON TABLE someschema.sometable2 TO somerole;
GRANT UPDATE ( col2, col3 ) ON TABLE someschema.sometable2 TO somerole;
GRANT UPDATE ( col2, \\"another-column\\" ) ON TABLE someschema.sometable2 TO somerole;
GRANT INSERT ( col2 ), UPDATE ( col2, \\"another-column\\" ), DELETE ON TABLE someschema.sometable2 TO somerole;
GRANT INSERT ( col2, col3 ) ON TABLE someschema.sometable2 TO somerole;
GRANT INSERT ( col2, \\"another-column\\" ) ON TABLE someschema.sometable2 TO somerole;"
`;

exports[`kitchen sink grants 2`] = `
"GRANT USAGE ON SCHEMA users TO administrator;
GRANT EXECUTE ON FUNCTION auth.authenticate TO anonymous;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE auth.token TO administrator;
REVOKE USAGE ON SCHEMA users FROM administrator;
REVOKE EXECUTE ON FUNCTION auth.authenticate FROM anonymous;
REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE auth.token FROM administrator;
GRANT SELECT, INSERT ON TABLE someschema.sometable2 TO somerole;
GRANT UPDATE ( col2 ) ON TABLE someschema.sometable2 TO somerole;
GRANT UPDATE ( col2, col3 ) ON TABLE someschema.sometable2 TO somerole;
GRANT UPDATE ( col2, \\"another-column\\" ) ON TABLE someschema.sometable2 TO somerole;
GRANT INSERT ( col2 ), UPDATE ( col2, \\"another-column\\" ), DELETE ON TABLE someschema.sometable2 TO somerole;
GRANT INSERT ( col2, col3 ) ON TABLE someschema.sometable2 TO somerole;
GRANT INSERT ( col2, \\"another-column\\" ) ON TABLE someschema.sometable2 TO somerole;"
`;

exports[`kitchen sink indexes 1`] = `
"CREATE INDEX CONCURRENTLY boom_merkle_tree_tag_created_reference_idx ON boom.merkle_tree (tag, created, reference);
CREATE UNIQUE INDEX databases_database_unique_name_idx ON databases.database (tenant_id, database_name_hash(name));
CREATE UNIQUE INDEX boom_worktree_idx ON boom.worktree (tag, reference, created, decode(md5(lower(path)), 'hex'));
CREATE UNIQUE INDEX uniq_service_when_not_null ON schema2.table3 (uid, svc) WHERE svc IS NOT NULL;
CREATE UNIQUE INDEX new_unique_idx ON new_example (a, b) INCLUDE (c);"
`;

exports[`kitchen sink indexes 2`] = `
"CREATE INDEX CONCURRENTLY boom_merkle_tree_tag_created_reference_idx ON boom.merkle_tree ( tag, created, reference );
CREATE UNIQUE INDEX databases_database_unique_name_idx ON databases.database ( tenant_id, database_name_hash(name) );
CREATE UNIQUE INDEX boom_worktree_idx ON boom.worktree ( tag, reference, created, decode(md5(lower(path)), 'hex') );
CREATE UNIQUE INDEX uniq_service_when_not_null ON schema2.table3 ( uid, svc ) WHERE svc IS NOT NULL;
CREATE UNIQUE INDEX new_unique_idx ON new_example ( a, b ) INCLUDE ( c );"
`;

exports[`kitchen sink insert 1`] = `
"INSERT INTO shoelace_data VALUES (1, 2, 3, 'truth', TRUE);
INSERT INTO shoelace_data (id, col1, col2, val1, bl2) VALUES (1, 2, 3, 'truth', TRUE);
INSERT INTO shoelace_data DEFAULT VALUES;
INSERT INTO foo (f2, f3) VALUES ('test', DEFAULT), ('More', 11), (upper('more'), 7 + 9) RETURNING *, f1 + f3 AS sum;
INSERT INTO customers (name, email) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT (id, project_id) DO UPDATE SET email = (EXCLUDED.email || ';') || customers.email, level = customers.level + 1, other = EXCLUDED.other RETURNING *;
INSERT INTO v8.modules (name, code) VALUES ('ajv', ' (function () { var module = { exports: { } };
var exports = module.exports;
/* plv8 bundle begins */
/* plv8 bundle ends */
return module;
})(); ');"
`;

exports[`kitchen sink insert 2`] = `
"INSERT INTO shoelace_data VALUES (1, 2, 3, 'truth', TRUE);
INSERT INTO shoelace_data ( id, col1, col2, val1, bl2 ) VALUES (1, 2, 3, 'truth', TRUE);
INSERT INTO shoelace_data DEFAULT VALUES;
INSERT INTO foo ( f2, f3 ) VALUES ('test', DEFAULT), ('More', 11), (upper('more'), 7 + 9) RETURNING *,f1 + f3 AS sum;
INSERT INTO customers ( name, email ) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT ( id, project_id ) DO UPDATE SET email = (excluded.email || ';') || customers.email,level = customers.level + 1,other = excluded.other RETURNING *;
INSERT INTO v8.modules ( name, code ) VALUES ('ajv', ' (function () { var module = { exports: { } };
var exports = module.exports;
/* plv8 bundle begins */
/* plv8 bundle ends */
return module;
})(); ');"
`;

exports[`kitchen sink policies 1`] = `
"CREATE POLICY delete_user ON users.\\"user\\" FOR DELETE TO authenticated USING ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_user_no_to ON users.\\"user\\" FOR DELETE TO PUBLIC USING ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_user_no_to ON users.\\"user\\" FOR DELETE TO PUBLIC WITH CHECK ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_user ON users.\\"user\\" FOR DELETE TO authenticated USING ( id = current_setting('user.id')::uuid );
CREATE POLICY select_user ON users.\\"user\\" FOR SELECT TO PUBLIC USING ( TRUE );
CREATE POLICY delete_own ON myschema.mytable FOR DELETE TO PUBLIC USING ( group_id = ANY( otherschema.my_policy_fn() ) );
CREATE POLICY insert_own ON myschema.mytable FOR ALL TO PUBLIC WITH CHECK ( group_id = ANY( otherschema.my_policy_fn() ) );
CREATE POLICY select_any ON myschema.mytable FOR SELECT TO PUBLIC USING ( TRUE );
CREATE POLICY update_own ON myschema.mytable FOR UPDATE TO PUBLIC USING ( group_id = ANY( otherschema.my_policy_fn() ) );
CREATE POLICY delete_pol_permissive ON users.\\"user\\" FOR DELETE TO PUBLIC WITH CHECK ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_pol_restrictive ON users.\\"user\\" AS RESTRICTIVE FOR DELETE TO PUBLIC WITH CHECK ( id = current_setting('user.id')::uuid );
ALTER POLICY authenticated_can_select_on_user_permissions_select ON perm_schema.user_permissions TO authenticated USING ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) );
ALTER POLICY authenticated_can_select_on_user_permissions_select ON perm_schema.user_permissions TO authenticated WITH CHECK ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) );
ALTER POLICY authenticated_can_select_on_user_permissions_select ON perm_schema.user_permissions TO authenticated USING ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) ) WITH CHECK ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) );"
`;

exports[`kitchen sink policies 2`] = `
"CREATE POLICY delete_user ON users.\\"user\\" FOR DELETE TO authenticated USING ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_user_no_to ON users.\\"user\\" FOR DELETE TO PUBLIC USING ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_user_no_to ON users.\\"user\\" FOR DELETE TO PUBLIC WITH CHECK ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_user ON users.\\"user\\" FOR DELETE TO authenticated USING ( id = current_setting('user.id')::uuid );
CREATE POLICY select_user ON users.\\"user\\" FOR SELECT TO PUBLIC USING ( TRUE );
CREATE POLICY delete_own ON myschema.mytable FOR DELETE TO PUBLIC USING ( group_id = ANY (otherschema.my_policy_fn()) );
CREATE POLICY insert_own ON myschema.mytable FOR ALL TO PUBLIC WITH CHECK ( group_id = ANY (otherschema.my_policy_fn()) );
CREATE POLICY select_any ON myschema.mytable FOR SELECT TO PUBLIC USING ( TRUE );
CREATE POLICY update_own ON myschema.mytable FOR UPDATE TO PUBLIC USING ( group_id = ANY (otherschema.my_policy_fn()) );
CREATE POLICY delete_pol_permissive ON users.\\"user\\" FOR DELETE TO PUBLIC WITH CHECK ( id = current_setting('user.id')::uuid );
CREATE POLICY delete_pol_restrictive ON users.\\"user\\" AS RESTRICTIVE FOR DELETE TO PUBLIC WITH CHECK ( id = current_setting('user.id')::uuid );
ALTER POLICY authenticated_can_select_on_user_permissions_select ON perm_schema.user_permissions TO authenticated USING ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) );
ALTER POLICY authenticated_can_select_on_user_permissions_select ON perm_schema.user_permissions TO authenticated WITH CHECK ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) );
ALTER POLICY authenticated_can_select_on_user_permissions_select ON perm_schema.user_permissions TO authenticated USING ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) ) WITH CHECK ( EXISTS (SELECT 1 FROM acl_schema.mbr_acl AS acl WHERE acl.actor_id = jwt_public.current_user_id()) );"
`;

exports[`kitchen sink roles create 1`] = `
"CREATE ROLE app_anonymous;
CREATE ROLE app_authenticated;
CREATE ROLE app_user WITH LOGIN PASSWORD 'xyz';
CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
CREATE ROLE admin1 WITH LOGIN PASSWORD 'jw8s0F4' CREATEDB CREATEROLE INHERIT;
CREATE ROLE admin2 WITH NOLOGIN NOCREATEDB NOCREATEROLE;
CREATE ROLE authy WITH ADMIN app_authenticated;"
`;

exports[`kitchen sink roles create 2`] = `
"CREATE ROLE \\"app_anonymous\\";
CREATE ROLE \\"app_authenticated\\";
CREATE ROLE \\"app_user\\" WITH LOGIN PASSWORD 'xyz';
CREATE ROLE \\"miriam\\" WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
CREATE ROLE \\"admin1\\" WITH LOGIN PASSWORD 'jw8s0F4' CREATEDB CREATEROLE INHERIT;
CREATE ROLE \\"admin2\\" WITH NOLOGIN NOCREATEDB NOCREATEROLE;
CREATE ROLE \\"authy\\" WITH ADMIN app_authenticated;"
`;

exports[`kitchen sink roles grants 1`] = `
"GRANT APP_AUTHENTICATED TO app_user;
GRANT APP_AUTHENTICATED, APP_ANONYMOUS TO app_user;
GRANT APP_AUTHENTICATED, APP_ANONYMOUS TO app_user, super_app_user;"
`;

exports[`kitchen sink roles grants 2`] = `
"GRANT APP_AUTHENTICATED TO app_user;
GRANT APP_AUTHENTICATED, APP_ANONYMOUS TO app_user;
GRANT APP_AUTHENTICATED, APP_ANONYMOUS TO app_user, super_app_user;"
`;

exports[`kitchen sink rules create 1`] = `
"CREATE RULE collections_ins_protect AS ON INSERT TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE collections_upd_protect AS ON UPDATE TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE collections_del_protect AS ON DELETE TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE shoelace_upd AS ON UPDATE TO shoelace DO INSTEAD UPDATE shoelace_data SET sl_name = new.sl_name, sl_avail = new.sl_avail, sl_color = new.sl_color, sl_len = new.sl_len, sl_unit = new.sl_unit WHERE sl_name = old.sl_name;
CREATE RULE shoelace_del AS ON DELETE TO shoelace DO INSTEAD DELETE FROM shoelace_data WHERE sl_name = old.sl_name;
CREATE RULE \\"_RETURN\\" AS ON SELECT TO t2 DO INSTEAD SELECT * FROM t1;
CREATE RULE log_shoelace AS ON UPDATE TO shoelace_data WHERE new.sl_avail <> old.sl_avail DO INSERT INTO shoelace_log VALUES (new.sl_name, new.sl_avail, CURRENT_USER, CURRENT_TIMESTAMP);
CREATE RULE shoelace_ins AS ON INSERT TO shoelace DO INSTEAD INSERT INTO shoelace_data VALUES (new.sl_name, new.sl_avail, new.sl_color, new.sl_len, new.sl_unit);"
`;

exports[`kitchen sink rules create 2`] = `
"CREATE RULE collections_ins_protect AS ON INSERT TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE collections_upd_protect AS ON UPDATE TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE collections_del_protect AS ON DELETE TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE shoelace_upd AS ON UPDATE TO shoelace DO INSTEAD UPDATE shoelace_data SET sl_name = new.sl_name,sl_avail = new.sl_avail,sl_color = new.sl_color,sl_len = new.sl_len,sl_unit = new.sl_unit WHERE sl_name = old.sl_name;
CREATE RULE shoelace_del AS ON DELETE TO shoelace DO INSTEAD  DELETE FROM shoelace_data WHERE sl_name = old.sl_name;
CREATE RULE \\"_RETURN\\" AS ON SELECT TO t2 DO INSTEAD SELECT * FROM t1;
CREATE RULE log_shoelace AS ON UPDATE TO shoelace_data WHERE new.sl_avail <> old.sl_avail DO INSERT INTO shoelace_log VALUES (new.sl_name, new.sl_avail, CURRENT_USER, CURRENT_TIMESTAMP);
CREATE RULE shoelace_ins AS ON INSERT TO shoelace DO INSTEAD INSERT INTO shoelace_data VALUES (new.sl_name, new.sl_avail, new.sl_color, new.sl_len, new.sl_unit);"
`;

exports[`kitchen sink select 1`] = `
"WITH regional_sales AS (SELECT region,
sum(amount) AS total_sales FROM orders GROUP BY region), top_regions AS (SELECT region FROM regional_sales WHERE total_sales > (SELECT sum(total_sales) / 10 FROM regional_sales)) SELECT region,
product,
sum(quantity) AS product_units,
sum(amount) AS product_sales FROM orders WHERE region IN (SELECT region FROM top_regions) GROUP BY region,
product;
WITH chars2bits AS (SELECT \\"character\\",
(index - 1)::bit(5)::text AS index FROM unnest('{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,2,3,4,5,6,7}'::text[]) WITH ORDINALITY AS t (\\"character\\", index)) SELECT string_agg(c.index, '') FROM regexp_split_to_table('abcde', '') AS s INNER JOIN chars2bits AS c ON s = c.\\"character\\";
SELECT \\"character\\",
(index - 1)::bit(5)::text AS index FROM unnest('{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,2,3,4,5,6,7}'::text[]) WITH ORDINALITY AS t (\\"character\\", index);"
`;

exports[`kitchen sink select 2`] = `
"WITH regional_sales AS (SELECT region,
sum(amount) AS total_sales FROM orders GROUP BY region), top_regions AS (SELECT region FROM regional_sales WHERE total_sales > (SELECT sum(total_sales) / 10 FROM regional_sales)) SELECT region,
product,
sum(quantity) AS product_units,
sum(amount) AS product_sales FROM orders WHERE region IN (SELECT region FROM top_regions) GROUP BY region,
product;
WITH chars2bits AS (SELECT character,
(index - 1)::bit(5)::text AS index FROM unnest('{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,2,3,4,5,6,7}'::text[]) WITH ORDINALITY AS t(character, index)) SELECT string_agg(c.index, '') FROM regexp_split_to_table('abcde', '') AS s INNER JOIN chars2bits AS c ON s = c.character;
SELECT character,
(index - 1)::bit(5)::text AS index FROM unnest('{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,2,3,4,5,6,7}'::text[]) WITH ORDINALITY AS t(character, index);"
`;

exports[`kitchen sink sequences 1`] = `
"CREATE SEQUENCE foo.bar;
CREATE SEQUENCE mysequence increment 5 START WITH 100;
CREATE SEQUENCE three increment -1 minvalue 1 maxvalue 3 START WITH 3 CYCLE;
CREATE SEQUENCE three3 increment -1 minvalue 1 maxvalue 3 START WITH 3 NO CYCLE;
CREATE SEQUENCE app_jobs.jobs_id_seq START WITH 1 increment 1 NO MINVALUE NO MAXVALUE cache 1;"
`;

exports[`kitchen sink sequences 2`] = `
"CREATE SEQUENCE foo.bar;
CREATE SEQUENCE mysequence increment 5 START WITH 100;
CREATE SEQUENCE three increment -1 minvalue 1 maxvalue 3 START WITH 3 CYCLE;
CREATE SEQUENCE three3 increment -1 minvalue 1 maxvalue 3 START WITH 3 NO CYCLE;
CREATE SEQUENCE app_jobs.jobs_id_seq START WITH 1 increment 1 NO MINVALUE NO MAXVALUE cache 1;"
`;

exports[`kitchen sink sequences 3`] = `
"ALTER SEQUENCE public.\\"User_id_seq\\" OWNED BY public.\\"User\\".id;
ALTER SEQUENCE serial RESTART WITH 105;
ALTER SEQUENCE payments_id_seq RESTART WITH 22;
ALTER SEQUENCE payments_id_seq START WITH 22;
ALTER SEQUENCE payments_id_seq RESTART;"
`;

exports[`kitchen sink sequences 4`] = `
"ALTER SEQUENCE public.\\"User_id_seq\\" OWNED BY public.\\"User\\".id;
ALTER SEQUENCE serial RESTART WITH 105;
ALTER SEQUENCE payments_id_seq RESTART WITH 22;
ALTER SEQUENCE payments_id_seq START WITH 22;
ALTER SEQUENCE payments_id_seq RESTART;"
`;

exports[`kitchen sink set 1`] = `
"SET var FROM CURRENT;
RESET client_min_messages;
SET search_path = 'alt_nsp1', 'public';
SET session_authorization = 'regtest_alter_user1';
SET client_encoding = 'UNICODE';
SET client_encoding = 'UNICODE';
SET client_min_messages = 'notice';
RESET session_authorization;"
`;

exports[`kitchen sink set 2`] = `
"SET var FROM CURRENT;
RESET client_min_messages;
SET search_path = 'alt_nsp1', 'public';
SET session_authorization = 'regtest_alter_user1';
SET client_encoding = 'UNICODE';
SET client_encoding = 'UNICODE';
SET client_min_messages = 'notice';
RESET session_authorization;"
`;

exports[`kitchen sink tables check 1`] = `
"CREATE TABLE products (
product_no int,
name text,
price numeric CHECK (price > 0)
);
CREATE TABLE products (
product_no int,
name text,
price numeric CONSTRAINT positive_price CHECK (price > 0)
);
CREATE TABLE products (
product_no int,
name text,
price numeric CHECK (price > 0),
discounted_price numeric CHECK (discounted_price > 0),
CHECK (price > discounted_price)
);
CREATE TABLE products (
product_no int,
name text,
price numeric CHECK (price > 0),
discounted_price numeric CONSTRAINT check_price CHECK (discounted_price > 0),
CHECK (price > discounted_price)
);
CREATE TABLE boomin (
d date,
CHECK (FALSE) NO INHERIT NOT VALID
);
CREATE TABLE boomin (
d date,
CHECK (TRUE) NO INHERIT NOT VALID
);
ALTER TABLE checkitout ADD CHECK (d BETWEEN '2010-01-01'::date AND '2010-12-31'::date) NOT VALID;
ALTER TABLE checkitout2 ADD CHECK (d NOT BETWEEN '2010-01-01'::date AND '2010-12-31'::date) NOT VALID;
CREATE TABLE atacc3 (
test3 int
) INHERITS (atacc1, atacc2);"
`;

exports[`kitchen sink tables check 2`] = `
"CREATE TABLE products (
product_no int,
name text,
price numeric CHECK ( price > 0 )
);
CREATE TABLE products (
product_no int,
name text,
price numeric CONSTRAINT positive_price CHECK ( price > 0 )
);
CREATE TABLE products (
product_no int,
name text,
price numeric CHECK ( price > 0 ),
discounted_price numeric CHECK ( discounted_price > 0 ),
CHECK ( price > discounted_price )
);
CREATE TABLE products (
product_no int,
name text,
price numeric CHECK ( price > 0 ),
discounted_price numeric CONSTRAINT check_price CHECK ( discounted_price > 0 ),
CHECK ( price > discounted_price )
);
CREATE TABLE boomin (
d date,
CHECK ( FALSE ) NO INHERIT NOT VALID
);
CREATE TABLE boomin (
d date,
CHECK ( TRUE ) NO INHERIT NOT VALID
);
ALTER TABLE checkitout ADD CHECK ( d BETWEEN '2010-01-01'::date AND '2010-12-31'::date ) NOT VALID;
ALTER TABLE checkitout2 ADD CHECK ( d NOT BETWEEN '2010-01-01'::date AND '2010-12-31'::date ) NOT VALID;
CREATE TABLE atacc3 (
test3 int
) INHERITS ( atacc1, atacc2 );"
`;

exports[`kitchen sink tables custom 1`] = `
"ALTER TABLE myschema.role ADD CONSTRAINT fk_myschema_role_actor_id FOREIGN KEY (actor_id) REFERENCES actors.actor (id) ON DELETE CASCADE ;
CREATE TABLE circles (
c circle,
EXCLUDE USING gist ( c WITH && )
);
CREATE TABLE actors_private.actor_info (
actor_id uuid PRIMARY KEY REFERENCES actors.actor (id) ON DELETE CASCADE ,
email text NOT NULL UNIQUE CHECK (email ~* '^.+@.+\\\\..+$'),
password_hash text NOT NULL
);
CREATE TABLE foo (
a int,
b int,
PRIMARY KEY (a, b)
);
CREATE TABLE t_full (
a int,
b int,
FOREIGN KEY (a, b) REFERENCES foo   MATCH FULL
);
CREATE TABLE t_simple (
a int,
b int,
FOREIGN KEY (a, b) REFERENCES foo
);
CREATE TABLE people (
color_id int GENERATED ALWAYS AS IDENTITY (START WITH 17 INCREMENT BY 21),
height_cm numeric,
height_in numeric GENERATED ALWAYS AS (height_cm / 2.54) STORED,
gen_def_identity numeric GENERATED BY DEFAULT AS IDENTITY,
gen_alw_identity numeric GENERATED ALWAYS AS IDENTITY
);"
`;

exports[`kitchen sink tables custom 2`] = `
"ALTER TABLE myschema.role ADD CONSTRAINT fk_myschema_role_actor_id FOREIGN KEY ( actor_id ) REFERENCES actors.actor ( id ) ON DELETE CASCADE;
CREATE TABLE circles (
c circle,
EXCLUDE USING gist ( c WITH && )
);
CREATE TABLE actors_private.actor_info (
actor_id uuid PRIMARY KEY REFERENCES actors.actor ( id ) ON DELETE CASCADE,
email text NOT NULL UNIQUE CHECK ( email ~* '^.+@.+\\\\..+$' ),
password_hash text NOT NULL
);
CREATE TABLE foo (
a int,
b int,
PRIMARY KEY ( a, b )
);
CREATE TABLE t_full (
a int,
b int,
FOREIGN KEY ( a, b ) REFERENCES foo MATCH FULL
);
CREATE TABLE t_simple (
a int,
b int,
FOREIGN KEY ( a, b ) REFERENCES foo
);
CREATE TABLE people (
color_id int GENERATED ALWAYS AS IDENTITY ( START WITH 17 INCREMENT BY 21 ),
height_cm numeric,
height_in numeric GENERATED ALWAYS AS ( height_cm / 2.54 ) STORED,
gen_def_identity numeric GENERATED BY DEFAULT AS IDENTITY,
gen_alw_identity numeric GENERATED ALWAYS AS IDENTITY
);"
`;

exports[`kitchen sink tables defaults 1`] = `
"CREATE TABLE customer_product_categories (
id serial PRIMARY KEY,
name text NOT NULL,
effective tstzrange DEFAULT ('[-infinity,infinity]')
)"
`;

exports[`kitchen sink tables defaults 2`] = `
"CREATE TABLE customer_product_categories (
id serial PRIMARY KEY,
name text NOT NULL,
effective tstzrange DEFAULT ( '[-infinity,infinity]' )
)"
`;

exports[`kitchen sink tables exclude 1`] = `
"CREATE TABLE circles (
c circle,
EXCLUDE USING gist ( c WITH && )
);
CREATE TABLE customer_product_categories (
id serial PRIMARY KEY,
name text NOT NULL,
effective tstzrange DEFAULT ('[-infinity,infinity]'),
EXCLUDE USING gist ( lower(name) WITH =, effective WITH && )
)"
`;

exports[`kitchen sink tables exclude 2`] = `
"CREATE TABLE circles (
c circle,
EXCLUDE USING gist ( c WITH && )
);
CREATE TABLE customer_product_categories (
id serial PRIMARY KEY,
name text NOT NULL,
effective tstzrange DEFAULT ( '[-infinity,infinity]' ),
EXCLUDE USING gist ( lower(name) WITH =, effective WITH && )
)"
`;

exports[`kitchen sink tables foreign 1`] = `
"CREATE TABLE orders (
order_id int PRIMARY KEY,
product_no int REFERENCES products (product_no)  ,
quantity int
);
CREATE TABLE orders (
order_id int PRIMARY KEY,
product_no int REFERENCES products  ,
quantity int
);
CREATE TABLE t1 (
a int PRIMARY KEY,
b int,
c int,
FOREIGN KEY (b, c) REFERENCES other_table (c1, c2)
);
CREATE TABLE products (
product_no int PRIMARY KEY,
name text,
price numeric
);
CREATE TABLE orders (
order_id int PRIMARY KEY,
shipping_address text
);
CREATE TABLE order_items (
product_no int REFERENCES products  ,
order_id int REFERENCES orders  ,
quantity int,
PRIMARY KEY (product_no, order_id)
);"
`;

exports[`kitchen sink tables foreign 2`] = `
"CREATE TABLE orders (
order_id int PRIMARY KEY,
product_no int REFERENCES products ( product_no ),
quantity int
);
CREATE TABLE orders (
order_id int PRIMARY KEY,
product_no int REFERENCES products,
quantity int
);
CREATE TABLE t1 (
a int PRIMARY KEY,
b int,
c int,
FOREIGN KEY ( b, c ) REFERENCES other_table ( c1, c2 )
);
CREATE TABLE products (
product_no int PRIMARY KEY,
name text,
price numeric
);
CREATE TABLE orders (
order_id int PRIMARY KEY,
shipping_address text
);
CREATE TABLE order_items (
product_no int REFERENCES products,
order_id int REFERENCES orders,
quantity int,
PRIMARY KEY ( product_no, order_id )
);"
`;

exports[`kitchen sink tables match 1`] = `
"DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS post_type CASCADE;
CREATE TABLE post_type (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS assembly_seat CASCADE;
CREATE TABLE assembly_seat (
id int NOT NULL PRIMARY KEY
);"
`;

exports[`kitchen sink tables match 2`] = `
"DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS post_type CASCADE;
CREATE TABLE post_type (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS assembly_seat CASCADE;
CREATE TABLE assembly_seat (
id int NOT NULL PRIMARY KEY
);"
`;

exports[`kitchen sink tables nulls 1`] = `
"CREATE TABLE products (
product_no int NOT NULL,
name text NOT NULL,
price numeric
);
CREATE TABLE products (
product_no int NULL,
name text NULL,
price numeric NULL
);
CREATE TABLE products (
product_no int NOT NULL,
name text NOT NULL,
price numeric NOT NULL CHECK (price > 0)
);"
`;

exports[`kitchen sink tables nulls 2`] = `
"CREATE TABLE products (
product_no int NOT NULL,
name text NOT NULL,
price numeric
);
CREATE TABLE products (
product_no int NULL,
name text NULL,
price numeric NULL
);
CREATE TABLE products (
product_no int NOT NULL,
name text NOT NULL,
price numeric NOT NULL CHECK ( price > 0 )
);"
`;

exports[`kitchen sink tables on_delete 1`] = `
"CREATE TABLE order_items (
product_no int REFERENCES products ON DELETE RESTRICT ,
order_id int REFERENCES orders ON DELETE CASCADE ,
quantity int,
PRIMARY KEY (product_no, order_id)
);"
`;

exports[`kitchen sink tables on_delete 2`] = `
"CREATE TABLE order_items (
product_no int REFERENCES products ON DELETE RESTRICT,
order_id int REFERENCES orders ON DELETE CASCADE,
quantity int,
PRIMARY KEY ( product_no, order_id )
);"
`;

exports[`kitchen sink tables on_update 1`] = `
"CREATE TABLE order_items (
product_no int REFERENCES products  ON UPDATE RESTRICT,
order_id int REFERENCES orders  ON UPDATE CASCADE,
quantity int,
PRIMARY KEY (product_no, order_id)
);"
`;

exports[`kitchen sink tables on_update 2`] = `
"CREATE TABLE order_items (
product_no int REFERENCES products ON UPDATE RESTRICT,
order_id int REFERENCES orders ON UPDATE CASCADE,
quantity int,
PRIMARY KEY ( product_no, order_id )
);"
`;

exports[`kitchen sink tables temp 1`] = `
"DROP TABLE IF EXISTS users CASCADE;
CREATE TEMPORARY TABLE users (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS post_type CASCADE;
CREATE TEMPORARY TABLE post_type (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS assembly_seat CASCADE;
CREATE TEMPORARY TABLE assembly_seat (
id int NOT NULL PRIMARY KEY
);"
`;

exports[`kitchen sink tables temp 2`] = `
"DROP TABLE IF EXISTS users CASCADE;
CREATE TEMPORARY TABLE users (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS post_type CASCADE;
CREATE TEMPORARY TABLE post_type (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS assembly_seat CASCADE;
CREATE TEMPORARY TABLE assembly_seat (
id int NOT NULL PRIMARY KEY
);"
`;

exports[`kitchen sink tables unique 1`] = `
"CREATE TABLE products (
product_no int UNIQUE,
name text,
price numeric
);
CREATE TABLE products (
product_no int,
name text,
price numeric,
UNIQUE (product_no)
);
CREATE TABLE example (
a int,
b int,
c int,
UNIQUE (a, c)
);
CREATE TABLE products (
product_no int CONSTRAINT must_be_different UNIQUE,
name text,
price numeric
);"
`;

exports[`kitchen sink tables unique 2`] = `
"CREATE TABLE products (
product_no int UNIQUE,
name text,
price numeric
);
CREATE TABLE products (
product_no int,
name text,
price numeric,
UNIQUE ( product_no )
);
CREATE TABLE example (
a int,
b int,
c int,
UNIQUE ( a, c )
);
CREATE TABLE products (
product_no int CONSTRAINT must_be_different UNIQUE,
name text,
price numeric
);"
`;

exports[`kitchen sink transactions begin_commit 1`] = `
"BEGIN;
CREATE TABLE products (
product_no int,
name text
);
COMMIT;"
`;

exports[`kitchen sink transactions begin_commit 2`] = `
"BEGIN;
CREATE TABLE products (
product_no int,
name text
);
COMMIT;"
`;

exports[`kitchen sink triggers create 1`] = `
"CREATE TRIGGER _100_timestamps
BEFORE INSERT OR UPDATE ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs.update_timestamps ( );
CREATE TRIGGER _500_increase_job_queue_count
AFTER INSERT ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs.jobs__increase_job_queue_count ( );
CREATE TRIGGER _500_decrease_job_queue_count
BEFORE DELETE ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs.jobs__decrease_job_queue_count ( );
CREATE TRIGGER _900_notify_worker
AFTER INSERT ON app_jobs.jobs
FOR EACH STATEMENT
EXECUTE PROCEDURE app_jobs.do_notify ( 'jobs:insert' );
CREATE TRIGGER check_update
BEFORE UPDATE OF balance ON accounts
FOR EACH ROW
EXECUTE PROCEDURE check_account_update ( );
CREATE TRIGGER check_update
BEFORE UPDATE ON accounts
FOR EACH ROW
EXECUTE PROCEDURE check_account_update ( );
CREATE TRIGGER check_update
BEFORE UPDATE ON accounts
FOR EACH ROW
WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
EXECUTE PROCEDURE check_account_update ( );
CREATE TRIGGER log_update
AFTER UPDATE ON accounts
FOR EACH ROW
WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE PROCEDURE log_account_update ( );
CREATE TRIGGER view_insert
INSTEAD OF INSERT ON my_view
FOR EACH ROW
EXECUTE PROCEDURE view_insert_row ( );
CREATE TRIGGER transfer_insert
AFTER INSERT ON transfer
REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT
EXECUTE PROCEDURE check_transfer_balances_to_zero ( );
CREATE TRIGGER paired_items_update
AFTER UPDATE ON paired_items
REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab FOR EACH ROW
EXECUTE PROCEDURE check_matching_pairs ( );
CREATE TRIGGER paired_items_update
AFTER UPDATE ON paired_items
REFERENCING OLD TABLE AS oldtab NEW TABLE AS newtab FOR EACH ROW
EXECUTE PROCEDURE check_matching_pairs ( );"
`;

exports[`kitchen sink triggers create 2`] = `
"CREATE TRIGGER _100_timestamps
BEFORE INSERT OR UPDATE ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs. update_timestamps (  );
CREATE TRIGGER _500_increase_job_queue_count
AFTER INSERT ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs. jobs__increase_job_queue_count (  );
CREATE TRIGGER _500_decrease_job_queue_count
BEFORE DELETE ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs. jobs__decrease_job_queue_count (  );
CREATE TRIGGER _900_notify_worker
AFTER INSERT ON app_jobs.jobs
FOR EACH STATEMENT
EXECUTE PROCEDURE app_jobs. do_notify ( 'jobs:insert' );
CREATE TRIGGER check_update
BEFORE UPDATE OF balance ON accounts
FOR EACH ROW
EXECUTE PROCEDURE check_account_update (  );
CREATE TRIGGER check_update
BEFORE UPDATE ON accounts
FOR EACH ROW
EXECUTE PROCEDURE check_account_update (  );
CREATE TRIGGER check_update
BEFORE UPDATE ON accounts
FOR EACH ROW
WHEN ( OLD.balance IS DISTINCT FROM NEW.balance )
EXECUTE PROCEDURE check_account_update (  );
CREATE TRIGGER log_update
AFTER UPDATE ON accounts
FOR EACH ROW
WHEN ( OLD.* IS DISTINCT FROM NEW.* )
EXECUTE PROCEDURE log_account_update (  );
CREATE TRIGGER view_insert
INSTEAD OF INSERT ON my_view
FOR EACH ROW
EXECUTE PROCEDURE view_insert_row (  );
CREATE TRIGGER transfer_insert
AFTER INSERT ON transfer
REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT
EXECUTE PROCEDURE check_transfer_balances_to_zero (  );
CREATE TRIGGER paired_items_update
AFTER UPDATE ON paired_items
REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab FOR EACH ROW
EXECUTE PROCEDURE check_matching_pairs (  );
CREATE TRIGGER paired_items_update
AFTER UPDATE ON paired_items
REFERENCING OLD TABLE AS oldtab NEW TABLE AS newtab FOR EACH ROW
EXECUTE PROCEDURE check_matching_pairs (  );"
`;

exports[`kitchen sink triggers custom 1`] = `
"DROP SCHEMA IF EXISTS fb;
DROP SCHEMA IF EXISTS fb CASCADE;
CREATE SCHEMA fb;
SET search_path = 'fb', '$user', 'public';
CREATE EXTENSION \\"uuid-ossp\\";
CREATE TABLE \\"user\\" (
id uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
created timestamptz NOT NULL DEFAULT (now()),
full_name text NOT NULL DEFAULT ('')
);
CREATE TABLE post (
id uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
created timestamptz NOT NULL DEFAULT (now()),
content text NOT NULL DEFAULT (''),
\\"user\\" uuid REFERENCES \\"user\\"   NOT NULL
);
CREATE TABLE friendship (
first uuid REFERENCES \\"user\\"   NOT NULL,
second uuid REFERENCES \\"user\\"   NOT NULL,
created timestamptz NOT NULL DEFAULT (now()),
UNIQUE (first, second)
);
CREATE FUNCTION check_friendship_symmetry ( ) RETURNS TRIGGER AS $LQLCODEZ$
DECLARE
link friendship;
BEGIN
SELECT * INTO link FROM friendship
WHERE second = NEW.first AND first = NEW.second;
IF NOT FOUND THEN
RAISE EXCEPTION 'Friendships must be INSERTed as pairs.';
END IF;
RETURN NEW;
END
$LQLCODEZ$ LANGUAGE plpgsql SET search_path FROM CURRENT;
CREATE CONSTRAINT TRIGGER friendship_symmetry
AFTER INSERT ON friendship
DEFERRABLE INITIALLY DEFERRED FOR EACH ROW
EXECUTE PROCEDURE check_friendship_symmetry ( );
CREATE TRIGGER _500_increase_job_queue_count_update
AFTER UPDATE OF queue_name ON app.jobs
FOR EACH ROW
EXECUTE PROCEDURE app.jobs__increase_job_queue_count ( );"
`;

exports[`kitchen sink triggers custom 2`] = `
"DROP SCHEMA IF EXISTS fb;
DROP SCHEMA IF EXISTS fb CASCADE;
CREATE SCHEMA fb;
SET search_path = 'fb', '$user', 'public';
CREATE EXTENSION \\"uuid-ossp\\";
CREATE TABLE \\"user\\" (
id uuid PRIMARY KEY DEFAULT ( uuid_generate_v4() ),
created timestamptz NOT NULL DEFAULT ( now() ),
full_name text NOT NULL DEFAULT ( '' )
);
CREATE TABLE post (
id uuid PRIMARY KEY DEFAULT ( uuid_generate_v4() ),
created timestamptz NOT NULL DEFAULT ( now() ),
content text NOT NULL DEFAULT ( '' ),
\\"user\\" uuid REFERENCES \\"user\\" NOT NULL
);
CREATE TABLE friendship (
first uuid REFERENCES \\"user\\" NOT NULL,
second uuid REFERENCES \\"user\\" NOT NULL,
created timestamptz NOT NULL DEFAULT ( now() ),
UNIQUE ( first, second )
);
CREATE FUNCTION check_friendship_symmetry (  ) RETURNS trigger AS $EOFCODE$DECLARE
link friendship;
BEGIN
SELECT * INTO link FROM friendship
WHERE second = NEW.first AND first = NEW.second;
IF NOT FOUND THEN
RAISE EXCEPTION 'Friendships must be INSERTed as pairs.';
END IF;
RETURN NEW;
END$EOFCODE$ LANGUAGE plpgsql SET search_path FROM CURRENT;
CREATE CONSTRAINT TRIGGER friendship_symmetry
AFTER INSERT ON friendship
DEFERRABLE INITIALLY DEFERRED
FOR EACH ROW
EXECUTE PROCEDURE check_friendship_symmetry (  );
CREATE TRIGGER _500_increase_job_queue_count_update
AFTER UPDATE OF queue_name ON app.jobs
FOR EACH ROW
EXECUTE PROCEDURE app. jobs__increase_job_queue_count (  );"
`;

exports[`kitchen sink types 1`] = `"CREATE TYPE myschema.mycustomtype AS (id uuid,verify_code text,verify_code_expires_on timestamptz,actor_id uuid);"`;

exports[`kitchen sink types 2`] = `
"CREATE TYPE myschema.mycustomtype AS ( 	id uuid,
verify_code text,
verify_code_expires_on timestamptz,
actor_id uuid );"
`;

exports[`kitchen sink update 1`] = `
"UPDATE update_test SET c = repeat('x', 10000) WHERE c = 'car';
UPDATE update_test SET (b, a) = (SELECT a + 1,
b FROM update_test WHERE a = 1000) WHERE a = 11;
UPDATE something SET (b, a) = (1, 2) WHERE a = 11;
UPDATE update_test SET (c, b, a) = ('bugle', b + 11, DEFAULT) WHERE c = 'foo';
UPDATE shoelace_data SET sl_name = new.sl_name, sl_avail = new.sl_avail, sl_color = new.sl_color, sl_len = new.sl_len, sl_unit = new.sl_unit WHERE sl_name = old.sl_name;
UPDATE something SET a = 1 RETURNING a;
UPDATE something SET a = 1 RETURNING a AS b, c;
UPDATE something SET a = 1 FROM b;
UPDATE something SET a = 1, b = 'b' FROM c INNER JOIN d ON x = d.y, (SELECT * FROM e) AS f WHERE something.x = d.x AND LEAST(something.y, 0) = (f.z + 1);
UPDATE something SET a = 1 RETURNING b AS \\"b#1\\";
UPDATE something SET a = 1 FROM b WHERE c RETURNING *;
UPDATE foo SET f2 = lower(f2), f3 = DEFAULT RETURNING foo.*, f1 + f3 AS sum13;"
`;

exports[`kitchen sink update 2`] = `
"UPDATE update_test SET c = repeat('x', 10000) WHERE c = 'car';
UPDATE update_test SET ( b,a ) = (SELECT a + 1,
b FROM update_test WHERE a = 1000) WHERE a = 11;
UPDATE something SET ( b,a ) = (1, 2) WHERE a = 11;
UPDATE update_test SET ( c,b,a ) = ('bugle', b + 11, DEFAULT) WHERE c = 'foo';
UPDATE shoelace_data SET sl_name = new.sl_name,sl_avail = new.sl_avail,sl_color = new.sl_color,sl_len = new.sl_len,sl_unit = new.sl_unit WHERE sl_name = old.sl_name;
UPDATE something SET a = 1 RETURNING a;
UPDATE something SET a = 1 RETURNING a AS b,c;
UPDATE something SET a = 1 FROM b;
UPDATE something SET a = 1,b = 'b' FROM c INNER JOIN d ON x = d.y, (SELECT * FROM e) AS f WHERE something.x = d.x AND LEAST(something.y, 0) = (f.z + 1);
UPDATE something SET a = 1 RETURNING b AS \\"b#1\\";
UPDATE something SET a = 1 FROM b WHERE c RETURNING *;
UPDATE foo SET f2 = lower(f2),f3 = DEFAULT RETURNING foo.*,f1 + f3 AS sum13;"
`;

exports[`kitchen sink upstream upstream/abstime.sql 1`] = `
"CREATE TABLE abstime_tbl (
f1 abstime
);
BEGIN;
INSERT INTO abstime_tbl (f1) VALUES ('now'::abstime);
INSERT INTO abstime_tbl (f1) VALUES ('now'::abstime);
SELECT count(*) AS two FROM abstime_tbl WHERE f1 = 'now';
COMMIT;
DELETE FROM abstime_tbl;
INSERT INTO abstime_tbl (f1) VALUES ('Jan 14, 1973 03:14:21');
INSERT INTO abstime_tbl (f1) VALUES ('Mon May  1 00:30:30 1995'::abstime);
INSERT INTO abstime_tbl (f1) VALUES ('epoch'::abstime);
INSERT INTO abstime_tbl (f1) VALUES ('infinity'::abstime);
INSERT INTO abstime_tbl (f1) VALUES ('-infinity'::abstime);
INSERT INTO abstime_tbl (f1) VALUES ('May 10, 1947 23:59:12'::abstime);
INSERT INTO abstime_tbl (f1) VALUES ('Feb 35, 1946 10:00:00');
INSERT INTO abstime_tbl (f1) VALUES ('Feb 28, 1984 25:08:10');
INSERT INTO abstime_tbl (f1) VALUES ('bad date format');
INSERT INTO abstime_tbl (f1) VALUES ('Jun 10, 1843');
SELECT '' AS eight,
* FROM abstime_tbl;
SELECT '' AS six,
* FROM abstime_tbl WHERE abstime_tbl.f1 < 'Jun 30, 2001'::abstime;
SELECT '' AS six,
* FROM abstime_tbl WHERE abstime_tbl.f1 > '-infinity'::abstime;
SELECT '' AS six,
* FROM abstime_tbl WHERE 'May 10, 1947 23:59:12'::abstime <> abstime_tbl.f1;
SELECT '' AS three,
* FROM abstime_tbl WHERE 'epoch'::abstime >= abstime_tbl.f1;
SELECT '' AS four,
* FROM abstime_tbl WHERE abstime_tbl.f1 <= 'Jan 14, 1973 03:14:21'::abstime;
SELECT '' AS four,
f1 AS abstime,
date_part('year', f1) AS year,
date_part('month', f1) AS month,
date_part('day', f1) AS day,
date_part('hour', f1) AS hour,
date_part('minute', f1) AS minute,
date_part('second', f1) AS second FROM abstime_tbl WHERE isfinite(f1) ORDER BY abstime;"
`;

exports[`kitchen sink upstream upstream/abstime.sql 2`] = `
"CREATE TABLE abstime_tbl (
f1 abstime
);
BEGIN;
INSERT INTO abstime_tbl ( f1 ) VALUES ('now'::abstime);
INSERT INTO abstime_tbl ( f1 ) VALUES ('now'::abstime);
SELECT count(*) AS two FROM abstime_tbl WHERE f1 = 'now';
COMMIT;
DELETE FROM abstime_tbl;
INSERT INTO abstime_tbl ( f1 ) VALUES ('Jan 14, 1973 03:14:21');
INSERT INTO abstime_tbl ( f1 ) VALUES ('Mon May  1 00:30:30 1995'::abstime);
INSERT INTO abstime_tbl ( f1 ) VALUES ('epoch'::abstime);
INSERT INTO abstime_tbl ( f1 ) VALUES ('infinity'::abstime);
INSERT INTO abstime_tbl ( f1 ) VALUES ('-infinity'::abstime);
INSERT INTO abstime_tbl ( f1 ) VALUES ('May 10, 1947 23:59:12'::abstime);
INSERT INTO abstime_tbl ( f1 ) VALUES ('Feb 35, 1946 10:00:00');
INSERT INTO abstime_tbl ( f1 ) VALUES ('Feb 28, 1984 25:08:10');
INSERT INTO abstime_tbl ( f1 ) VALUES ('bad date format');
INSERT INTO abstime_tbl ( f1 ) VALUES ('Jun 10, 1843');
SELECT '' AS eight,
* FROM abstime_tbl;
SELECT '' AS six,
* FROM abstime_tbl WHERE abstime_tbl.f1 < 'Jun 30, 2001'::abstime;
SELECT '' AS six,
* FROM abstime_tbl WHERE abstime_tbl.f1 > '-infinity'::abstime;
SELECT '' AS six,
* FROM abstime_tbl WHERE 'May 10, 1947 23:59:12'::abstime <> abstime_tbl.f1;
SELECT '' AS three,
* FROM abstime_tbl WHERE 'epoch'::abstime >= abstime_tbl.f1;
SELECT '' AS four,
* FROM abstime_tbl WHERE abstime_tbl.f1 <= 'Jan 14, 1973 03:14:21'::abstime;
SELECT '' AS four,
f1 AS abstime,
date_part('year', f1) AS year,
date_part('month', f1) AS month,
date_part('day', f1) AS day,
date_part('hour', f1) AS hour,
date_part('minute', f1) AS minute,
date_part('second', f1) AS second FROM abstime_tbl WHERE isfinite(f1) ORDER BY abstime;"
`;

exports[`kitchen sink upstream upstream/advisory_lock.sql 1`] = `
"BEGIN;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock_all();
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
SELECT pg_advisory_unlock(1),
pg_advisory_unlock_shared(2),
pg_advisory_unlock(1, 1),
pg_advisory_unlock_shared(2, 2);
COMMIT;
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
BEGIN;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2);
ROLLBACK;
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock(1),
pg_advisory_unlock(1),
pg_advisory_unlock_shared(2),
pg_advisory_unlock_shared(2),
pg_advisory_unlock(1, 1),
pg_advisory_unlock(1, 1),
pg_advisory_unlock_shared(2, 2),
pg_advisory_unlock_shared(2, 2);
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
BEGIN;
SELECT pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2);
ROLLBACK;
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock_all();
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
BEGIN;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2),
pg_advisory_xact_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
COMMIT;
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
SELECT pg_advisory_lock(1),
pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2),
pg_advisory_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock(1),
pg_advisory_unlock(1),
pg_advisory_unlock_shared(2),
pg_advisory_unlock_shared(2),
pg_advisory_unlock(1, 1),
pg_advisory_unlock(1, 1),
pg_advisory_unlock_shared(2, 2),
pg_advisory_unlock_shared(2, 2);
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
SELECT pg_advisory_lock(1),
pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2),
pg_advisory_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock_all();
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';"
`;

exports[`kitchen sink upstream upstream/advisory_lock.sql 2`] = `
"BEGIN;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock_all();
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
SELECT pg_advisory_unlock(1),
pg_advisory_unlock_shared(2),
pg_advisory_unlock(1, 1),
pg_advisory_unlock_shared(2, 2);
COMMIT;
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
BEGIN;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2);
ROLLBACK;
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock(1),
pg_advisory_unlock(1),
pg_advisory_unlock_shared(2),
pg_advisory_unlock_shared(2),
pg_advisory_unlock(1, 1),
pg_advisory_unlock(1, 1),
pg_advisory_unlock_shared(2, 2),
pg_advisory_unlock_shared(2, 2);
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
BEGIN;
SELECT pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2);
ROLLBACK;
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock_all();
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
BEGIN;
SELECT pg_advisory_xact_lock(1),
pg_advisory_xact_lock(1),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock_shared(2),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock(1, 1),
pg_advisory_xact_lock_shared(2, 2),
pg_advisory_xact_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
COMMIT;
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
SELECT pg_advisory_lock(1),
pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2),
pg_advisory_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock(1),
pg_advisory_unlock(1),
pg_advisory_unlock_shared(2),
pg_advisory_unlock_shared(2),
pg_advisory_unlock(1, 1),
pg_advisory_unlock(1, 1),
pg_advisory_unlock_shared(2, 2),
pg_advisory_unlock_shared(2, 2);
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';
SELECT pg_advisory_lock(1),
pg_advisory_lock(1),
pg_advisory_lock_shared(2),
pg_advisory_lock_shared(2),
pg_advisory_lock(1, 1),
pg_advisory_lock(1, 1),
pg_advisory_lock_shared(2, 2),
pg_advisory_lock_shared(2, 2);
SELECT locktype,
classid,
objid,
objsubid,
mode,
granted FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid,
objid,
objsubid;
SELECT pg_advisory_unlock_all();
SELECT count(*) FROM pg_locks WHERE locktype = 'advisory';"
`;

exports[`kitchen sink upstream upstream/bitmapops.sql 1`] = `
"CREATE TABLE bmscantest (
a int,
b int,
t text
);
INSERT INTO bmscantest SELECT r % 53,
r % 59,
'foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo' FROM generate_series(1, 70000) AS r;
CREATE INDEX i_bmtest_a ON bmscantest (a);
CREATE INDEX i_bmtest_b ON bmscantest (b);
SET enable_indexscan = 'false';
SET enable_seqscan = 'false';
SET work_mem = 64;
SELECT count(*) FROM bmscantest WHERE a = 1 AND b = 1;
SELECT count(*) FROM bmscantest WHERE a = 1 OR b = 1;
DROP TABLE bmscantest;"
`;

exports[`kitchen sink upstream upstream/bitmapops.sql 2`] = `
"CREATE TABLE bmscantest (
a int,
b int,
t text
);
INSERT INTO bmscantest SELECT r % 53,
r % 59,
'foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo' FROM generate_series(1, 70000) AS r;
CREATE INDEX i_bmtest_a ON bmscantest ( a );
CREATE INDEX i_bmtest_b ON bmscantest ( b );
SET enable_indexscan = 'false';
SET enable_seqscan = 'false';
SET work_mem = 64;
SELECT count(*) FROM bmscantest WHERE a = 1 AND b = 1;
SELECT count(*) FROM bmscantest WHERE a = 1 OR b = 1;
DROP TABLE bmscantest;"
`;

exports[`kitchen sink upstream upstream/boolean.sql 1`] = `
"SELECT 1 AS one;
SELECT TRUE AS \\"true\\";
SELECT FALSE AS \\"false\\";
SELECT 't'::bool AS \\"true\\";
SELECT '   f           '::bool AS \\"false\\";
SELECT 'true'::bool AS \\"true\\";
SELECT 'test'::bool AS error;
SELECT 'false'::bool AS \\"false\\";
SELECT 'foo'::bool AS error;
SELECT 'y'::bool AS \\"true\\";
SELECT 'yes'::bool AS \\"true\\";
SELECT 'yeah'::bool AS error;
SELECT 'n'::bool AS \\"false\\";
SELECT 'no'::bool AS \\"false\\";
SELECT 'nay'::bool AS error;
SELECT 'on'::bool AS \\"true\\";
SELECT 'off'::bool AS \\"false\\";
SELECT 'of'::bool AS \\"false\\";
SELECT 'o'::bool AS error;
SELECT 'on_'::bool AS error;
SELECT 'off_'::bool AS error;
SELECT '1'::bool AS \\"true\\";
SELECT '11'::bool AS error;
SELECT '0'::bool AS \\"false\\";
SELECT '000'::bool AS error;
SELECT ''::bool AS error;
SELECT 't'::bool OR 'f'::bool AS \\"true\\";
SELECT 't'::bool AND 'f'::bool AS \\"false\\";
SELECT NOT ('f'::bool) AS \\"true\\";
SELECT 't'::bool = 'f'::bool AS \\"false\\";
SELECT 't'::bool <> 'f'::bool AS \\"true\\";
SELECT 't'::bool > 'f'::bool AS \\"true\\";
SELECT 't'::bool >= 'f'::bool AS \\"true\\";
SELECT 'f'::bool < 't'::bool AS \\"true\\";
SELECT 'f'::bool <= 't'::bool AS \\"true\\";
SELECT 'TrUe'::text::boolean AS \\"true\\",
'fAlse'::text::boolean AS \\"false\\";
SELECT '    true   '::text::boolean AS \\"true\\",
'     FALSE'::text::boolean AS \\"false\\";
SELECT TRUE::boolean::text AS \\"true\\",
FALSE::boolean::text AS \\"false\\";
SELECT '  tru e '::text::boolean AS invalid;
SELECT ''::text::boolean AS invalid;
CREATE TABLE booltbl1 (
f1 bool
);
INSERT INTO booltbl1 (f1) VALUES ('t'::bool);
INSERT INTO booltbl1 (f1) VALUES ('True'::bool);
INSERT INTO booltbl1 (f1) VALUES ('true'::bool);
SELECT '' AS t_3,
booltbl1.* FROM booltbl1;
SELECT '' AS t_3,
booltbl1.* FROM booltbl1 WHERE f1 = 'true'::bool;
SELECT '' AS t_3,
booltbl1.* FROM booltbl1 WHERE f1 <> 'false'::bool;
SELECT '' AS zero,
booltbl1.* FROM booltbl1 WHERE booleq('false'::bool, f1);
INSERT INTO booltbl1 (f1) VALUES ('f'::bool);
SELECT '' AS f_1,
booltbl1.* FROM booltbl1 WHERE f1 = 'false'::bool;
CREATE TABLE booltbl2 (
f1 bool
);
INSERT INTO booltbl2 (f1) VALUES ('f'::bool);
INSERT INTO booltbl2 (f1) VALUES ('false'::bool);
INSERT INTO booltbl2 (f1) VALUES ('False'::bool);
INSERT INTO booltbl2 (f1) VALUES ('FALSE'::bool);
INSERT INTO booltbl2 (f1) VALUES ('XXX'::bool);
SELECT '' AS f_4,
booltbl2.* FROM booltbl2;
SELECT '' AS tf_12,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE booltbl2.f1 <> booltbl1.f1;
SELECT '' AS tf_12,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE boolne(booltbl2.f1, booltbl1.f1);
SELECT '' AS ff_4,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE booltbl2.f1 = booltbl1.f1 AND booltbl1.f1 = 'false'::bool;
SELECT '' AS tf_12_ff_4,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE booltbl2.f1 = booltbl1.f1 OR booltbl1.f1 = 'true'::bool ORDER BY booltbl1.f1,
booltbl2.f1;
SELECT '' AS \\"True\\",
f1 FROM booltbl1 WHERE f1 IS TRUE;
SELECT '' AS \\"Not False\\",
f1 FROM booltbl1 WHERE f1 IS NOT FALSE;
SELECT '' AS \\"False\\",
f1 FROM booltbl1 WHERE f1 IS FALSE;
SELECT '' AS \\"Not True\\",
f1 FROM booltbl1 WHERE f1 IS NOT TRUE;
SELECT '' AS \\"True\\",
f1 FROM booltbl2 WHERE f1 IS TRUE;
SELECT '' AS \\"Not False\\",
f1 FROM booltbl2 WHERE f1 IS NOT FALSE;
SELECT '' AS \\"False\\",
f1 FROM booltbl2 WHERE f1 IS FALSE;
SELECT '' AS \\"Not True\\",
f1 FROM booltbl2 WHERE f1 IS NOT TRUE;
DROP TABLE booltbl1;
DROP TABLE booltbl2;"
`;

exports[`kitchen sink upstream upstream/boolean.sql 2`] = `
"SELECT 1 AS one;
SELECT TRUE AS \\"true\\";
SELECT FALSE AS \\"false\\";
SELECT 't'::bool AS \\"true\\";
SELECT '   f           '::bool AS \\"false\\";
SELECT 'true'::bool AS \\"true\\";
SELECT 'test'::bool AS error;
SELECT 'false'::bool AS \\"false\\";
SELECT 'foo'::bool AS error;
SELECT 'y'::bool AS \\"true\\";
SELECT 'yes'::bool AS \\"true\\";
SELECT 'yeah'::bool AS error;
SELECT 'n'::bool AS \\"false\\";
SELECT 'no'::bool AS \\"false\\";
SELECT 'nay'::bool AS error;
SELECT 'on'::bool AS \\"true\\";
SELECT 'off'::bool AS \\"false\\";
SELECT 'of'::bool AS \\"false\\";
SELECT 'o'::bool AS error;
SELECT 'on_'::bool AS error;
SELECT 'off_'::bool AS error;
SELECT '1'::bool AS \\"true\\";
SELECT '11'::bool AS error;
SELECT '0'::bool AS \\"false\\";
SELECT '000'::bool AS error;
SELECT ''::bool AS error;
SELECT 't'::bool OR 'f'::bool AS \\"true\\";
SELECT 't'::bool AND 'f'::bool AS \\"false\\";
SELECT NOT ('f'::bool) AS \\"true\\";
SELECT 't'::bool = 'f'::bool AS \\"false\\";
SELECT 't'::bool <> 'f'::bool AS \\"true\\";
SELECT 't'::bool > 'f'::bool AS \\"true\\";
SELECT 't'::bool >= 'f'::bool AS \\"true\\";
SELECT 'f'::bool < 't'::bool AS \\"true\\";
SELECT 'f'::bool <= 't'::bool AS \\"true\\";
SELECT 'TrUe'::text::boolean AS \\"true\\",
'fAlse'::text::boolean AS \\"false\\";
SELECT '    true   '::text::boolean AS \\"true\\",
'     FALSE'::text::boolean AS \\"false\\";
SELECT TRUE::boolean::text AS \\"true\\",
FALSE::boolean::text AS \\"false\\";
SELECT '  tru e '::text::boolean AS invalid;
SELECT ''::text::boolean AS invalid;
CREATE TABLE booltbl1 (
f1 bool
);
INSERT INTO booltbl1 ( f1 ) VALUES ('t'::bool);
INSERT INTO booltbl1 ( f1 ) VALUES ('True'::bool);
INSERT INTO booltbl1 ( f1 ) VALUES ('true'::bool);
SELECT '' AS t_3,
booltbl1.* FROM booltbl1;
SELECT '' AS t_3,
booltbl1.* FROM booltbl1 WHERE f1 = 'true'::bool;
SELECT '' AS t_3,
booltbl1.* FROM booltbl1 WHERE f1 <> 'false'::bool;
SELECT '' AS zero,
booltbl1.* FROM booltbl1 WHERE booleq('false'::bool, f1);
INSERT INTO booltbl1 ( f1 ) VALUES ('f'::bool);
SELECT '' AS f_1,
booltbl1.* FROM booltbl1 WHERE f1 = 'false'::bool;
CREATE TABLE booltbl2 (
f1 bool
);
INSERT INTO booltbl2 ( f1 ) VALUES ('f'::bool);
INSERT INTO booltbl2 ( f1 ) VALUES ('false'::bool);
INSERT INTO booltbl2 ( f1 ) VALUES ('False'::bool);
INSERT INTO booltbl2 ( f1 ) VALUES ('FALSE'::bool);
INSERT INTO booltbl2 ( f1 ) VALUES ('XXX'::bool);
SELECT '' AS f_4,
booltbl2.* FROM booltbl2;
SELECT '' AS tf_12,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE booltbl2.f1 <> booltbl1.f1;
SELECT '' AS tf_12,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE boolne(booltbl2.f1, booltbl1.f1);
SELECT '' AS ff_4,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE booltbl2.f1 = booltbl1.f1 AND booltbl1.f1 = 'false'::bool;
SELECT '' AS tf_12_ff_4,
booltbl1.*,
booltbl2.* FROM booltbl1,
booltbl2 WHERE booltbl2.f1 = booltbl1.f1 OR booltbl1.f1 = 'true'::bool ORDER BY booltbl1.f1,
booltbl2.f1;
SELECT '' AS \\"True\\",
f1 FROM booltbl1 WHERE f1 IS TRUE;
SELECT '' AS \\"Not False\\",
f1 FROM booltbl1 WHERE f1 IS NOT FALSE;
SELECT '' AS \\"False\\",
f1 FROM booltbl1 WHERE f1 IS FALSE;
SELECT '' AS \\"Not True\\",
f1 FROM booltbl1 WHERE f1 IS NOT TRUE;
SELECT '' AS \\"True\\",
f1 FROM booltbl2 WHERE f1 IS TRUE;
SELECT '' AS \\"Not False\\",
f1 FROM booltbl2 WHERE f1 IS NOT FALSE;
SELECT '' AS \\"False\\",
f1 FROM booltbl2 WHERE f1 IS FALSE;
SELECT '' AS \\"Not True\\",
f1 FROM booltbl2 WHERE f1 IS NOT TRUE;
DROP TABLE booltbl1;
DROP TABLE booltbl2;"
`;

exports[`kitchen sink upstream upstream/char.sql 1`] = `
"SELECT 'c'::pg_catalog.bpchar = 'c'::pg_catalog.bpchar AS \\"true\\";
CREATE TABLE char_tbl (
f1 char(1)
);
INSERT INTO char_tbl (f1) VALUES ('a');
INSERT INTO char_tbl (f1) VALUES ('A');
INSERT INTO char_tbl (f1) VALUES ('1');
INSERT INTO char_tbl (f1) VALUES (2);
INSERT INTO char_tbl (f1) VALUES ('3');
INSERT INTO char_tbl (f1) VALUES ('');
INSERT INTO char_tbl (f1) VALUES ('cd');
INSERT INTO char_tbl (f1) VALUES ('c     ');
SELECT '' AS seven,
* FROM char_tbl;
SELECT '' AS six,
c.* FROM char_tbl AS c WHERE c.f1 <> 'a';
SELECT '' AS one,
c.* FROM char_tbl AS c WHERE c.f1 = 'a';
SELECT '' AS five,
c.* FROM char_tbl AS c WHERE c.f1 < 'a';
SELECT '' AS six,
c.* FROM char_tbl AS c WHERE c.f1 <= 'a';
SELECT '' AS one,
c.* FROM char_tbl AS c WHERE c.f1 > 'a';
SELECT '' AS two,
c.* FROM char_tbl AS c WHERE c.f1 >= 'a';
DROP TABLE char_tbl;
CREATE TABLE char_tbl (
f1 char(4)
);
INSERT INTO char_tbl (f1) VALUES ('a');
INSERT INTO char_tbl (f1) VALUES ('ab');
INSERT INTO char_tbl (f1) VALUES ('abcd');
INSERT INTO char_tbl (f1) VALUES ('abcde');
INSERT INTO char_tbl (f1) VALUES ('abcd    ');
SELECT '' AS four,
* FROM char_tbl;"
`;

exports[`kitchen sink upstream upstream/char.sql 2`] = `
"SELECT 'c'::pg_catalog.bpchar = 'c'::pg_catalog.bpchar AS \\"true\\";
CREATE TABLE char_tbl (
f1 char(1)
);
INSERT INTO char_tbl ( f1 ) VALUES ('a');
INSERT INTO char_tbl ( f1 ) VALUES ('A');
INSERT INTO char_tbl ( f1 ) VALUES ('1');
INSERT INTO char_tbl ( f1 ) VALUES (2);
INSERT INTO char_tbl ( f1 ) VALUES ('3');
INSERT INTO char_tbl ( f1 ) VALUES ('');
INSERT INTO char_tbl ( f1 ) VALUES ('cd');
INSERT INTO char_tbl ( f1 ) VALUES ('c     ');
SELECT '' AS seven,
* FROM char_tbl;
SELECT '' AS six,
c.* FROM char_tbl AS c WHERE c.f1 <> 'a';
SELECT '' AS one,
c.* FROM char_tbl AS c WHERE c.f1 = 'a';
SELECT '' AS five,
c.* FROM char_tbl AS c WHERE c.f1 < 'a';
SELECT '' AS six,
c.* FROM char_tbl AS c WHERE c.f1 <= 'a';
SELECT '' AS one,
c.* FROM char_tbl AS c WHERE c.f1 > 'a';
SELECT '' AS two,
c.* FROM char_tbl AS c WHERE c.f1 >= 'a';
DROP TABLE char_tbl;
CREATE TABLE char_tbl (
f1 char(4)
);
INSERT INTO char_tbl ( f1 ) VALUES ('a');
INSERT INTO char_tbl ( f1 ) VALUES ('ab');
INSERT INTO char_tbl ( f1 ) VALUES ('abcd');
INSERT INTO char_tbl ( f1 ) VALUES ('abcde');
INSERT INTO char_tbl ( f1 ) VALUES ('abcd    ');
SELECT '' AS four,
* FROM char_tbl;"
`;

exports[`kitchen sink upstream upstream/circle.sql 1`] = `
"CREATE TABLE circle_tbl (
f1 circle
);
INSERT INTO circle_tbl VALUES ('<(5,1),3>');
INSERT INTO circle_tbl VALUES ('<(1,2),100>');
INSERT INTO circle_tbl VALUES ('1,3,5');
INSERT INTO circle_tbl VALUES ('((1,2),3)');
INSERT INTO circle_tbl VALUES ('<(100,200),10>');
INSERT INTO circle_tbl VALUES ('<(100,1),115>');
INSERT INTO circle_tbl VALUES ('<(-100,0),-100>');
INSERT INTO circle_tbl VALUES ('1abc,3,5');
INSERT INTO circle_tbl VALUES ('(3,(1,2),3)');
SELECT * FROM circle_tbl;
SELECT '' AS six,
center(f1) AS center FROM circle_tbl;
SELECT '' AS six,
radius(f1) AS radius FROM circle_tbl;
SELECT '' AS six,
diameter(f1) AS diameter FROM circle_tbl;
SELECT '' AS two,
f1 FROM circle_tbl WHERE radius(f1) < 5;
SELECT '' AS four,
f1 FROM circle_tbl WHERE diameter(f1) >= 10;
SELECT '' AS five,
c1.f1 AS one,
c2.f1 AS two,
c1.f1 <-> c2.f1 AS distance FROM circle_tbl AS c1,
circle_tbl AS c2 WHERE c1.f1 < c2.f1 AND (c1.f1 <-> c2.f1) > 0 ORDER BY distance,
area(c1.f1),
area(c2.f1);"
`;

exports[`kitchen sink upstream upstream/circle.sql 2`] = `
"CREATE TABLE circle_tbl (
f1 circle
);
INSERT INTO circle_tbl VALUES ('<(5,1),3>');
INSERT INTO circle_tbl VALUES ('<(1,2),100>');
INSERT INTO circle_tbl VALUES ('1,3,5');
INSERT INTO circle_tbl VALUES ('((1,2),3)');
INSERT INTO circle_tbl VALUES ('<(100,200),10>');
INSERT INTO circle_tbl VALUES ('<(100,1),115>');
INSERT INTO circle_tbl VALUES ('<(-100,0),-100>');
INSERT INTO circle_tbl VALUES ('1abc,3,5');
INSERT INTO circle_tbl VALUES ('(3,(1,2),3)');
SELECT * FROM circle_tbl;
SELECT '' AS six,
center(f1) AS center FROM circle_tbl;
SELECT '' AS six,
radius(f1) AS radius FROM circle_tbl;
SELECT '' AS six,
diameter(f1) AS diameter FROM circle_tbl;
SELECT '' AS two,
f1 FROM circle_tbl WHERE radius(f1) < 5;
SELECT '' AS four,
f1 FROM circle_tbl WHERE diameter(f1) >= 10;
SELECT '' AS five,
c1.f1 AS one,
c2.f1 AS two,
c1.f1 <-> c2.f1 AS distance FROM circle_tbl AS c1,
circle_tbl AS c2 WHERE c1.f1 < c2.f1 AND (c1.f1 <-> c2.f1) > 0 ORDER BY distance,
area(c1.f1),
area(c2.f1);"
`;

exports[`kitchen sink upstream upstream/comments.sql 1`] = `
"SELECT 'trailing' AS first;
SELECT 'embedded' AS second;
SELECT 'both' AS third;
SELECT 'before multi-line' AS fourth;
SELECT 'after multi-line' AS fifth;
SELECT 'deeply nested example' AS sixth;"
`;

exports[`kitchen sink upstream upstream/comments.sql 2`] = `
"SELECT 'trailing' AS first;
SELECT 'embedded' AS second;
SELECT 'both' AS third;
SELECT 'before multi-line' AS fourth;
SELECT 'after multi-line' AS fifth;
SELECT 'deeply nested example' AS sixth;"
`;

exports[`kitchen sink upstream upstream/create_misc.sql 1`] = `
"INSERT INTO tenk2 SELECT * FROM tenk1;
SELECT * INTO onek2 FROM onek;
INSERT INTO fast_emp4000 SELECT * FROM slow_emp4000;
SELECT * INTO bprime FROM tenk1 WHERE unique2 < 1000;
INSERT INTO hobbies_r (name, person) SELECT 'posthacking',
p.name FROM person AS p WHERE p.name = 'mike' OR p.name = 'jeff';
INSERT INTO hobbies_r (name, person) SELECT 'basketball',
p.name FROM person AS p WHERE p.name = 'joe' OR p.name = 'sally';
INSERT INTO hobbies_r (name) VALUES ('skywalking');
INSERT INTO equipment_r (name, hobby) VALUES ('advil', 'posthacking');
INSERT INTO equipment_r (name, hobby) VALUES ('peet''s coffee', 'posthacking');
INSERT INTO equipment_r (name, hobby) VALUES ('hightops', 'basketball');
INSERT INTO equipment_r (name, hobby) VALUES ('guts', 'skywalking');
SELECT * INTO ramp FROM road WHERE name ~ '.*Ramp';
INSERT INTO ihighway SELECT * FROM road WHERE name ~ 'I- .*';
INSERT INTO shighway SELECT * FROM road WHERE name ~ 'State Hwy.*';
UPDATE shighway SET surface = 'asphalt';
INSERT INTO a_star (class, a) VALUES ('a', 1);
INSERT INTO a_star (class, a) VALUES ('a', 2);
INSERT INTO a_star (class) VALUES ('a');
INSERT INTO b_star (class, a, b) VALUES ('b', 3, 'mumble'::text);
INSERT INTO b_star (class, a) VALUES ('b', 4);
INSERT INTO b_star (class, b) VALUES ('b', 'bumble'::text);
INSERT INTO b_star (class) VALUES ('b');
INSERT INTO c_star (class, a, c) VALUES ('c', 5, 'hi mom'::name);
INSERT INTO c_star (class, a) VALUES ('c', 6);
INSERT INTO c_star (class, c) VALUES ('c', 'hi paul'::name);
INSERT INTO c_star (class) VALUES ('c');
INSERT INTO d_star (class, a, b, c, d) VALUES ('d', 7, 'grumble'::text, 'hi sunita'::name, '0.0'::float8);
INSERT INTO d_star (class, a, b, c) VALUES ('d', 8, 'stumble'::text, 'hi koko'::name);
INSERT INTO d_star (class, a, b, d) VALUES ('d', 9, 'rumble'::text, '1.1'::float8);
INSERT INTO d_star (class, a, c, d) VALUES ('d', 10, 'hi kristin'::name, '10.01'::float8);
INSERT INTO d_star (class, b, c, d) VALUES ('d', 'crumble'::text, 'hi boris'::name, '100.001'::float8);
INSERT INTO d_star (class, a, b) VALUES ('d', 11, 'fumble'::text);
INSERT INTO d_star (class, a, c) VALUES ('d', 12, 'hi avi'::name);
INSERT INTO d_star (class, a, d) VALUES ('d', 13, '1000.0001'::float8);
INSERT INTO d_star (class, b, c) VALUES ('d', 'tumble'::text, 'hi andrew'::name);
INSERT INTO d_star (class, b, d) VALUES ('d', 'humble'::text, '10000.00001'::float8);
INSERT INTO d_star (class, c, d) VALUES ('d', 'hi ginger'::name, '100000.000001'::float8);
INSERT INTO d_star (class, a) VALUES ('d', 14);
INSERT INTO d_star (class, b) VALUES ('d', 'jumble'::text);
INSERT INTO d_star (class, c) VALUES ('d', 'hi jolly'::name);
INSERT INTO d_star (class, d) VALUES ('d', '1000000.0000001'::float8);
INSERT INTO d_star (class) VALUES ('d');
INSERT INTO e_star (class, a, c, e) VALUES ('e', 15, 'hi carol'::name, '-1'::int2);
INSERT INTO e_star (class, a, c) VALUES ('e', 16, 'hi bob'::name);
INSERT INTO e_star (class, a, e) VALUES ('e', 17, '-2'::int2);
INSERT INTO e_star (class, c, e) VALUES ('e', 'hi michelle'::name, '-3'::int2);
INSERT INTO e_star (class, a) VALUES ('e', 18);
INSERT INTO e_star (class, c) VALUES ('e', 'hi elisa'::name);
INSERT INTO e_star (class, e) VALUES ('e', '-4'::int2);
INSERT INTO f_star (class, a, c, e, f) VALUES ('f', 19, 'hi claire'::name, '-5'::int2, '(1,3),(2,4)'::polygon);
INSERT INTO f_star (class, a, c, e) VALUES ('f', 20, 'hi mike'::name, '-6'::int2);
INSERT INTO f_star (class, a, c, f) VALUES ('f', 21, 'hi marcel'::name, '(11,44),(22,55),(33,66)'::polygon);
INSERT INTO f_star (class, a, e, f) VALUES ('f', 22, '-7'::int2, '(111,555),(222,666),(333,777),(444,888)'::polygon);
INSERT INTO f_star (class, c, e, f) VALUES ('f', 'hi keith'::name, '-8'::int2, '(1111,3333),(2222,4444)'::polygon);
INSERT INTO f_star (class, a, c) VALUES ('f', 24, 'hi marc'::name);
INSERT INTO f_star (class, a, e) VALUES ('f', 25, '-9'::int2);
INSERT INTO f_star (class, a, f) VALUES ('f', 26, '(11111,33333),(22222,44444)'::polygon);
INSERT INTO f_star (class, c, e) VALUES ('f', 'hi allison'::name, '-10'::int2);
INSERT INTO f_star (class, c, f) VALUES ('f', 'hi jeff'::name, '(111111,333333),(222222,444444)'::polygon);
INSERT INTO f_star (class, e, f) VALUES ('f', '-11'::int2, '(1111111,3333333),(2222222,4444444)'::polygon);
INSERT INTO f_star (class, a) VALUES ('f', 27);
INSERT INTO f_star (class, c) VALUES ('f', 'hi carl'::name);
INSERT INTO f_star (class, e) VALUES ('f', '-12'::int2);
INSERT INTO f_star (class, f) VALUES ('f', '(11111111,33333333),(22222222,44444444)'::polygon);
INSERT INTO f_star (class) VALUES ('f');
CREATE TABLE iportaltest (
i int4,
d float4,
p polygon
);
INSERT INTO iportaltest (i, d, p) VALUES (1, 3.567, '(3.0,1.0),(4.0,2.0)'::polygon);
INSERT INTO iportaltest (i, d, p) VALUES (2, 89.05, '(4.0,2.0),(3.0,1.0)'::polygon);"
`;

exports[`kitchen sink upstream upstream/create_misc.sql 2`] = `
"INSERT INTO tenk2 SELECT * FROM tenk1;
SELECT * INTO onek2 FROM onek;
INSERT INTO fast_emp4000 SELECT * FROM slow_emp4000;
SELECT * INTO bprime FROM tenk1 WHERE unique2 < 1000;
INSERT INTO hobbies_r ( name, person ) SELECT 'posthacking',
p.name FROM person AS p WHERE p.name = 'mike' OR p.name = 'jeff';
INSERT INTO hobbies_r ( name, person ) SELECT 'basketball',
p.name FROM person AS p WHERE p.name = 'joe' OR p.name = 'sally';
INSERT INTO hobbies_r ( name ) VALUES ('skywalking');
INSERT INTO equipment_r ( name, hobby ) VALUES ('advil', 'posthacking');
INSERT INTO equipment_r ( name, hobby ) VALUES ('peet''s coffee', 'posthacking');
INSERT INTO equipment_r ( name, hobby ) VALUES ('hightops', 'basketball');
INSERT INTO equipment_r ( name, hobby ) VALUES ('guts', 'skywalking');
SELECT * INTO ramp FROM road WHERE name ~ '.*Ramp';
INSERT INTO ihighway SELECT * FROM road WHERE name ~ 'I- .*';
INSERT INTO shighway SELECT * FROM road WHERE name ~ 'State Hwy.*';
UPDATE shighway SET surface = 'asphalt';
INSERT INTO a_star ( class, a ) VALUES ('a', 1);
INSERT INTO a_star ( class, a ) VALUES ('a', 2);
INSERT INTO a_star ( class ) VALUES ('a');
INSERT INTO b_star ( class, a, b ) VALUES ('b', 3, 'mumble'::text);
INSERT INTO b_star ( class, a ) VALUES ('b', 4);
INSERT INTO b_star ( class, b ) VALUES ('b', 'bumble'::text);
INSERT INTO b_star ( class ) VALUES ('b');
INSERT INTO c_star ( class, a, c ) VALUES ('c', 5, 'hi mom'::name);
INSERT INTO c_star ( class, a ) VALUES ('c', 6);
INSERT INTO c_star ( class, c ) VALUES ('c', 'hi paul'::name);
INSERT INTO c_star ( class ) VALUES ('c');
INSERT INTO d_star ( class, a, b, c, d ) VALUES ('d', 7, 'grumble'::text, 'hi sunita'::name, '0.0'::float8);
INSERT INTO d_star ( class, a, b, c ) VALUES ('d', 8, 'stumble'::text, 'hi koko'::name);
INSERT INTO d_star ( class, a, b, d ) VALUES ('d', 9, 'rumble'::text, '1.1'::float8);
INSERT INTO d_star ( class, a, c, d ) VALUES ('d', 10, 'hi kristin'::name, '10.01'::float8);
INSERT INTO d_star ( class, b, c, d ) VALUES ('d', 'crumble'::text, 'hi boris'::name, '100.001'::float8);
INSERT INTO d_star ( class, a, b ) VALUES ('d', 11, 'fumble'::text);
INSERT INTO d_star ( class, a, c ) VALUES ('d', 12, 'hi avi'::name);
INSERT INTO d_star ( class, a, d ) VALUES ('d', 13, '1000.0001'::float8);
INSERT INTO d_star ( class, b, c ) VALUES ('d', 'tumble'::text, 'hi andrew'::name);
INSERT INTO d_star ( class, b, d ) VALUES ('d', 'humble'::text, '10000.00001'::float8);
INSERT INTO d_star ( class, c, d ) VALUES ('d', 'hi ginger'::name, '100000.000001'::float8);
INSERT INTO d_star ( class, a ) VALUES ('d', 14);
INSERT INTO d_star ( class, b ) VALUES ('d', 'jumble'::text);
INSERT INTO d_star ( class, c ) VALUES ('d', 'hi jolly'::name);
INSERT INTO d_star ( class, d ) VALUES ('d', '1000000.0000001'::float8);
INSERT INTO d_star ( class ) VALUES ('d');
INSERT INTO e_star ( class, a, c, e ) VALUES ('e', 15, 'hi carol'::name, '-1'::int2);
INSERT INTO e_star ( class, a, c ) VALUES ('e', 16, 'hi bob'::name);
INSERT INTO e_star ( class, a, e ) VALUES ('e', 17, '-2'::int2);
INSERT INTO e_star ( class, c, e ) VALUES ('e', 'hi michelle'::name, '-3'::int2);
INSERT INTO e_star ( class, a ) VALUES ('e', 18);
INSERT INTO e_star ( class, c ) VALUES ('e', 'hi elisa'::name);
INSERT INTO e_star ( class, e ) VALUES ('e', '-4'::int2);
INSERT INTO f_star ( class, a, c, e, f ) VALUES ('f', 19, 'hi claire'::name, '-5'::int2, '(1,3),(2,4)'::polygon);
INSERT INTO f_star ( class, a, c, e ) VALUES ('f', 20, 'hi mike'::name, '-6'::int2);
INSERT INTO f_star ( class, a, c, f ) VALUES ('f', 21, 'hi marcel'::name, '(11,44),(22,55),(33,66)'::polygon);
INSERT INTO f_star ( class, a, e, f ) VALUES ('f', 22, '-7'::int2, '(111,555),(222,666),(333,777),(444,888)'::polygon);
INSERT INTO f_star ( class, c, e, f ) VALUES ('f', 'hi keith'::name, '-8'::int2, '(1111,3333),(2222,4444)'::polygon);
INSERT INTO f_star ( class, a, c ) VALUES ('f', 24, 'hi marc'::name);
INSERT INTO f_star ( class, a, e ) VALUES ('f', 25, '-9'::int2);
INSERT INTO f_star ( class, a, f ) VALUES ('f', 26, '(11111,33333),(22222,44444)'::polygon);
INSERT INTO f_star ( class, c, e ) VALUES ('f', 'hi allison'::name, '-10'::int2);
INSERT INTO f_star ( class, c, f ) VALUES ('f', 'hi jeff'::name, '(111111,333333),(222222,444444)'::polygon);
INSERT INTO f_star ( class, e, f ) VALUES ('f', '-11'::int2, '(1111111,3333333),(2222222,4444444)'::polygon);
INSERT INTO f_star ( class, a ) VALUES ('f', 27);
INSERT INTO f_star ( class, c ) VALUES ('f', 'hi carl'::name);
INSERT INTO f_star ( class, e ) VALUES ('f', '-12'::int2);
INSERT INTO f_star ( class, f ) VALUES ('f', '(11111111,33333333),(22222222,44444444)'::polygon);
INSERT INTO f_star ( class ) VALUES ('f');
CREATE TABLE iportaltest (
i int4,
d float4,
p polygon
);
INSERT INTO iportaltest ( i, d, p ) VALUES (1, 3.567, '(3.0,1.0),(4.0,2.0)'::polygon);
INSERT INTO iportaltest ( i, d, p ) VALUES (2, 89.05, '(4.0,2.0),(3.0,1.0)'::polygon);"
`;

exports[`kitchen sink upstream upstream/date.sql 1`] = `
"CREATE TABLE date_tbl (
f1 date
);
INSERT INTO date_tbl VALUES ('1957-04-09');
INSERT INTO date_tbl VALUES ('1957-06-13');
INSERT INTO date_tbl VALUES ('1996-02-28');
INSERT INTO date_tbl VALUES ('1996-02-29');
INSERT INTO date_tbl VALUES ('1996-03-01');
INSERT INTO date_tbl VALUES ('1996-03-02');
INSERT INTO date_tbl VALUES ('1997-02-28');
INSERT INTO date_tbl VALUES ('1997-02-29');
INSERT INTO date_tbl VALUES ('1997-03-01');
INSERT INTO date_tbl VALUES ('1997-03-02');
INSERT INTO date_tbl VALUES ('2000-04-01');
INSERT INTO date_tbl VALUES ('2000-04-02');
INSERT INTO date_tbl VALUES ('2000-04-03');
INSERT INTO date_tbl VALUES ('2038-04-08');
INSERT INTO date_tbl VALUES ('2039-04-09');
INSERT INTO date_tbl VALUES ('2040-04-10');
SELECT f1 AS \\"Fifteen\\" FROM date_tbl;
SELECT f1 AS \\"Nine\\" FROM date_tbl WHERE f1 < '2000-01-01';
SELECT f1 AS \\"Three\\" FROM date_tbl WHERE f1 BETWEEN '2000-01-01' AND '2001-01-01';
SET datestyle = 'iso';
SET datestyle = 'ymd';
SELECT 'January 8, 1999'::date;
SELECT '1999-01-08'::date;
SELECT '1999-01-18'::date;
SELECT '1/8/1999'::date;
SELECT '1/18/1999'::date;
SELECT '18/1/1999'::date;
SELECT '01/02/03'::date;
SELECT '19990108'::date;
SELECT '990108'::date;
SELECT '1999.008'::date;
SELECT 'J2451187'::date;
SELECT 'January 8, 99 BC'::date;
SELECT '99-Jan-08'::date;
SELECT '1999-Jan-08'::date;
SELECT '08-Jan-99'::date;
SELECT '08-Jan-1999'::date;
SELECT 'Jan-08-99'::date;
SELECT 'Jan-08-1999'::date;
SELECT '99-08-Jan'::date;
SELECT '1999-08-Jan'::date;
SELECT '99 Jan 08'::date;
SELECT '1999 Jan 08'::date;
SELECT '08 Jan 99'::date;
SELECT '08 Jan 1999'::date;
SELECT 'Jan 08 99'::date;
SELECT 'Jan 08 1999'::date;
SELECT '99 08 Jan'::date;
SELECT '1999 08 Jan'::date;
SELECT '99-01-08'::date;
SELECT '1999-01-08'::date;
SELECT '08-01-99'::date;
SELECT '08-01-1999'::date;
SELECT '01-08-99'::date;
SELECT '01-08-1999'::date;
SELECT '99-08-01'::date;
SELECT '1999-08-01'::date;
SELECT '99 01 08'::date;
SELECT '1999 01 08'::date;
SELECT '08 01 99'::date;
SELECT '08 01 1999'::date;
SELECT '01 08 99'::date;
SELECT '01 08 1999'::date;
SELECT '99 08 01'::date;
SELECT '1999 08 01'::date;
SET datestyle = 'dmy';
SELECT 'January 8, 1999'::date;
SELECT '1999-01-08'::date;
SELECT '1999-01-18'::date;
SELECT '1/8/1999'::date;
SELECT '1/18/1999'::date;
SELECT '18/1/1999'::date;
SELECT '01/02/03'::date;
SELECT '19990108'::date;
SELECT '990108'::date;
SELECT '1999.008'::date;
SELECT 'J2451187'::date;
SELECT 'January 8, 99 BC'::date;
SELECT '99-Jan-08'::date;
SELECT '1999-Jan-08'::date;
SELECT '08-Jan-99'::date;
SELECT '08-Jan-1999'::date;
SELECT 'Jan-08-99'::date;
SELECT 'Jan-08-1999'::date;
SELECT '99-08-Jan'::date;
SELECT '1999-08-Jan'::date;
SELECT '99 Jan 08'::date;
SELECT '1999 Jan 08'::date;
SELECT '08 Jan 99'::date;
SELECT '08 Jan 1999'::date;
SELECT 'Jan 08 99'::date;
SELECT 'Jan 08 1999'::date;
SELECT '99 08 Jan'::date;
SELECT '1999 08 Jan'::date;
SELECT '99-01-08'::date;
SELECT '1999-01-08'::date;
SELECT '08-01-99'::date;
SELECT '08-01-1999'::date;
SELECT '01-08-99'::date;
SELECT '01-08-1999'::date;
SELECT '99-08-01'::date;
SELECT '1999-08-01'::date;
SELECT '99 01 08'::date;
SELECT '1999 01 08'::date;
SELECT '08 01 99'::date;
SELECT '08 01 1999'::date;
SELECT '01 08 99'::date;
SELECT '01 08 1999'::date;
SELECT '99 08 01'::date;
SELECT '1999 08 01'::date;
SET datestyle = 'mdy';
SELECT 'January 8, 1999'::date;
SELECT '1999-01-08'::date;
SELECT '1999-01-18'::date;
SELECT '1/8/1999'::date;
SELECT '1/18/1999'::date;
SELECT '18/1/1999'::date;
SELECT '01/02/03'::date;
SELECT '19990108'::date;
SELECT '990108'::date;
SELECT '1999.008'::date;
SELECT 'J2451187'::date;
SELECT 'January 8, 99 BC'::date;
SELECT '99-Jan-08'::date;
SELECT '1999-Jan-08'::date;
SELECT '08-Jan-99'::date;
SELECT '08-Jan-1999'::date;
SELECT 'Jan-08-99'::date;
SELECT 'Jan-08-1999'::date;
SELECT '99-08-Jan'::date;
SELECT '1999-08-Jan'::date;
SELECT '99 Jan 08'::date;
SELECT '1999 Jan 08'::date;
SELECT '08 Jan 99'::date;
SELECT '08 Jan 1999'::date;
SELECT 'Jan 08 99'::date;
SELECT 'Jan 08 1999'::date;
SELECT '99 08 Jan'::date;
SELECT '1999 08 Jan'::date;
SELECT '99-01-08'::date;
SELECT '1999-01-08'::date;
SELECT '08-01-99'::date;
SELECT '08-01-1999'::date;
SELECT '01-08-99'::date;
SELECT '01-08-1999'::date;
SELECT '99-08-01'::date;
SELECT '1999-08-01'::date;
SELECT '99 01 08'::date;
SELECT '1999 01 08'::date;
SELECT '08 01 99'::date;
SELECT '08 01 1999'::date;
SELECT '01 08 99'::date;
SELECT '01 08 1999'::date;
SELECT '99 08 01'::date;
SELECT '1999 08 01'::date;
SELECT '4714-11-24 BC'::date;
SELECT '4714-11-23 BC'::date;
SELECT '5874897-12-31'::date;
SELECT '5874898-01-01'::date;
RESET datestyle;
SELECT f1 - '2000-01-01'::date AS \\"Days From 2K\\" FROM date_tbl;
SELECT f1 - 'epoch'::date AS \\"Days From Epoch\\" FROM date_tbl;
SELECT 'yesterday'::date - 'today'::date AS \\"One day\\";
SELECT 'today'::date - 'tomorrow'::date AS \\"One day\\";
SELECT 'yesterday'::date - 'tomorrow'::date AS \\"Two days\\";
SELECT 'tomorrow'::date - 'today'::date AS \\"One day\\";
SELECT 'today'::date - 'yesterday'::date AS \\"One day\\";
SELECT 'tomorrow'::date - 'yesterday'::date AS \\"Two days\\";
SELECT pg_catalog.date_part('epoch', '1970-01-01'::date);
SELECT pg_catalog.date_part('epoch', '1970-01-01'::timestamp);
SELECT pg_catalog.date_part('epoch', '1970-01-01+00'::timestamptz);
SELECT pg_catalog.date_part('century', '0101-12-31 BC'::date);
SELECT pg_catalog.date_part('century', '0100-12-31 BC'::date);
SELECT pg_catalog.date_part('century', '0001-12-31 BC'::date);
SELECT pg_catalog.date_part('century', '0001-01-01'::date);
SELECT pg_catalog.date_part('century', '0001-01-01 AD'::date);
SELECT pg_catalog.date_part('century', '1900-12-31'::date);
SELECT pg_catalog.date_part('century', '1901-01-01'::date);
SELECT pg_catalog.date_part('century', '2000-12-31'::date);
SELECT pg_catalog.date_part('century', '2001-01-01'::date);
SELECT pg_catalog.date_part('century', CURRENT_DATE) >= 21 AS \\"true\\";
SELECT pg_catalog.date_part('millennium', '0001-12-31 BC'::date);
SELECT pg_catalog.date_part('millennium', '0001-01-01 AD'::date);
SELECT pg_catalog.date_part('millennium', '1000-12-31'::date);
SELECT pg_catalog.date_part('millennium', '1001-01-01'::date);
SELECT pg_catalog.date_part('millennium', '2000-12-31'::date);
SELECT pg_catalog.date_part('millennium', '2001-01-01'::date);
SELECT pg_catalog.date_part('millennium', CURRENT_DATE);
SELECT pg_catalog.date_part('decade', '1994-12-25'::date);
SELECT pg_catalog.date_part('decade', '0010-01-01'::date);
SELECT pg_catalog.date_part('decade', '0009-12-31'::date);
SELECT pg_catalog.date_part('decade', '0001-01-01 BC'::date);
SELECT pg_catalog.date_part('decade', '0002-12-31 BC'::date);
SELECT pg_catalog.date_part('decade', '0011-01-01 BC'::date);
SELECT pg_catalog.date_part('decade', '0012-12-31 BC'::date);
SELECT pg_catalog.date_part('century', now()) >= 21 AS \\"true\\";
SELECT pg_catalog.date_part('century', '1970-03-20 04:30:00.00000'::timestamp);
SELECT pg_catalog.date_part('century', '100 y'::interval);
SELECT pg_catalog.date_part('century', '99 y'::interval);
SELECT pg_catalog.date_part('century', '-99 y'::interval);
SELECT pg_catalog.date_part('century', '-100 y'::interval);
SELECT date_trunc('MILLENNIUM', '1970-03-20 04:30:00.00000'::timestamp);
SELECT date_trunc('MILLENNIUM', '1970-03-20'::date);
SELECT date_trunc('CENTURY', '1970-03-20 04:30:00.00000'::timestamp);
SELECT date_trunc('CENTURY', '1970-03-20'::date);
SELECT date_trunc('CENTURY', '2004-08-10'::date);
SELECT date_trunc('CENTURY', '0002-02-04'::date);
SELECT date_trunc('CENTURY', '0055-08-10 BC'::date);
SELECT date_trunc('DECADE', '1993-12-25'::date);
SELECT date_trunc('DECADE', '0004-12-25'::date);
SELECT date_trunc('DECADE', '0002-12-31 BC'::date);
SELECT 'infinity'::date,
'-infinity'::date;
SELECT 'infinity'::date > 'today'::date AS t;
SELECT '-infinity'::date < 'today'::date AS t;
SELECT isfinite('infinity'::date),
isfinite('-infinity'::date),
isfinite('today'::date);
SELECT pg_catalog.date_part('hour', 'infinity'::date);
SELECT pg_catalog.date_part('hour', '-infinity'::date);
SELECT pg_catalog.date_part('hour', 'infinity'::timestamp);
SELECT pg_catalog.date_part('hour', '-infinity'::timestamp);
SELECT pg_catalog.date_part('hour', 'infinity'::timestamptz);
SELECT pg_catalog.date_part('hour', '-infinity'::timestamptz);
SELECT pg_catalog.date_part('microseconds', 'infinity'::date);
SELECT pg_catalog.date_part('milliseconds', 'infinity'::date);
SELECT pg_catalog.date_part('second', 'infinity'::date);
SELECT pg_catalog.date_part('minute', 'infinity'::date);
SELECT pg_catalog.date_part('hour', 'infinity'::date);
SELECT pg_catalog.date_part('day', 'infinity'::date);
SELECT pg_catalog.date_part('month', 'infinity'::date);
SELECT pg_catalog.date_part('quarter', 'infinity'::date);
SELECT pg_catalog.date_part('week', 'infinity'::date);
SELECT pg_catalog.date_part('dow', 'infinity'::date);
SELECT pg_catalog.date_part('isodow', 'infinity'::date);
SELECT pg_catalog.date_part('doy', 'infinity'::date);
SELECT pg_catalog.date_part('timezone', 'infinity'::date);
SELECT pg_catalog.date_part('timezone_m', 'infinity'::date);
SELECT pg_catalog.date_part('timezone_h', 'infinity'::date);
SELECT pg_catalog.date_part('epoch', 'infinity'::date);
SELECT pg_catalog.date_part('epoch', '-infinity'::date);
SELECT pg_catalog.date_part('epoch', 'infinity'::timestamp);
SELECT pg_catalog.date_part('epoch', '-infinity'::timestamp);
SELECT pg_catalog.date_part('epoch', 'infinity'::timestamptz);
SELECT pg_catalog.date_part('epoch', '-infinity'::timestamptz);
SELECT pg_catalog.date_part('year', 'infinity'::date);
SELECT pg_catalog.date_part('decade', 'infinity'::date);
SELECT pg_catalog.date_part('century', 'infinity'::date);
SELECT pg_catalog.date_part('millennium', 'infinity'::date);
SELECT pg_catalog.date_part('julian', 'infinity'::date);
SELECT pg_catalog.date_part('isoyear', 'infinity'::date);
SELECT pg_catalog.date_part('epoch', 'infinity'::date);
SELECT pg_catalog.date_part('microsec', 'infinity'::date);
SELECT pg_catalog.date_part('undefined', 'infinity'::date);
SELECT make_date(2013, 7, 15);
SELECT make_time(8, 20, 0.0);
SELECT make_date(2013, 2, 30);
SELECT make_date(2013, 13, 1);
SELECT make_date(2013, 11, (-1));
SELECT make_date((-44), 3, 15);
SELECT make_time(10, 55, 100.1);
SELECT make_time(24, 0, 2.1);"
`;

exports[`kitchen sink upstream upstream/date.sql 2`] = `
"CREATE TABLE date_tbl (
f1 date
);
INSERT INTO date_tbl VALUES ('1957-04-09');
INSERT INTO date_tbl VALUES ('1957-06-13');
INSERT INTO date_tbl VALUES ('1996-02-28');
INSERT INTO date_tbl VALUES ('1996-02-29');
INSERT INTO date_tbl VALUES ('1996-03-01');
INSERT INTO date_tbl VALUES ('1996-03-02');
INSERT INTO date_tbl VALUES ('1997-02-28');
INSERT INTO date_tbl VALUES ('1997-02-29');
INSERT INTO date_tbl VALUES ('1997-03-01');
INSERT INTO date_tbl VALUES ('1997-03-02');
INSERT INTO date_tbl VALUES ('2000-04-01');
INSERT INTO date_tbl VALUES ('2000-04-02');
INSERT INTO date_tbl VALUES ('2000-04-03');
INSERT INTO date_tbl VALUES ('2038-04-08');
INSERT INTO date_tbl VALUES ('2039-04-09');
INSERT INTO date_tbl VALUES ('2040-04-10');
SELECT f1 AS \\"Fifteen\\" FROM date_tbl;
SELECT f1 AS \\"Nine\\" FROM date_tbl WHERE f1 < '2000-01-01';
SELECT f1 AS \\"Three\\" FROM date_tbl WHERE f1 BETWEEN '2000-01-01' AND '2001-01-01';
SET datestyle = 'iso';
SET datestyle = 'ymd';
SELECT 'January 8, 1999'::date;
SELECT '1999-01-08'::date;
SELECT '1999-01-18'::date;
SELECT '1/8/1999'::date;
SELECT '1/18/1999'::date;
SELECT '18/1/1999'::date;
SELECT '01/02/03'::date;
SELECT '19990108'::date;
SELECT '990108'::date;
SELECT '1999.008'::date;
SELECT 'J2451187'::date;
SELECT 'January 8, 99 BC'::date;
SELECT '99-Jan-08'::date;
SELECT '1999-Jan-08'::date;
SELECT '08-Jan-99'::date;
SELECT '08-Jan-1999'::date;
SELECT 'Jan-08-99'::date;
SELECT 'Jan-08-1999'::date;
SELECT '99-08-Jan'::date;
SELECT '1999-08-Jan'::date;
SELECT '99 Jan 08'::date;
SELECT '1999 Jan 08'::date;
SELECT '08 Jan 99'::date;
SELECT '08 Jan 1999'::date;
SELECT 'Jan 08 99'::date;
SELECT 'Jan 08 1999'::date;
SELECT '99 08 Jan'::date;
SELECT '1999 08 Jan'::date;
SELECT '99-01-08'::date;
SELECT '1999-01-08'::date;
SELECT '08-01-99'::date;
SELECT '08-01-1999'::date;
SELECT '01-08-99'::date;
SELECT '01-08-1999'::date;
SELECT '99-08-01'::date;
SELECT '1999-08-01'::date;
SELECT '99 01 08'::date;
SELECT '1999 01 08'::date;
SELECT '08 01 99'::date;
SELECT '08 01 1999'::date;
SELECT '01 08 99'::date;
SELECT '01 08 1999'::date;
SELECT '99 08 01'::date;
SELECT '1999 08 01'::date;
SET datestyle = 'dmy';
SELECT 'January 8, 1999'::date;
SELECT '1999-01-08'::date;
SELECT '1999-01-18'::date;
SELECT '1/8/1999'::date;
SELECT '1/18/1999'::date;
SELECT '18/1/1999'::date;
SELECT '01/02/03'::date;
SELECT '19990108'::date;
SELECT '990108'::date;
SELECT '1999.008'::date;
SELECT 'J2451187'::date;
SELECT 'January 8, 99 BC'::date;
SELECT '99-Jan-08'::date;
SELECT '1999-Jan-08'::date;
SELECT '08-Jan-99'::date;
SELECT '08-Jan-1999'::date;
SELECT 'Jan-08-99'::date;
SELECT 'Jan-08-1999'::date;
SELECT '99-08-Jan'::date;
SELECT '1999-08-Jan'::date;
SELECT '99 Jan 08'::date;
SELECT '1999 Jan 08'::date;
SELECT '08 Jan 99'::date;
SELECT '08 Jan 1999'::date;
SELECT 'Jan 08 99'::date;
SELECT 'Jan 08 1999'::date;
SELECT '99 08 Jan'::date;
SELECT '1999 08 Jan'::date;
SELECT '99-01-08'::date;
SELECT '1999-01-08'::date;
SELECT '08-01-99'::date;
SELECT '08-01-1999'::date;
SELECT '01-08-99'::date;
SELECT '01-08-1999'::date;
SELECT '99-08-01'::date;
SELECT '1999-08-01'::date;
SELECT '99 01 08'::date;
SELECT '1999 01 08'::date;
SELECT '08 01 99'::date;
SELECT '08 01 1999'::date;
SELECT '01 08 99'::date;
SELECT '01 08 1999'::date;
SELECT '99 08 01'::date;
SELECT '1999 08 01'::date;
SET datestyle = 'mdy';
SELECT 'January 8, 1999'::date;
SELECT '1999-01-08'::date;
SELECT '1999-01-18'::date;
SELECT '1/8/1999'::date;
SELECT '1/18/1999'::date;
SELECT '18/1/1999'::date;
SELECT '01/02/03'::date;
SELECT '19990108'::date;
SELECT '990108'::date;
SELECT '1999.008'::date;
SELECT 'J2451187'::date;
SELECT 'January 8, 99 BC'::date;
SELECT '99-Jan-08'::date;
SELECT '1999-Jan-08'::date;
SELECT '08-Jan-99'::date;
SELECT '08-Jan-1999'::date;
SELECT 'Jan-08-99'::date;
SELECT 'Jan-08-1999'::date;
SELECT '99-08-Jan'::date;
SELECT '1999-08-Jan'::date;
SELECT '99 Jan 08'::date;
SELECT '1999 Jan 08'::date;
SELECT '08 Jan 99'::date;
SELECT '08 Jan 1999'::date;
SELECT 'Jan 08 99'::date;
SELECT 'Jan 08 1999'::date;
SELECT '99 08 Jan'::date;
SELECT '1999 08 Jan'::date;
SELECT '99-01-08'::date;
SELECT '1999-01-08'::date;
SELECT '08-01-99'::date;
SELECT '08-01-1999'::date;
SELECT '01-08-99'::date;
SELECT '01-08-1999'::date;
SELECT '99-08-01'::date;
SELECT '1999-08-01'::date;
SELECT '99 01 08'::date;
SELECT '1999 01 08'::date;
SELECT '08 01 99'::date;
SELECT '08 01 1999'::date;
SELECT '01 08 99'::date;
SELECT '01 08 1999'::date;
SELECT '99 08 01'::date;
SELECT '1999 08 01'::date;
SELECT '4714-11-24 BC'::date;
SELECT '4714-11-23 BC'::date;
SELECT '5874897-12-31'::date;
SELECT '5874898-01-01'::date;
RESET datestyle;
SELECT f1 - '2000-01-01'::date AS \\"Days From 2K\\" FROM date_tbl;
SELECT f1 - 'epoch'::date AS \\"Days From Epoch\\" FROM date_tbl;
SELECT 'yesterday'::date - 'today'::date AS \\"One day\\";
SELECT 'today'::date - 'tomorrow'::date AS \\"One day\\";
SELECT 'yesterday'::date - 'tomorrow'::date AS \\"Two days\\";
SELECT 'tomorrow'::date - 'today'::date AS \\"One day\\";
SELECT 'today'::date - 'yesterday'::date AS \\"One day\\";
SELECT 'tomorrow'::date - 'yesterday'::date AS \\"Two days\\";
SELECT pg_catalog.date_part('epoch', '1970-01-01'::date);
SELECT pg_catalog.date_part('epoch', '1970-01-01'::timestamp);
SELECT pg_catalog.date_part('epoch', '1970-01-01+00'::timestamptz);
SELECT pg_catalog.date_part('century', '0101-12-31 BC'::date);
SELECT pg_catalog.date_part('century', '0100-12-31 BC'::date);
SELECT pg_catalog.date_part('century', '0001-12-31 BC'::date);
SELECT pg_catalog.date_part('century', '0001-01-01'::date);
SELECT pg_catalog.date_part('century', '0001-01-01 AD'::date);
SELECT pg_catalog.date_part('century', '1900-12-31'::date);
SELECT pg_catalog.date_part('century', '1901-01-01'::date);
SELECT pg_catalog.date_part('century', '2000-12-31'::date);
SELECT pg_catalog.date_part('century', '2001-01-01'::date);
SELECT pg_catalog.date_part('century', CURRENT_DATE) >= 21 AS \\"true\\";
SELECT pg_catalog.date_part('millennium', '0001-12-31 BC'::date);
SELECT pg_catalog.date_part('millennium', '0001-01-01 AD'::date);
SELECT pg_catalog.date_part('millennium', '1000-12-31'::date);
SELECT pg_catalog.date_part('millennium', '1001-01-01'::date);
SELECT pg_catalog.date_part('millennium', '2000-12-31'::date);
SELECT pg_catalog.date_part('millennium', '2001-01-01'::date);
SELECT pg_catalog.date_part('millennium', CURRENT_DATE);
SELECT pg_catalog.date_part('decade', '1994-12-25'::date);
SELECT pg_catalog.date_part('decade', '0010-01-01'::date);
SELECT pg_catalog.date_part('decade', '0009-12-31'::date);
SELECT pg_catalog.date_part('decade', '0001-01-01 BC'::date);
SELECT pg_catalog.date_part('decade', '0002-12-31 BC'::date);
SELECT pg_catalog.date_part('decade', '0011-01-01 BC'::date);
SELECT pg_catalog.date_part('decade', '0012-12-31 BC'::date);
SELECT pg_catalog.date_part('century', now()) >= 21 AS \\"true\\";
SELECT pg_catalog.date_part('century', '1970-03-20 04:30:00.00000'::timestamp);
SELECT pg_catalog.date_part('century', '100 y'::interval);
SELECT pg_catalog.date_part('century', '99 y'::interval);
SELECT pg_catalog.date_part('century', '-99 y'::interval);
SELECT pg_catalog.date_part('century', '-100 y'::interval);
SELECT date_trunc('MILLENNIUM', '1970-03-20 04:30:00.00000'::timestamp);
SELECT date_trunc('MILLENNIUM', '1970-03-20'::date);
SELECT date_trunc('CENTURY', '1970-03-20 04:30:00.00000'::timestamp);
SELECT date_trunc('CENTURY', '1970-03-20'::date);
SELECT date_trunc('CENTURY', '2004-08-10'::date);
SELECT date_trunc('CENTURY', '0002-02-04'::date);
SELECT date_trunc('CENTURY', '0055-08-10 BC'::date);
SELECT date_trunc('DECADE', '1993-12-25'::date);
SELECT date_trunc('DECADE', '0004-12-25'::date);
SELECT date_trunc('DECADE', '0002-12-31 BC'::date);
SELECT 'infinity'::date,
'-infinity'::date;
SELECT 'infinity'::date > 'today'::date AS t;
SELECT '-infinity'::date < 'today'::date AS t;
SELECT isfinite('infinity'::date),
isfinite('-infinity'::date),
isfinite('today'::date);
SELECT pg_catalog.date_part('hour', 'infinity'::date);
SELECT pg_catalog.date_part('hour', '-infinity'::date);
SELECT pg_catalog.date_part('hour', 'infinity'::timestamp);
SELECT pg_catalog.date_part('hour', '-infinity'::timestamp);
SELECT pg_catalog.date_part('hour', 'infinity'::timestamptz);
SELECT pg_catalog.date_part('hour', '-infinity'::timestamptz);
SELECT pg_catalog.date_part('microseconds', 'infinity'::date);
SELECT pg_catalog.date_part('milliseconds', 'infinity'::date);
SELECT pg_catalog.date_part('second', 'infinity'::date);
SELECT pg_catalog.date_part('minute', 'infinity'::date);
SELECT pg_catalog.date_part('hour', 'infinity'::date);
SELECT pg_catalog.date_part('day', 'infinity'::date);
SELECT pg_catalog.date_part('month', 'infinity'::date);
SELECT pg_catalog.date_part('quarter', 'infinity'::date);
SELECT pg_catalog.date_part('week', 'infinity'::date);
SELECT pg_catalog.date_part('dow', 'infinity'::date);
SELECT pg_catalog.date_part('isodow', 'infinity'::date);
SELECT pg_catalog.date_part('doy', 'infinity'::date);
SELECT pg_catalog.date_part('timezone', 'infinity'::date);
SELECT pg_catalog.date_part('timezone_m', 'infinity'::date);
SELECT pg_catalog.date_part('timezone_h', 'infinity'::date);
SELECT pg_catalog.date_part('epoch', 'infinity'::date);
SELECT pg_catalog.date_part('epoch', '-infinity'::date);
SELECT pg_catalog.date_part('epoch', 'infinity'::timestamp);
SELECT pg_catalog.date_part('epoch', '-infinity'::timestamp);
SELECT pg_catalog.date_part('epoch', 'infinity'::timestamptz);
SELECT pg_catalog.date_part('epoch', '-infinity'::timestamptz);
SELECT pg_catalog.date_part('year', 'infinity'::date);
SELECT pg_catalog.date_part('decade', 'infinity'::date);
SELECT pg_catalog.date_part('century', 'infinity'::date);
SELECT pg_catalog.date_part('millennium', 'infinity'::date);
SELECT pg_catalog.date_part('julian', 'infinity'::date);
SELECT pg_catalog.date_part('isoyear', 'infinity'::date);
SELECT pg_catalog.date_part('epoch', 'infinity'::date);
SELECT pg_catalog.date_part('microsec', 'infinity'::date);
SELECT pg_catalog.date_part('undefined', 'infinity'::date);
SELECT make_date(2013, 7, 15);
SELECT make_time(8, 20, 0.0);
SELECT make_date(2013, 2, 30);
SELECT make_date(2013, 13, 1);
SELECT make_date(2013, 11, (-1));
SELECT make_date((-44), 3, 15);
SELECT make_time(10, 55, 100.1);
SELECT make_time(24, 0, 2.1);"
`;

exports[`kitchen sink upstream upstream/dbsize.sql 1`] = `
"SELECT size,
pg_size_pretty(size),
pg_size_pretty((-1) * size) FROM (VALUES (10::bigint), (1000::bigint), (1000000::bigint), (1000000000::bigint), (1000000000000::bigint), (1000000000000000::bigint)) AS x (size);
SELECT size,
pg_size_pretty(size),
pg_size_pretty((-1) * size) FROM (VALUES (10::numeric), (1000::numeric), (1000000::numeric), (1000000000::numeric), (1000000000000::numeric), (1000000000000000::numeric), (10.5::numeric), (1000.5::numeric), (1000000.5::numeric), (1000000000.5::numeric), (1000000000000.5::numeric), (1000000000000000.5::numeric)) AS x (size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('1'), ('123bytes'), ('1kB'), ('1MB'), (' 1 GB'), ('1.5 GB '), ('1TB'), ('3000 TB'), ('1e6 MB')) AS x (size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('1'), ('123bYteS'), ('1kb'), ('1mb'), (' 1 Gb'), ('1.5 gB '), ('1tb'), ('3000 tb'), ('1e6 mb')) AS x (size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('-1'), ('-123bytes'), ('-1kb'), ('-1mb'), (' -1 Gb'), ('-1.5 gB '), ('-1tb'), ('-3000 TB'), ('-10e-1 MB')) AS x (size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('-1.'), ('-1.kb'), ('-1. kb'), ('-0. gb'), ('-.1'), ('-.1kb'), ('-.1 kb'), ('-.0 gb')) AS x (size);
SELECT pg_size_bytes('1 AB');
SELECT pg_size_bytes('1 AB A');
SELECT pg_size_bytes('1 AB A    ');
SELECT pg_size_bytes('9223372036854775807.9');
SELECT pg_size_bytes('1e100');
SELECT pg_size_bytes('1e1000000000000000000');
SELECT pg_size_bytes('1 byte');
SELECT pg_size_bytes('');
SELECT pg_size_bytes('kb');
SELECT pg_size_bytes('..');
SELECT pg_size_bytes('-.');
SELECT pg_size_bytes('-.kb');
SELECT pg_size_bytes('-. kb');
SELECT pg_size_bytes('.+912');
SELECT pg_size_bytes('+912+ kB');
SELECT pg_size_bytes('++123 kB');"
`;

exports[`kitchen sink upstream upstream/dbsize.sql 2`] = `
"SELECT size,
pg_size_pretty(size),
pg_size_pretty((-1) * size) FROM (VALUES (10::bigint), (1000::bigint), (1000000::bigint), (1000000000::bigint), (1000000000000::bigint), (1000000000000000::bigint)) AS x(size);
SELECT size,
pg_size_pretty(size),
pg_size_pretty((-1) * size) FROM (VALUES (10::numeric), (1000::numeric), (1000000::numeric), (1000000000::numeric), (1000000000000::numeric), (1000000000000000::numeric), (10.5::numeric), (1000.5::numeric), (1000000.5::numeric), (1000000000.5::numeric), (1000000000000.5::numeric), (1000000000000000.5::numeric)) AS x(size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('1'), ('123bytes'), ('1kB'), ('1MB'), (' 1 GB'), ('1.5 GB '), ('1TB'), ('3000 TB'), ('1e6 MB')) AS x(size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('1'), ('123bYteS'), ('1kb'), ('1mb'), (' 1 Gb'), ('1.5 gB '), ('1tb'), ('3000 tb'), ('1e6 mb')) AS x(size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('-1'), ('-123bytes'), ('-1kb'), ('-1mb'), (' -1 Gb'), ('-1.5 gB '), ('-1tb'), ('-3000 TB'), ('-10e-1 MB')) AS x(size);
SELECT size,
pg_size_bytes(size) FROM (VALUES ('-1.'), ('-1.kb'), ('-1. kb'), ('-0. gb'), ('-.1'), ('-.1kb'), ('-.1 kb'), ('-.0 gb')) AS x(size);
SELECT pg_size_bytes('1 AB');
SELECT pg_size_bytes('1 AB A');
SELECT pg_size_bytes('1 AB A    ');
SELECT pg_size_bytes('9223372036854775807.9');
SELECT pg_size_bytes('1e100');
SELECT pg_size_bytes('1e1000000000000000000');
SELECT pg_size_bytes('1 byte');
SELECT pg_size_bytes('');
SELECT pg_size_bytes('kb');
SELECT pg_size_bytes('..');
SELECT pg_size_bytes('-.');
SELECT pg_size_bytes('-.kb');
SELECT pg_size_bytes('-. kb');
SELECT pg_size_bytes('.+912');
SELECT pg_size_bytes('+912+ kB');
SELECT pg_size_bytes('++123 kB');"
`;

exports[`kitchen sink upstream upstream/delete.sql 1`] = `
"CREATE TABLE delete_test (
id serial PRIMARY KEY,
a int,
b text
);
INSERT INTO delete_test (a) VALUES (10);
INSERT INTO delete_test (a, b) VALUES (50, repeat('x', 10000));
INSERT INTO delete_test (a) VALUES (100);
DELETE FROM delete_test AS dt WHERE dt.a > 75;
DELETE FROM delete_test AS dt WHERE delete_test.a > 25;
SELECT id,
a,
char_length(b) FROM delete_test;
DELETE FROM delete_test WHERE a > 25;
SELECT id,
a,
char_length(b) FROM delete_test;
DROP TABLE delete_test;"
`;

exports[`kitchen sink upstream upstream/delete.sql 2`] = `
"CREATE TABLE delete_test (
id serial PRIMARY KEY,
a int,
b text
);
INSERT INTO delete_test ( a ) VALUES (10);
INSERT INTO delete_test ( a, b ) VALUES (50, repeat('x', 10000));
INSERT INTO delete_test ( a ) VALUES (100);
DELETE FROM delete_test AS dt WHERE dt.a > 75;
DELETE FROM delete_test AS dt WHERE delete_test.a > 25;
SELECT id,
a,
char_length(b) FROM delete_test;
DELETE FROM delete_test WHERE a > 25;
SELECT id,
a,
char_length(b) FROM delete_test;
DROP TABLE delete_test;"
`;

exports[`kitchen sink upstream upstream/float4.sql 1`] = `
"CREATE TABLE float4_tbl (
f1 float4
);
INSERT INTO float4_tbl (f1) VALUES ('    0.0');
INSERT INTO float4_tbl (f1) VALUES ('1004.30   ');
INSERT INTO float4_tbl (f1) VALUES ('     -34.84    ');
INSERT INTO float4_tbl (f1) VALUES ('1.2345678901234e+20');
INSERT INTO float4_tbl (f1) VALUES ('1.2345678901234e-20');
INSERT INTO float4_tbl (f1) VALUES ('10e70');
INSERT INTO float4_tbl (f1) VALUES ('-10e70');
INSERT INTO float4_tbl (f1) VALUES ('10e-70');
INSERT INTO float4_tbl (f1) VALUES ('-10e-70');
INSERT INTO float4_tbl (f1) VALUES ('');
INSERT INTO float4_tbl (f1) VALUES ('       ');
INSERT INTO float4_tbl (f1) VALUES ('xyz');
INSERT INTO float4_tbl (f1) VALUES ('5.0.0');
INSERT INTO float4_tbl (f1) VALUES ('5 . 0');
INSERT INTO float4_tbl (f1) VALUES ('5.   0');
INSERT INTO float4_tbl (f1) VALUES ('     - 3.0');
INSERT INTO float4_tbl (f1) VALUES ('123            5');
SELECT 'NaN'::float4;
SELECT 'nan'::float4;
SELECT '   NAN  '::float4;
SELECT 'infinity'::float4;
SELECT '          -INFINiTY   '::float4;
SELECT 'N A N'::float4;
SELECT 'NaN x'::float4;
SELECT ' INFINITY    x'::float4;
SELECT 'Infinity'::float4 + 100.0;
SELECT 'Infinity'::float4 / 'Infinity'::float4;
SELECT 'nan'::float4 / 'nan'::float4;
SELECT 'nan'::numeric::float4;
SELECT '' AS five,
* FROM float4_tbl;
SELECT '' AS four,
f.* FROM float4_tbl AS f WHERE f.f1 <> '1004.3';
SELECT '' AS one,
f.* FROM float4_tbl AS f WHERE f.f1 = '1004.3';
SELECT '' AS three,
f.* FROM float4_tbl AS f WHERE '1004.3' > f.f1;
SELECT '' AS three,
f.* FROM float4_tbl AS f WHERE f.f1 < '1004.3';
SELECT '' AS four,
f.* FROM float4_tbl AS f WHERE '1004.3' >= f.f1;
SELECT '' AS four,
f.* FROM float4_tbl AS f WHERE f.f1 <= '1004.3';
SELECT '' AS three,
f.f1,
f.f1 * '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 + '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 / '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 - '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS bad,
f.f1 / '0.0' FROM float4_tbl AS f;
SELECT '' AS five,
* FROM float4_tbl;
SELECT '' AS five,
f.f1,
@f.f1 AS abs_f1 FROM float4_tbl AS f;
UPDATE float4_tbl SET f1 = float4_tbl.f1 * '-1' WHERE float4_tbl.f1 > '0.0';
SELECT '' AS five,
* FROM float4_tbl;"
`;

exports[`kitchen sink upstream upstream/float4.sql 2`] = `
"CREATE TABLE float4_tbl (
f1 float4
);
INSERT INTO float4_tbl ( f1 ) VALUES ('    0.0');
INSERT INTO float4_tbl ( f1 ) VALUES ('1004.30   ');
INSERT INTO float4_tbl ( f1 ) VALUES ('     -34.84    ');
INSERT INTO float4_tbl ( f1 ) VALUES ('1.2345678901234e+20');
INSERT INTO float4_tbl ( f1 ) VALUES ('1.2345678901234e-20');
INSERT INTO float4_tbl ( f1 ) VALUES ('10e70');
INSERT INTO float4_tbl ( f1 ) VALUES ('-10e70');
INSERT INTO float4_tbl ( f1 ) VALUES ('10e-70');
INSERT INTO float4_tbl ( f1 ) VALUES ('-10e-70');
INSERT INTO float4_tbl ( f1 ) VALUES ('');
INSERT INTO float4_tbl ( f1 ) VALUES ('       ');
INSERT INTO float4_tbl ( f1 ) VALUES ('xyz');
INSERT INTO float4_tbl ( f1 ) VALUES ('5.0.0');
INSERT INTO float4_tbl ( f1 ) VALUES ('5 . 0');
INSERT INTO float4_tbl ( f1 ) VALUES ('5.   0');
INSERT INTO float4_tbl ( f1 ) VALUES ('     - 3.0');
INSERT INTO float4_tbl ( f1 ) VALUES ('123            5');
SELECT 'NaN'::float4;
SELECT 'nan'::float4;
SELECT '   NAN  '::float4;
SELECT 'infinity'::float4;
SELECT '          -INFINiTY   '::float4;
SELECT 'N A N'::float4;
SELECT 'NaN x'::float4;
SELECT ' INFINITY    x'::float4;
SELECT 'Infinity'::float4 + 100.0;
SELECT 'Infinity'::float4 / 'Infinity'::float4;
SELECT 'nan'::float4 / 'nan'::float4;
SELECT 'nan'::numeric::float4;
SELECT '' AS five,
* FROM float4_tbl;
SELECT '' AS four,
f.* FROM float4_tbl AS f WHERE f.f1 <> '1004.3';
SELECT '' AS one,
f.* FROM float4_tbl AS f WHERE f.f1 = '1004.3';
SELECT '' AS three,
f.* FROM float4_tbl AS f WHERE '1004.3' > f.f1;
SELECT '' AS three,
f.* FROM float4_tbl AS f WHERE f.f1 < '1004.3';
SELECT '' AS four,
f.* FROM float4_tbl AS f WHERE '1004.3' >= f.f1;
SELECT '' AS four,
f.* FROM float4_tbl AS f WHERE f.f1 <= '1004.3';
SELECT '' AS three,
f.f1,
f.f1 * '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 + '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 / '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 - '-10' AS x FROM float4_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS bad,
f.f1 / '0.0' FROM float4_tbl AS f;
SELECT '' AS five,
* FROM float4_tbl;
SELECT '' AS five,
f.f1,
@f.f1 AS abs_f1 FROM float4_tbl AS f;
UPDATE float4_tbl SET f1 = float4_tbl.f1 * '-1' WHERE float4_tbl.f1 > '0.0';
SELECT '' AS five,
* FROM float4_tbl;"
`;

exports[`kitchen sink upstream upstream/float8.sql 1`] = `
"CREATE TABLE float8_tbl (
f1 float8
);
INSERT INTO float8_tbl (f1) VALUES ('    0.0   ');
INSERT INTO float8_tbl (f1) VALUES ('1004.30  ');
INSERT INTO float8_tbl (f1) VALUES ('   -34.84');
INSERT INTO float8_tbl (f1) VALUES ('1.2345678901234e+200');
INSERT INTO float8_tbl (f1) VALUES ('1.2345678901234e-200');
SELECT '10e400'::float8;
SELECT '-10e400'::float8;
SELECT '10e-400'::float8;
SELECT '-10e-400'::float8;
INSERT INTO float8_tbl (f1) VALUES ('');
INSERT INTO float8_tbl (f1) VALUES ('     ');
INSERT INTO float8_tbl (f1) VALUES ('xyz');
INSERT INTO float8_tbl (f1) VALUES ('5.0.0');
INSERT INTO float8_tbl (f1) VALUES ('5 . 0');
INSERT INTO float8_tbl (f1) VALUES ('5.   0');
INSERT INTO float8_tbl (f1) VALUES ('    - 3');
INSERT INTO float8_tbl (f1) VALUES ('123           5');
SELECT 'NaN'::float8;
SELECT 'nan'::float8;
SELECT '   NAN  '::float8;
SELECT 'infinity'::float8;
SELECT '          -INFINiTY   '::float8;
SELECT 'N A N'::float8;
SELECT 'NaN x'::float8;
SELECT ' INFINITY    x'::float8;
SELECT 'Infinity'::float8 + 100.0;
SELECT 'Infinity'::float8 / 'Infinity'::float8;
SELECT 'nan'::float8 / 'nan'::float8;
SELECT 'nan'::numeric::float8;
SELECT '' AS five,
* FROM float8_tbl;
SELECT '' AS four,
f.* FROM float8_tbl AS f WHERE f.f1 <> '1004.3';
SELECT '' AS one,
f.* FROM float8_tbl AS f WHERE f.f1 = '1004.3';
SELECT '' AS three,
f.* FROM float8_tbl AS f WHERE '1004.3' > f.f1;
SELECT '' AS three,
f.* FROM float8_tbl AS f WHERE f.f1 < '1004.3';
SELECT '' AS four,
f.* FROM float8_tbl AS f WHERE '1004.3' >= f.f1;
SELECT '' AS four,
f.* FROM float8_tbl AS f WHERE f.f1 <= '1004.3';
SELECT '' AS three,
f.f1,
f.f1 * '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 + '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 / '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 - '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS one,
f.f1 ^ '2.0' AS square_f1 FROM float8_tbl AS f WHERE f.f1 = '1004.3';
SELECT '' AS five,
f.f1,
@f.f1 AS abs_f1 FROM float8_tbl AS f;
SELECT '' AS five,
f.f1,
trunc(f.f1) AS trunc_f1 FROM float8_tbl AS f;
SELECT '' AS five,
f.f1,
round(f.f1) AS round_f1 FROM float8_tbl AS f;
SELECT ceil(f1) AS ceil_f1 FROM float8_tbl AS f;
SELECT ceiling(f1) AS ceiling_f1 FROM float8_tbl AS f;
SELECT floor(f1) AS floor_f1 FROM float8_tbl AS f;
SELECT sign(f1) AS sign_f1 FROM float8_tbl AS f;
SELECT sqrt('64'::float8) AS eight;
SELECT |/'64'::float8 AS eight;
SELECT '' AS three,
f.f1,
|/f.f1 AS sqrt_f1 FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT power('144'::float8, '0.5'::float8);
SELECT '' AS three,
f.f1,
exp(ln(f.f1)) AS exp_ln_f1 FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT ||/'27'::float8 AS three;
SELECT '' AS five,
f.f1,
||/f.f1 AS cbrt_f1 FROM float8_tbl AS f;
SELECT '' AS five,
* FROM float8_tbl;
UPDATE float8_tbl SET f1 = float8_tbl.f1 * '-1' WHERE float8_tbl.f1 > '0.0';
SELECT '' AS bad,
f.f1 * '1e200' FROM float8_tbl AS f;
SELECT '' AS bad,
f.f1 ^ '1e200' FROM float8_tbl AS f;
SELECT (((0 ^ 0) + (0 ^ 1)) + (0 ^ 0.0)) + (0 ^ 0.5);
SELECT '' AS bad,
ln(f.f1) FROM float8_tbl AS f WHERE f.f1 = '0.0';
SELECT '' AS bad,
ln(f.f1) FROM float8_tbl AS f WHERE f.f1 < '0.0';
SELECT '' AS bad,
exp(f.f1) FROM float8_tbl AS f;
SELECT '' AS bad,
f.f1 / '0.0' FROM float8_tbl AS f;
SELECT '' AS five,
* FROM float8_tbl;
INSERT INTO float8_tbl (f1) VALUES ('10e400');
INSERT INTO float8_tbl (f1) VALUES ('-10e400');
INSERT INTO float8_tbl (f1) VALUES ('10e-400');
INSERT INTO float8_tbl (f1) VALUES ('-10e-400');
DELETE FROM float8_tbl;
INSERT INTO float8_tbl (f1) VALUES ('0.0');
INSERT INTO float8_tbl (f1) VALUES ('-34.84');
INSERT INTO float8_tbl (f1) VALUES ('-1004.30');
INSERT INTO float8_tbl (f1) VALUES ('-1.2345678901234e+200');
INSERT INTO float8_tbl (f1) VALUES ('-1.2345678901234e-200');
SELECT '' AS five,
* FROM float8_tbl;
SET extra_float_digits = 3;
SELECT x,
sind(x),
sind(x) IN ( (-1), (-0.5), 0, 0.5, 1 ) AS sind_exact FROM (VALUES (0), (30), (90), (150), (180), (210), (270), (330), (360)) AS t (x);
SELECT x,
cosd(x),
cosd(x) IN ( (-1), (-0.5), 0, 0.5, 1 ) AS cosd_exact FROM (VALUES (0), (60), (90), (120), (180), (240), (270), (300), (360)) AS t (x);
SELECT x,
tand(x),
tand(x) IN ( '-Infinity'::float8, (-1), 0, 1, 'Infinity'::float8 ) AS tand_exact,
cotd(x),
cotd(x) IN ( '-Infinity'::float8, (-1), 0, 1, 'Infinity'::float8 ) AS cotd_exact FROM (VALUES (0), (45), (90), (135), (180), (225), (270), (315), (360)) AS t (x);
SELECT x,
asind(x),
asind(x) IN ( (-90), (-30), 0, 30, 90 ) AS asind_exact,
acosd(x),
acosd(x) IN ( 0, 60, 90, 120, 180 ) AS acosd_exact FROM (VALUES ((-1)), ((-0.5)), (0), (0.5), (1)) AS t (x);
SELECT x,
atand(x),
atand(x) IN ( (-90), (-45), 0, 45, 90 ) AS atand_exact FROM (VALUES ('-Infinity'::float8), ((-1)), (0), (1), ('Infinity'::float8)) AS t (x);
SELECT x,
y,
atan2d(y, x),
atan2d(y, x) IN ( (-90), 0, 90, 180 ) AS atan2d_exact FROM (SELECT 10 * cosd(a),
10 * sind(a) FROM generate_series(0, 360, 90) AS t (a)) AS t (x, y);
RESET extra_float_digits;"
`;

exports[`kitchen sink upstream upstream/float8.sql 2`] = `
"CREATE TABLE float8_tbl (
f1 float8
);
INSERT INTO float8_tbl ( f1 ) VALUES ('    0.0   ');
INSERT INTO float8_tbl ( f1 ) VALUES ('1004.30  ');
INSERT INTO float8_tbl ( f1 ) VALUES ('   -34.84');
INSERT INTO float8_tbl ( f1 ) VALUES ('1.2345678901234e+200');
INSERT INTO float8_tbl ( f1 ) VALUES ('1.2345678901234e-200');
SELECT '10e400'::float8;
SELECT '-10e400'::float8;
SELECT '10e-400'::float8;
SELECT '-10e-400'::float8;
INSERT INTO float8_tbl ( f1 ) VALUES ('');
INSERT INTO float8_tbl ( f1 ) VALUES ('     ');
INSERT INTO float8_tbl ( f1 ) VALUES ('xyz');
INSERT INTO float8_tbl ( f1 ) VALUES ('5.0.0');
INSERT INTO float8_tbl ( f1 ) VALUES ('5 . 0');
INSERT INTO float8_tbl ( f1 ) VALUES ('5.   0');
INSERT INTO float8_tbl ( f1 ) VALUES ('    - 3');
INSERT INTO float8_tbl ( f1 ) VALUES ('123           5');
SELECT 'NaN'::float8;
SELECT 'nan'::float8;
SELECT '   NAN  '::float8;
SELECT 'infinity'::float8;
SELECT '          -INFINiTY   '::float8;
SELECT 'N A N'::float8;
SELECT 'NaN x'::float8;
SELECT ' INFINITY    x'::float8;
SELECT 'Infinity'::float8 + 100.0;
SELECT 'Infinity'::float8 / 'Infinity'::float8;
SELECT 'nan'::float8 / 'nan'::float8;
SELECT 'nan'::numeric::float8;
SELECT '' AS five,
* FROM float8_tbl;
SELECT '' AS four,
f.* FROM float8_tbl AS f WHERE f.f1 <> '1004.3';
SELECT '' AS one,
f.* FROM float8_tbl AS f WHERE f.f1 = '1004.3';
SELECT '' AS three,
f.* FROM float8_tbl AS f WHERE '1004.3' > f.f1;
SELECT '' AS three,
f.* FROM float8_tbl AS f WHERE f.f1 < '1004.3';
SELECT '' AS four,
f.* FROM float8_tbl AS f WHERE '1004.3' >= f.f1;
SELECT '' AS four,
f.* FROM float8_tbl AS f WHERE f.f1 <= '1004.3';
SELECT '' AS three,
f.f1,
f.f1 * '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 + '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 / '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS three,
f.f1,
f.f1 - '-10' AS x FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT '' AS one,
f.f1 ^ '2.0' AS square_f1 FROM float8_tbl AS f WHERE f.f1 = '1004.3';
SELECT '' AS five,
f.f1,
@f.f1 AS abs_f1 FROM float8_tbl AS f;
SELECT '' AS five,
f.f1,
trunc(f.f1) AS trunc_f1 FROM float8_tbl AS f;
SELECT '' AS five,
f.f1,
round(f.f1) AS round_f1 FROM float8_tbl AS f;
SELECT ceil(f1) AS ceil_f1 FROM float8_tbl AS f;
SELECT ceiling(f1) AS ceiling_f1 FROM float8_tbl AS f;
SELECT floor(f1) AS floor_f1 FROM float8_tbl AS f;
SELECT sign(f1) AS sign_f1 FROM float8_tbl AS f;
SELECT sqrt('64'::float8) AS eight;
SELECT |/'64'::float8 AS eight;
SELECT '' AS three,
f.f1,
|/f.f1 AS sqrt_f1 FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT power('144'::float8, '0.5'::float8);
SELECT '' AS three,
f.f1,
exp(ln(f.f1)) AS exp_ln_f1 FROM float8_tbl AS f WHERE f.f1 > '0.0';
SELECT ||/'27'::float8 AS three;
SELECT '' AS five,
f.f1,
||/f.f1 AS cbrt_f1 FROM float8_tbl AS f;
SELECT '' AS five,
* FROM float8_tbl;
UPDATE float8_tbl SET f1 = float8_tbl.f1 * '-1' WHERE float8_tbl.f1 > '0.0';
SELECT '' AS bad,
f.f1 * '1e200' FROM float8_tbl AS f;
SELECT '' AS bad,
f.f1 ^ '1e200' FROM float8_tbl AS f;
SELECT (((0 ^ 0) + (0 ^ 1)) + (0 ^ 0.0)) + (0 ^ 0.5);
SELECT '' AS bad,
ln(f.f1) FROM float8_tbl AS f WHERE f.f1 = '0.0';
SELECT '' AS bad,
ln(f.f1) FROM float8_tbl AS f WHERE f.f1 < '0.0';
SELECT '' AS bad,
exp(f.f1) FROM float8_tbl AS f;
SELECT '' AS bad,
f.f1 / '0.0' FROM float8_tbl AS f;
SELECT '' AS five,
* FROM float8_tbl;
INSERT INTO float8_tbl ( f1 ) VALUES ('10e400');
INSERT INTO float8_tbl ( f1 ) VALUES ('-10e400');
INSERT INTO float8_tbl ( f1 ) VALUES ('10e-400');
INSERT INTO float8_tbl ( f1 ) VALUES ('-10e-400');
DELETE FROM float8_tbl;
INSERT INTO float8_tbl ( f1 ) VALUES ('0.0');
INSERT INTO float8_tbl ( f1 ) VALUES ('-34.84');
INSERT INTO float8_tbl ( f1 ) VALUES ('-1004.30');
INSERT INTO float8_tbl ( f1 ) VALUES ('-1.2345678901234e+200');
INSERT INTO float8_tbl ( f1 ) VALUES ('-1.2345678901234e-200');
SELECT '' AS five,
* FROM float8_tbl;
SET extra_float_digits = 3;
SELECT x,
sind(x),
sind(x) IN ((-1), (-0.5), 0, 0.5, 1) AS sind_exact FROM (VALUES (0), (30), (90), (150), (180), (210), (270), (330), (360)) AS t(x);
SELECT x,
cosd(x),
cosd(x) IN ((-1), (-0.5), 0, 0.5, 1) AS cosd_exact FROM (VALUES (0), (60), (90), (120), (180), (240), (270), (300), (360)) AS t(x);
SELECT x,
tand(x),
tand(x) IN ('-Infinity'::float8, (-1), 0, 1, 'Infinity'::float8) AS tand_exact,
cotd(x),
cotd(x) IN ('-Infinity'::float8, (-1), 0, 1, 'Infinity'::float8) AS cotd_exact FROM (VALUES (0), (45), (90), (135), (180), (225), (270), (315), (360)) AS t(x);
SELECT x,
asind(x),
asind(x) IN ((-90), (-30), 0, 30, 90) AS asind_exact,
acosd(x),
acosd(x) IN (0, 60, 90, 120, 180) AS acosd_exact FROM (VALUES ((-1)), ((-0.5)), (0), (0.5), (1)) AS t(x);
SELECT x,
atand(x),
atand(x) IN ((-90), (-45), 0, 45, 90) AS atand_exact FROM (VALUES ('-Infinity'::float8), ((-1)), (0), (1), ('Infinity'::float8)) AS t(x);
SELECT x,
y,
atan2d(y, x),
atan2d(y, x) IN ((-90), 0, 90, 180) AS atan2d_exact FROM (SELECT 10 * cosd(a),
10 * sind(a) FROM generate_series(0, 360, 90) AS t(a)) AS t(x, y);
RESET extra_float_digits;"
`;

exports[`kitchen sink upstream upstream/geometry.sql 1`] = `
"SET extra_float_digits = -3;
SELECT '' AS four,
center(f1) AS center FROM box_tbl;
SELECT '' AS four,
@@f1 AS center FROM box_tbl;
SELECT '' AS six,
point(f1) AS center FROM circle_tbl;
SELECT '' AS six,
@@f1 AS center FROM circle_tbl;
SELECT '' AS two,
@@f1 AS center FROM polygon_tbl WHERE (#f1) > 2;
SELECT '' AS two,
p1.f1 FROM point_tbl AS p1 WHERE ishorizontal(p1.f1, '(0,0)'::point);
SELECT '' AS two,
p1.f1 FROM point_tbl AS p1 WHERE p1.f1 ?- '(0,0)'::point;
SELECT '' AS one,
p1.f1 FROM point_tbl AS p1 WHERE isvertical(p1.f1, '(5.1,34.5)'::point);
SELECT '' AS one,
p1.f1 FROM point_tbl AS p1 WHERE p1.f1 ?| '(5.1,34.5)'::point;
SELECT '' AS count,
p.f1,
l.s,
l.s # p.f1 AS intersection FROM lseg_tbl AS l,
point_tbl AS p;
SELECT '' AS thirty,
p.f1,
l.s,
p.f1 ## l.s AS closest FROM lseg_tbl AS l,
point_tbl AS p;
SELECT '' AS six,
box(f1) AS box FROM circle_tbl;
SELECT '' AS twentyfour,
b.f1 + p.f1 AS translation FROM box_tbl AS b,
point_tbl AS p;
SELECT '' AS twentyfour,
b.f1 - p.f1 AS translation FROM box_tbl AS b,
point_tbl AS p;
SELECT '' AS twentyfour,
b.f1 * p.f1 AS rotation FROM box_tbl AS b,
point_tbl AS p;
SELECT '' AS twenty,
b.f1 / p.f1 AS rotation FROM box_tbl AS b,
point_tbl AS p WHERE (p.f1 <-> '(0,0)'::point) >= 1;
SELECT f1::box FROM point_tbl;
SELECT bound_box(a.f1, b.f1) FROM box_tbl AS a,
box_tbl AS b;
SELECT '' AS eight,
npoints(f1) AS npoints,
f1 AS path FROM path_tbl;
SELECT '' AS four,
path(f1) FROM polygon_tbl;
SELECT '' AS eight,
p1.f1 + '(10,10)'::point AS dist_add FROM path_tbl AS p1;
SELECT '' AS eight,
p1.f1 * '(2,-1)'::point AS dist_mul FROM path_tbl AS p1;
SELECT '' AS twentyfour,
p.f1,
poly.f1,
poly.f1 @> p.f1 AS contains FROM polygon_tbl AS poly,
point_tbl AS p;
SELECT '' AS twentyfour,
p.f1,
poly.f1,
p.f1 <@ poly.f1 AS contained FROM polygon_tbl AS poly,
point_tbl AS p;
SELECT '' AS four,
npoints(f1) AS npoints,
f1 AS polygon FROM polygon_tbl;
SELECT '' AS four,
polygon(f1) FROM box_tbl;
SELECT '' AS four,
polygon(f1) FROM path_tbl WHERE isclosed(f1);
SELECT '' AS four,
f1 AS open_path,
polygon(pclose(f1)) AS polygon FROM path_tbl WHERE isopen(f1);
SELECT '' AS six,
polygon(f1) FROM circle_tbl;
SELECT '' AS six,
polygon(8, f1) FROM circle_tbl;
SELECT '' AS six,
circle(f1, 50.0) FROM point_tbl;
SELECT '' AS four,
circle(f1) FROM box_tbl;
SELECT '' AS two,
circle(f1) FROM polygon_tbl WHERE (#f1) >= 3;
SELECT '' AS twentyfour,
c1.f1 AS circle,
p1.f1 AS point,
p1.f1 <-> c1.f1 AS distance FROM circle_tbl AS c1,
point_tbl AS p1 WHERE (p1.f1 <-> c1.f1) > 0 ORDER BY distance,
area(c1.f1),
(p1.f1)[0];"
`;

exports[`kitchen sink upstream upstream/geometry.sql 2`] = `
"SET extra_float_digits = -3;
SELECT '' AS four,
center(f1) AS center FROM box_tbl;
SELECT '' AS four,
@@f1 AS center FROM box_tbl;
SELECT '' AS six,
point(f1) AS center FROM circle_tbl;
SELECT '' AS six,
@@f1 AS center FROM circle_tbl;
SELECT '' AS two,
@@f1 AS center FROM polygon_tbl WHERE (#f1) > 2;
SELECT '' AS two,
p1.f1 FROM point_tbl AS p1 WHERE ishorizontal(p1.f1, '(0,0)'::point);
SELECT '' AS two,
p1.f1 FROM point_tbl AS p1 WHERE p1.f1 ?- '(0,0)'::point;
SELECT '' AS one,
p1.f1 FROM point_tbl AS p1 WHERE isvertical(p1.f1, '(5.1,34.5)'::point);
SELECT '' AS one,
p1.f1 FROM point_tbl AS p1 WHERE p1.f1 ?| '(5.1,34.5)'::point;
SELECT '' AS count,
p.f1,
l.s,
l.s # p.f1 AS intersection FROM lseg_tbl AS l,
point_tbl AS p;
SELECT '' AS thirty,
p.f1,
l.s,
p.f1 ## l.s AS closest FROM lseg_tbl AS l,
point_tbl AS p;
SELECT '' AS six,
box(f1) AS box FROM circle_tbl;
SELECT '' AS twentyfour,
b.f1 + p.f1 AS translation FROM box_tbl AS b,
point_tbl AS p;
SELECT '' AS twentyfour,
b.f1 - p.f1 AS translation FROM box_tbl AS b,
point_tbl AS p;
SELECT '' AS twentyfour,
b.f1 * p.f1 AS rotation FROM box_tbl AS b,
point_tbl AS p;
SELECT '' AS twenty,
b.f1 / p.f1 AS rotation FROM box_tbl AS b,
point_tbl AS p WHERE (p.f1 <-> '(0,0)'::point) >= 1;
SELECT f1::box FROM point_tbl;
SELECT bound_box(a.f1, b.f1) FROM box_tbl AS a,
box_tbl AS b;
SELECT '' AS eight,
npoints(f1) AS npoints,
f1 AS path FROM path_tbl;
SELECT '' AS four,
path(f1) FROM polygon_tbl;
SELECT '' AS eight,
p1.f1 + '(10,10)'::point AS dist_add FROM path_tbl AS p1;
SELECT '' AS eight,
p1.f1 * '(2,-1)'::point AS dist_mul FROM path_tbl AS p1;
SELECT '' AS twentyfour,
p.f1,
poly.f1,
poly.f1 @> p.f1 AS contains FROM polygon_tbl AS poly,
point_tbl AS p;
SELECT '' AS twentyfour,
p.f1,
poly.f1,
p.f1 <@ poly.f1 AS contained FROM polygon_tbl AS poly,
point_tbl AS p;
SELECT '' AS four,
npoints(f1) AS npoints,
f1 AS polygon FROM polygon_tbl;
SELECT '' AS four,
polygon(f1) FROM box_tbl;
SELECT '' AS four,
polygon(f1) FROM path_tbl WHERE isclosed(f1);
SELECT '' AS four,
f1 AS open_path,
polygon(pclose(f1)) AS polygon FROM path_tbl WHERE isopen(f1);
SELECT '' AS six,
polygon(f1) FROM circle_tbl;
SELECT '' AS six,
polygon(8, f1) FROM circle_tbl;
SELECT '' AS six,
circle(f1, 50.0) FROM point_tbl;
SELECT '' AS four,
circle(f1) FROM box_tbl;
SELECT '' AS two,
circle(f1) FROM polygon_tbl WHERE (#f1) >= 3;
SELECT '' AS twentyfour,
c1.f1 AS circle,
p1.f1 AS point,
p1.f1 <-> c1.f1 AS distance FROM circle_tbl AS c1,
point_tbl AS p1 WHERE (p1.f1 <-> c1.f1) > 0 ORDER BY distance,
area(c1.f1),
(p1.f1)[0];"
`;

exports[`kitchen sink upstream upstream/hash_index.sql 1`] = `
"SELECT * FROM hash_i4_heap WHERE hash_i4_heap.random = 843938989;
SELECT * FROM hash_i4_heap WHERE hash_i4_heap.random = 66766766;
SELECT * FROM hash_name_heap WHERE hash_name_heap.random = '1505703298'::name;
SELECT * FROM hash_name_heap WHERE hash_name_heap.random = '7777777'::name;
SELECT * FROM hash_txt_heap WHERE hash_txt_heap.random = '1351610853'::text;
SELECT * FROM hash_txt_heap WHERE hash_txt_heap.random = '111111112222222233333333'::text;
SELECT * FROM hash_f8_heap WHERE hash_f8_heap.random = '444705537'::float8;
SELECT * FROM hash_f8_heap WHERE hash_f8_heap.random = '88888888'::float8;
UPDATE hash_i4_heap SET random = 1 WHERE hash_i4_heap.seqno = 1492;
SELECT h.seqno AS i1492,
h.random AS i1 FROM hash_i4_heap AS h WHERE h.random = 1;
UPDATE hash_i4_heap SET seqno = 20000 WHERE hash_i4_heap.random = 1492795354;
SELECT h.seqno AS i20000 FROM hash_i4_heap AS h WHERE h.random = 1492795354;
UPDATE hash_name_heap SET random = '0123456789abcdef'::name WHERE hash_name_heap.seqno = 6543;
SELECT h.seqno AS i6543,
h.random AS c0_to_f FROM hash_name_heap AS h WHERE h.random = '0123456789abcdef'::name;
UPDATE hash_name_heap SET seqno = 20000 WHERE hash_name_heap.random = '76652222'::name;
SELECT h.seqno AS emptyset FROM hash_name_heap AS h WHERE h.random = '76652222'::name;
UPDATE hash_txt_heap SET random = '0123456789abcdefghijklmnop'::text WHERE hash_txt_heap.seqno = 4002;
SELECT h.seqno AS i4002,
h.random AS c0_to_p FROM hash_txt_heap AS h WHERE h.random = '0123456789abcdefghijklmnop'::text;
UPDATE hash_txt_heap SET seqno = 20000 WHERE hash_txt_heap.random = '959363399'::text;
SELECT h.seqno AS t20000 FROM hash_txt_heap AS h WHERE h.random = '959363399'::text;
UPDATE hash_f8_heap SET random = '-1234.1234'::float8 WHERE hash_f8_heap.seqno = 8906;
SELECT h.seqno AS i8096,
h.random AS f1234_1234 FROM hash_f8_heap AS h WHERE h.random = '-1234.1234'::float8;
UPDATE hash_f8_heap SET seqno = 20000 WHERE hash_f8_heap.random = '488912369'::float8;
SELECT h.seqno AS f20000 FROM hash_f8_heap AS h WHERE h.random = '488912369'::float8;"
`;

exports[`kitchen sink upstream upstream/hash_index.sql 2`] = `
"SELECT * FROM hash_i4_heap WHERE hash_i4_heap.random = 843938989;
SELECT * FROM hash_i4_heap WHERE hash_i4_heap.random = 66766766;
SELECT * FROM hash_name_heap WHERE hash_name_heap.random = '1505703298'::name;
SELECT * FROM hash_name_heap WHERE hash_name_heap.random = '7777777'::name;
SELECT * FROM hash_txt_heap WHERE hash_txt_heap.random = '1351610853'::text;
SELECT * FROM hash_txt_heap WHERE hash_txt_heap.random = '111111112222222233333333'::text;
SELECT * FROM hash_f8_heap WHERE hash_f8_heap.random = '444705537'::float8;
SELECT * FROM hash_f8_heap WHERE hash_f8_heap.random = '88888888'::float8;
UPDATE hash_i4_heap SET random = 1 WHERE hash_i4_heap.seqno = 1492;
SELECT h.seqno AS i1492,
h.random AS i1 FROM hash_i4_heap AS h WHERE h.random = 1;
UPDATE hash_i4_heap SET seqno = 20000 WHERE hash_i4_heap.random = 1492795354;
SELECT h.seqno AS i20000 FROM hash_i4_heap AS h WHERE h.random = 1492795354;
UPDATE hash_name_heap SET random = '0123456789abcdef'::name WHERE hash_name_heap.seqno = 6543;
SELECT h.seqno AS i6543,
h.random AS c0_to_f FROM hash_name_heap AS h WHERE h.random = '0123456789abcdef'::name;
UPDATE hash_name_heap SET seqno = 20000 WHERE hash_name_heap.random = '76652222'::name;
SELECT h.seqno AS emptyset FROM hash_name_heap AS h WHERE h.random = '76652222'::name;
UPDATE hash_txt_heap SET random = '0123456789abcdefghijklmnop'::text WHERE hash_txt_heap.seqno = 4002;
SELECT h.seqno AS i4002,
h.random AS c0_to_p FROM hash_txt_heap AS h WHERE h.random = '0123456789abcdefghijklmnop'::text;
UPDATE hash_txt_heap SET seqno = 20000 WHERE hash_txt_heap.random = '959363399'::text;
SELECT h.seqno AS t20000 FROM hash_txt_heap AS h WHERE h.random = '959363399'::text;
UPDATE hash_f8_heap SET random = '-1234.1234'::float8 WHERE hash_f8_heap.seqno = 8906;
SELECT h.seqno AS i8096,
h.random AS f1234_1234 FROM hash_f8_heap AS h WHERE h.random = '-1234.1234'::float8;
UPDATE hash_f8_heap SET seqno = 20000 WHERE hash_f8_heap.random = '488912369'::float8;
SELECT h.seqno AS f20000 FROM hash_f8_heap AS h WHERE h.random = '488912369'::float8;"
`;

exports[`kitchen sink upstream upstream/hs_primary_extremes.sql 1`] = `
"DROP TABLE IF EXISTS hs_extreme;
CREATE TABLE hs_extreme (
col1 int
);
CREATE OR REPLACE FUNCTION hs_subxids ( n int ) RETURNS void LANGUAGE plpgsql AS $LQLCODEZ$
BEGIN
IF n <= 0 THEN RETURN; END IF;
INSERT INTO hs_extreme VALUES (n);
PERFORM hs_subxids(n - 1);
RETURN;
EXCEPTION WHEN raise_exception THEN NULL; END;
$LQLCODEZ$;
BEGIN;
SELECT hs_subxids(257);
ROLLBACK;
BEGIN;
SELECT hs_subxids(257);
COMMIT;
SET client_min_messages = 'warning';
CREATE OR REPLACE FUNCTION hs_locks_create ( n int ) RETURNS void LANGUAGE plpgsql AS $LQLCODEZ$
BEGIN
IF n <= 0 THEN
CHECKPOINT;
RETURN;
END IF;
EXECUTE 'CREATE TABLE hs_locks_' || n::text || ' ()';
PERFORM hs_locks_create(n - 1);
RETURN;
EXCEPTION WHEN raise_exception THEN NULL; END;
$LQLCODEZ$;
CREATE OR REPLACE FUNCTION hs_locks_drop ( n int ) RETURNS void LANGUAGE plpgsql AS $LQLCODEZ$
BEGIN
IF n <= 0 THEN
CHECKPOINT;
RETURN;
END IF;
EXECUTE 'DROP TABLE IF EXISTS hs_locks_' || n::text;
PERFORM hs_locks_drop(n - 1);
RETURN;
EXCEPTION WHEN raise_exception THEN NULL; END;
$LQLCODEZ$;
BEGIN;
SELECT hs_locks_drop(257);
SELECT hs_locks_create(257);
SELECT count(*) > 257 FROM pg_locks;
ROLLBACK;
BEGIN;
SELECT hs_locks_drop(257);
SELECT hs_locks_create(257);
SELECT count(*) > 257 FROM pg_locks;
COMMIT;
SELECT hs_locks_drop(257);
SELECT pg_switch_xlog();"
`;

exports[`kitchen sink upstream upstream/hs_primary_extremes.sql 2`] = `
"DROP TABLE IF EXISTS hs_extreme;
CREATE TABLE hs_extreme (
col1 int
);
CREATE OR REPLACE FUNCTION hs_subxids ( n int ) RETURNS void LANGUAGE plpgsql AS $EOFCODE$BEGIN
IF n <= 0 THEN RETURN; END IF;
INSERT INTO hs_extreme VALUES (n);
PERFORM hs_subxids(n - 1);
RETURN;
EXCEPTION WHEN raise_exception THEN NULL; END;$EOFCODE$;
BEGIN;
SELECT hs_subxids(257);
ROLLBACK;
BEGIN;
SELECT hs_subxids(257);
COMMIT;
SET client_min_messages = 'warning';
CREATE OR REPLACE FUNCTION hs_locks_create ( n int ) RETURNS void LANGUAGE plpgsql AS $EOFCODE$BEGIN
IF n <= 0 THEN
CHECKPOINT;
RETURN;
END IF;
EXECUTE 'CREATE TABLE hs_locks_' || n::text || ' ()';
PERFORM hs_locks_create(n - 1);
RETURN;
EXCEPTION WHEN raise_exception THEN NULL; END;$EOFCODE$;
CREATE OR REPLACE FUNCTION hs_locks_drop ( n int ) RETURNS void LANGUAGE plpgsql AS $EOFCODE$BEGIN
IF n <= 0 THEN
CHECKPOINT;
RETURN;
END IF;
EXECUTE 'DROP TABLE IF EXISTS hs_locks_' || n::text;
PERFORM hs_locks_drop(n - 1);
RETURN;
EXCEPTION WHEN raise_exception THEN NULL; END;$EOFCODE$;
BEGIN;
SELECT hs_locks_drop(257);
SELECT hs_locks_create(257);
SELECT count(*) > 257 FROM pg_locks;
ROLLBACK;
BEGIN;
SELECT hs_locks_drop(257);
SELECT hs_locks_create(257);
SELECT count(*) > 257 FROM pg_locks;
COMMIT;
SELECT hs_locks_drop(257);
SELECT pg_switch_xlog();"
`;

exports[`kitchen sink upstream upstream/hs_primary_setup.sql 1`] = `
"DROP TABLE IF EXISTS hs1;
CREATE TABLE hs1 (
col1 int PRIMARY KEY
);
INSERT INTO hs1 VALUES (1);
DROP TABLE IF EXISTS hs2;
CREATE TABLE hs2 (
col1 int PRIMARY KEY
);
INSERT INTO hs2 VALUES (12);
INSERT INTO hs2 VALUES (13);
DROP TABLE IF EXISTS hs3;
CREATE TABLE hs3 (
col1 int PRIMARY KEY
);
INSERT INTO hs3 VALUES (113);
INSERT INTO hs3 VALUES (114);
INSERT INTO hs3 VALUES (115);
DROP SEQUENCE IF EXISTS hsseq;
CREATE SEQUENCE hsseq;
SELECT pg_switch_xlog();"
`;

exports[`kitchen sink upstream upstream/hs_primary_setup.sql 2`] = `
"DROP TABLE IF EXISTS hs1;
CREATE TABLE hs1 (
col1 int PRIMARY KEY
);
INSERT INTO hs1 VALUES (1);
DROP TABLE IF EXISTS hs2;
CREATE TABLE hs2 (
col1 int PRIMARY KEY
);
INSERT INTO hs2 VALUES (12);
INSERT INTO hs2 VALUES (13);
DROP TABLE IF EXISTS hs3;
CREATE TABLE hs3 (
col1 int PRIMARY KEY
);
INSERT INTO hs3 VALUES (113);
INSERT INTO hs3 VALUES (114);
INSERT INTO hs3 VALUES (115);
DROP SEQUENCE IF EXISTS hsseq;
CREATE SEQUENCE hsseq;
SELECT pg_switch_xlog();"
`;

exports[`kitchen sink upstream upstream/hs_standby_check.sql 1`] = `"SELECT CASE pg_is_in_recovery() WHEN FALSE THEN ('These tests are intended only for execution on a standby server that is reading ' || 'WAL from a server upon which the regression database is already created and into ') || 'which src/test/regress/sql/hs_primary_setup.sql has been run' ELSE 'Tests are running on a standby server during recovery' END;"`;

exports[`kitchen sink upstream upstream/hs_standby_check.sql 2`] = `"SELECT CASE pg_is_in_recovery() WHEN FALSE THEN ('These tests are intended only for execution on a standby server that is reading ' || 'WAL from a server upon which the regression database is already created and into ') || 'which src/test/regress/sql/hs_primary_setup.sql has been run' ELSE 'Tests are running on a standby server during recovery' END;"`;

exports[`kitchen sink upstream upstream/hs_standby_functions.sql 1`] = `
"SELECT txid_current();
SELECT length(txid_current_snapshot()::text) >= 4;
SELECT pg_start_backup('should fail');
SELECT pg_switch_xlog();
SELECT pg_stop_backup();
SELECT * FROM pg_prepared_xacts;
SELECT locktype,
virtualxid,
virtualtransaction,
mode,
granted FROM pg_locks WHERE virtualxid = '1/1';
SELECT pg_cancel_backend(pg_backend_pid());"
`;

exports[`kitchen sink upstream upstream/hs_standby_functions.sql 2`] = `
"SELECT txid_current();
SELECT length(txid_current_snapshot()::text) >= 4;
SELECT pg_start_backup('should fail');
SELECT pg_switch_xlog();
SELECT pg_stop_backup();
SELECT * FROM pg_prepared_xacts;
SELECT locktype,
virtualxid,
virtualtransaction,
mode,
granted FROM pg_locks WHERE virtualxid = '1/1';
SELECT pg_cancel_backend(pg_backend_pid());"
`;

exports[`kitchen sink upstream upstream/init_privs.sql 1`] = `
"SELECT count(*) > 0 FROM pg_init_privs;
GRANT SELECT ON TABLE pg_proc TO CURRENT_USER;
GRANT SELECT ( prosrc ) ON TABLE pg_proc TO CURRENT_USER;
GRANT SELECT ( rolname, rolsuper ) ON TABLE pg_authid TO CURRENT_USER;"
`;

exports[`kitchen sink upstream upstream/init_privs.sql 2`] = `
"SELECT count(*) > 0 FROM pg_init_privs;
GRANT SELECT ON TABLE pg_proc TO CURRENT_USER;
GRANT SELECT ( prosrc ) ON TABLE pg_proc TO CURRENT_USER;
GRANT SELECT ( rolname, rolsuper ) ON TABLE pg_authid TO CURRENT_USER;"
`;

exports[`kitchen sink upstream upstream/insert.sql 1`] = `
"CREATE TABLE inserttest (
col1 int4,
col2 int4 NOT NULL,
col3 text DEFAULT ('testing')
);
INSERT INTO inserttest (col1, col2, col3) VALUES (DEFAULT, DEFAULT, DEFAULT);
INSERT INTO inserttest (col2, col3) VALUES (3, DEFAULT);
INSERT INTO inserttest (col1, col2, col3) VALUES (DEFAULT, 5, DEFAULT);
INSERT INTO inserttest VALUES (DEFAULT, 5, 'test');
INSERT INTO inserttest VALUES (DEFAULT, 7);
SELECT * FROM inserttest;
INSERT INTO inserttest (col1, col2, col3) VALUES (DEFAULT, DEFAULT);
INSERT INTO inserttest (col1, col2, col3) VALUES (1, 2);
INSERT INTO inserttest (col1) VALUES (1, 2);
INSERT INTO inserttest (col1) VALUES (DEFAULT, DEFAULT);
SELECT * FROM inserttest;
INSERT INTO inserttest VALUES (10, 20, '40'), ((-1), 2, DEFAULT), ((SELECT 2), (SELECT i FROM (VALUES (3)) AS foo (i)), 'values are fun!');
SELECT * FROM inserttest;
INSERT INTO inserttest VALUES (30, 50, repeat('x', 10000));
SELECT col1,
col2,
char_length(col3) FROM inserttest;
DROP TABLE inserttest;"
`;

exports[`kitchen sink upstream upstream/insert.sql 2`] = `
"CREATE TABLE inserttest (
col1 int4,
col2 int4 NOT NULL,
col3 text DEFAULT ( 'testing' )
);
INSERT INTO inserttest ( col1, col2, col3 ) VALUES (DEFAULT, DEFAULT, DEFAULT);
INSERT INTO inserttest ( col2, col3 ) VALUES (3, DEFAULT);
INSERT INTO inserttest ( col1, col2, col3 ) VALUES (DEFAULT, 5, DEFAULT);
INSERT INTO inserttest VALUES (DEFAULT, 5, 'test');
INSERT INTO inserttest VALUES (DEFAULT, 7);
SELECT * FROM inserttest;
INSERT INTO inserttest ( col1, col2, col3 ) VALUES (DEFAULT, DEFAULT);
INSERT INTO inserttest ( col1, col2, col3 ) VALUES (1, 2);
INSERT INTO inserttest ( col1 ) VALUES (1, 2);
INSERT INTO inserttest ( col1 ) VALUES (DEFAULT, DEFAULT);
SELECT * FROM inserttest;
INSERT INTO inserttest VALUES (10, 20, '40'), ((-1), 2, DEFAULT), ((SELECT 2), (SELECT i FROM (VALUES (3)) AS foo(i)), 'values are fun!');
SELECT * FROM inserttest;
INSERT INTO inserttest VALUES (30, 50, repeat('x', 10000));
SELECT col1,
col2,
char_length(col3) FROM inserttest;
DROP TABLE inserttest;"
`;

exports[`kitchen sink upstream upstream/int2.sql 1`] = `
"CREATE TABLE int2_tbl (
f1 int2
);
INSERT INTO int2_tbl (f1) VALUES ('0   ');
INSERT INTO int2_tbl (f1) VALUES ('  1234 ');
INSERT INTO int2_tbl (f1) VALUES ('    -1234');
INSERT INTO int2_tbl (f1) VALUES ('34.5');
INSERT INTO int2_tbl (f1) VALUES ('32767');
INSERT INTO int2_tbl (f1) VALUES ('-32767');
INSERT INTO int2_tbl (f1) VALUES ('100000');
INSERT INTO int2_tbl (f1) VALUES ('asdf');
INSERT INTO int2_tbl (f1) VALUES ('    ');
INSERT INTO int2_tbl (f1) VALUES ('- 1234');
INSERT INTO int2_tbl (f1) VALUES ('4 444');
INSERT INTO int2_tbl (f1) VALUES ('123 dt');
INSERT INTO int2_tbl (f1) VALUES ('');
SELECT '' AS five,
* FROM int2_tbl;
SELECT '' AS four,
i.* FROM int2_tbl AS i WHERE i.f1 <> '0'::int2;
SELECT '' AS four,
i.* FROM int2_tbl AS i WHERE i.f1 <> '0'::int4;
SELECT '' AS one,
i.* FROM int2_tbl AS i WHERE i.f1 = '0'::int2;
SELECT '' AS one,
i.* FROM int2_tbl AS i WHERE i.f1 = '0'::int4;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 < '0'::int2;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 < '0'::int4;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 <= '0'::int2;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 <= '0'::int4;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 > '0'::int2;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 > '0'::int4;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 >= '0'::int2;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 >= '0'::int4;
SELECT '' AS one,
i.* FROM int2_tbl AS i WHERE (i.f1 % '2'::int2) = '1'::int2;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE (i.f1 % '2'::int4) = '0'::int2;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int2_tbl AS i WHERE abs(f1) < 16384;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int4 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int2_tbl AS i WHERE f1 < 32766;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int4 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int2_tbl AS i WHERE f1 > (-32767);
SELECT '' AS five,
i.f1,
i.f1 - '2'::int4 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 / '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 / '2'::int4 AS x FROM int2_tbl AS i;
SELECT ((-1::int2) << 15)::text;
SELECT (((-1::int2) << 15) + 1::int2)::text;
SELECT (-32768)::int2 * (-1)::int2;
SELECT (-32768)::int2 / (-1)::int2;
SELECT (-32768)::int2 % (-1)::int2;
SELECT x,
x::int2 AS int2_value FROM (VALUES (-2.5::float8), (-1.5::float8), (-0.5::float8), (0.0::float8), (0.5::float8), (1.5::float8), (2.5::float8)) AS t (x);
SELECT x,
x::int2 AS int2_value FROM (VALUES (-2.5::numeric), (-1.5::numeric), (-0.5::numeric), (0.0::numeric), (0.5::numeric), (1.5::numeric), (2.5::numeric)) AS t (x);"
`;

exports[`kitchen sink upstream upstream/int2.sql 2`] = `
"CREATE TABLE int2_tbl (
f1 int2
);
INSERT INTO int2_tbl ( f1 ) VALUES ('0   ');
INSERT INTO int2_tbl ( f1 ) VALUES ('  1234 ');
INSERT INTO int2_tbl ( f1 ) VALUES ('    -1234');
INSERT INTO int2_tbl ( f1 ) VALUES ('34.5');
INSERT INTO int2_tbl ( f1 ) VALUES ('32767');
INSERT INTO int2_tbl ( f1 ) VALUES ('-32767');
INSERT INTO int2_tbl ( f1 ) VALUES ('100000');
INSERT INTO int2_tbl ( f1 ) VALUES ('asdf');
INSERT INTO int2_tbl ( f1 ) VALUES ('    ');
INSERT INTO int2_tbl ( f1 ) VALUES ('- 1234');
INSERT INTO int2_tbl ( f1 ) VALUES ('4 444');
INSERT INTO int2_tbl ( f1 ) VALUES ('123 dt');
INSERT INTO int2_tbl ( f1 ) VALUES ('');
SELECT '' AS five,
* FROM int2_tbl;
SELECT '' AS four,
i.* FROM int2_tbl AS i WHERE i.f1 <> '0'::int2;
SELECT '' AS four,
i.* FROM int2_tbl AS i WHERE i.f1 <> '0'::int4;
SELECT '' AS one,
i.* FROM int2_tbl AS i WHERE i.f1 = '0'::int2;
SELECT '' AS one,
i.* FROM int2_tbl AS i WHERE i.f1 = '0'::int4;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 < '0'::int2;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 < '0'::int4;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 <= '0'::int2;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 <= '0'::int4;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 > '0'::int2;
SELECT '' AS two,
i.* FROM int2_tbl AS i WHERE i.f1 > '0'::int4;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 >= '0'::int2;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE i.f1 >= '0'::int4;
SELECT '' AS one,
i.* FROM int2_tbl AS i WHERE (i.f1 % '2'::int2) = '1'::int2;
SELECT '' AS three,
i.* FROM int2_tbl AS i WHERE (i.f1 % '2'::int4) = '0'::int2;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int2_tbl AS i WHERE abs(f1) < 16384;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int4 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int2_tbl AS i WHERE f1 < 32766;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int4 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int2_tbl AS i WHERE f1 > (-32767);
SELECT '' AS five,
i.f1,
i.f1 - '2'::int4 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 / '2'::int2 AS x FROM int2_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 / '2'::int4 AS x FROM int2_tbl AS i;
SELECT ((-1::int2) << 15)::text;
SELECT (((-1::int2) << 15) + 1::int2)::text;
SELECT (-32768)::int2 * (-1)::int2;
SELECT (-32768)::int2 / (-1)::int2;
SELECT (-32768)::int2 % (-1)::int2;
SELECT x,
x::int2 AS int2_value FROM (VALUES (-2.5::float8), (-1.5::float8), (-0.5::float8), (0.0::float8), (0.5::float8), (1.5::float8), (2.5::float8)) AS t(x);
SELECT x,
x::int2 AS int2_value FROM (VALUES (-2.5::numeric), (-1.5::numeric), (-0.5::numeric), (0.0::numeric), (0.5::numeric), (1.5::numeric), (2.5::numeric)) AS t(x);"
`;

exports[`kitchen sink upstream upstream/int4.sql 1`] = `
"CREATE TABLE int4_tbl (
f1 int4
);
INSERT INTO int4_tbl (f1) VALUES ('   0  ');
INSERT INTO int4_tbl (f1) VALUES ('123456     ');
INSERT INTO int4_tbl (f1) VALUES ('    -123456');
INSERT INTO int4_tbl (f1) VALUES ('34.5');
INSERT INTO int4_tbl (f1) VALUES ('2147483647');
INSERT INTO int4_tbl (f1) VALUES ('-2147483647');
INSERT INTO int4_tbl (f1) VALUES ('1000000000000');
INSERT INTO int4_tbl (f1) VALUES ('asdf');
INSERT INTO int4_tbl (f1) VALUES ('     ');
INSERT INTO int4_tbl (f1) VALUES ('   asdf   ');
INSERT INTO int4_tbl (f1) VALUES ('- 1234');
INSERT INTO int4_tbl (f1) VALUES ('123       5');
INSERT INTO int4_tbl (f1) VALUES ('');
SELECT '' AS five,
* FROM int4_tbl;
SELECT '' AS four,
i.* FROM int4_tbl AS i WHERE i.f1 <> '0'::int2;
SELECT '' AS four,
i.* FROM int4_tbl AS i WHERE i.f1 <> '0'::int4;
SELECT '' AS one,
i.* FROM int4_tbl AS i WHERE i.f1 = '0'::int2;
SELECT '' AS one,
i.* FROM int4_tbl AS i WHERE i.f1 = '0'::int4;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 < '0'::int2;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 < '0'::int4;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 <= '0'::int2;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 <= '0'::int4;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 > '0'::int2;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 > '0'::int4;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 >= '0'::int2;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 >= '0'::int4;
SELECT '' AS one,
i.* FROM int4_tbl AS i WHERE (i.f1 % '2'::int2) = '1'::int2;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE (i.f1 % '2'::int4) = '0'::int2;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int4_tbl AS i WHERE abs(f1) < 1073741824;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int4 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int4 AS x FROM int4_tbl AS i WHERE abs(f1) < 1073741824;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int4_tbl AS i WHERE f1 < 2147483646;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int4 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int4 AS x FROM int4_tbl AS i WHERE f1 < 2147483646;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int4_tbl AS i WHERE f1 > (-2147483647);
SELECT '' AS five,
i.f1,
i.f1 - '2'::int4 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int4 AS x FROM int4_tbl AS i WHERE f1 > (-2147483647);
SELECT '' AS five,
i.f1,
i.f1 / '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 / '2'::int4 AS x FROM int4_tbl AS i;
SELECT (-2) + 3 AS one;
SELECT 4 - 2 AS two;
SELECT 2 - (-1) AS three;
SELECT 2 - (-2) AS four;
SELECT ('2'::int2 * '2'::int2) = ('16'::int2 / '4'::int2) AS \\"true\\";
SELECT ('2'::int4 * '2'::int2) = ('16'::int2 / '4'::int4) AS \\"true\\";
SELECT ('2'::int2 * '2'::int4) = ('16'::int4 / '4'::int2) AS \\"true\\";
SELECT '1000'::int4 < '999'::int4 AS \\"false\\";
SELECT 4! AS twenty_four;
SELECT !!3 AS six;
SELECT ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1 AS ten;
SELECT 2 + (2 / 2) AS three;
SELECT (2 + 2) / 2 AS two;
SELECT ((-1::int4) << 31)::text;
SELECT (((-1::int4) << 31) + 1)::text;
SELECT (-2147483648)::int4 * (-1)::int4;
SELECT (-2147483648)::int4 / (-1)::int4;
SELECT (-2147483648)::int4 % (-1)::int4;
SELECT (-2147483648)::int4 * (-1)::int2;
SELECT (-2147483648)::int4 / (-1)::int2;
SELECT (-2147483648)::int4 % (-1)::int2;
SELECT x,
x::int4 AS int4_value FROM (VALUES (-2.5::float8), (-1.5::float8), (-0.5::float8), (0.0::float8), (0.5::float8), (1.5::float8), (2.5::float8)) AS t (x);
SELECT x,
x::int4 AS int4_value FROM (VALUES (-2.5::numeric), (-1.5::numeric), (-0.5::numeric), (0.0::numeric), (0.5::numeric), (1.5::numeric), (2.5::numeric)) AS t (x);"
`;

exports[`kitchen sink upstream upstream/int4.sql 2`] = `
"CREATE TABLE int4_tbl (
f1 int4
);
INSERT INTO int4_tbl ( f1 ) VALUES ('   0  ');
INSERT INTO int4_tbl ( f1 ) VALUES ('123456     ');
INSERT INTO int4_tbl ( f1 ) VALUES ('    -123456');
INSERT INTO int4_tbl ( f1 ) VALUES ('34.5');
INSERT INTO int4_tbl ( f1 ) VALUES ('2147483647');
INSERT INTO int4_tbl ( f1 ) VALUES ('-2147483647');
INSERT INTO int4_tbl ( f1 ) VALUES ('1000000000000');
INSERT INTO int4_tbl ( f1 ) VALUES ('asdf');
INSERT INTO int4_tbl ( f1 ) VALUES ('     ');
INSERT INTO int4_tbl ( f1 ) VALUES ('   asdf   ');
INSERT INTO int4_tbl ( f1 ) VALUES ('- 1234');
INSERT INTO int4_tbl ( f1 ) VALUES ('123       5');
INSERT INTO int4_tbl ( f1 ) VALUES ('');
SELECT '' AS five,
* FROM int4_tbl;
SELECT '' AS four,
i.* FROM int4_tbl AS i WHERE i.f1 <> '0'::int2;
SELECT '' AS four,
i.* FROM int4_tbl AS i WHERE i.f1 <> '0'::int4;
SELECT '' AS one,
i.* FROM int4_tbl AS i WHERE i.f1 = '0'::int2;
SELECT '' AS one,
i.* FROM int4_tbl AS i WHERE i.f1 = '0'::int4;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 < '0'::int2;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 < '0'::int4;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 <= '0'::int2;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 <= '0'::int4;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 > '0'::int2;
SELECT '' AS two,
i.* FROM int4_tbl AS i WHERE i.f1 > '0'::int4;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 >= '0'::int2;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE i.f1 >= '0'::int4;
SELECT '' AS one,
i.* FROM int4_tbl AS i WHERE (i.f1 % '2'::int2) = '1'::int2;
SELECT '' AS three,
i.* FROM int4_tbl AS i WHERE (i.f1 % '2'::int4) = '0'::int2;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int2 AS x FROM int4_tbl AS i WHERE abs(f1) < 1073741824;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int4 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 * '2'::int4 AS x FROM int4_tbl AS i WHERE abs(f1) < 1073741824;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int2 AS x FROM int4_tbl AS i WHERE f1 < 2147483646;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int4 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 + '2'::int4 AS x FROM int4_tbl AS i WHERE f1 < 2147483646;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int2 AS x FROM int4_tbl AS i WHERE f1 > (-2147483647);
SELECT '' AS five,
i.f1,
i.f1 - '2'::int4 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 - '2'::int4 AS x FROM int4_tbl AS i WHERE f1 > (-2147483647);
SELECT '' AS five,
i.f1,
i.f1 / '2'::int2 AS x FROM int4_tbl AS i;
SELECT '' AS five,
i.f1,
i.f1 / '2'::int4 AS x FROM int4_tbl AS i;
SELECT (-2) + 3 AS one;
SELECT 4 - 2 AS two;
SELECT 2 - (-1) AS three;
SELECT 2 - (-2) AS four;
SELECT ('2'::int2 * '2'::int2) = ('16'::int2 / '4'::int2) AS \\"true\\";
SELECT ('2'::int4 * '2'::int2) = ('16'::int2 / '4'::int4) AS \\"true\\";
SELECT ('2'::int2 * '2'::int4) = ('16'::int4 / '4'::int2) AS \\"true\\";
SELECT '1000'::int4 < '999'::int4 AS \\"false\\";
SELECT 4! AS twenty_four;
SELECT !!3 AS six;
SELECT ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1 AS ten;
SELECT 2 + (2 / 2) AS three;
SELECT (2 + 2) / 2 AS two;
SELECT ((-1::int4) << 31)::text;
SELECT (((-1::int4) << 31) + 1)::text;
SELECT (-2147483648)::int4 * (-1)::int4;
SELECT (-2147483648)::int4 / (-1)::int4;
SELECT (-2147483648)::int4 % (-1)::int4;
SELECT (-2147483648)::int4 * (-1)::int2;
SELECT (-2147483648)::int4 / (-1)::int2;
SELECT (-2147483648)::int4 % (-1)::int2;
SELECT x,
x::int4 AS int4_value FROM (VALUES (-2.5::float8), (-1.5::float8), (-0.5::float8), (0.0::float8), (0.5::float8), (1.5::float8), (2.5::float8)) AS t(x);
SELECT x,
x::int4 AS int4_value FROM (VALUES (-2.5::numeric), (-1.5::numeric), (-0.5::numeric), (0.0::numeric), (0.5::numeric), (1.5::numeric), (2.5::numeric)) AS t(x);"
`;

exports[`kitchen sink upstream upstream/json_encoding.sql 1`] = `
"SELECT '\\"\\\\u\\"'::json;
SELECT '\\"\\\\u00\\"'::json;
SELECT '\\"\\\\u000g\\"'::json;
SELECT '\\"\\\\u0000\\"'::json;
SELECT '\\"\\\\uaBcD\\"'::json;
SELECT '{ \\"a\\":  \\"\\\\ud83d\\\\ude04\\\\ud83d\\\\udc36\\" }'::json->'a' AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"\\\\ud83d\\\\ud83d\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04\\\\ud83d\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"\\\\ud83dX\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04X\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::json AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::json AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::json AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::json AS not_unescaped;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::json AS not_an_escape;
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::json->>'a' AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::json->>'a' AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::json->>'a' AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::json->>'a' AS fails;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::json->>'a' AS not_an_escape;
SELECT '\\"\\\\u\\"'::jsonb;
SELECT '\\"\\\\u00\\"'::jsonb;
SELECT '\\"\\\\u000g\\"'::jsonb;
SELECT '\\"\\\\u0045\\"'::jsonb;
SELECT '\\"\\\\u0000\\"'::jsonb;
SELECT octet_length('\\"\\\\uaBcD\\"'::jsonb::text);
SELECT octet_length(('{ \\"a\\":  \\"\\\\ud83d\\\\ude04\\\\ud83d\\\\udc36\\" }'::jsonb->'a')::text) AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"\\\\ud83d\\\\ud83d\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04\\\\ud83d\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"\\\\ud83dX\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04X\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::jsonb AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::jsonb AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::jsonb AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::jsonb AS fails;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::jsonb AS not_an_escape;
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::jsonb->>'a' AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::jsonb->>'a' AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::jsonb->>'a' AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::jsonb->>'a' AS fails;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::jsonb->>'a' AS not_an_escape;"
`;

exports[`kitchen sink upstream upstream/json_encoding.sql 2`] = `
"SELECT '\\"\\\\u\\"'::json;
SELECT '\\"\\\\u00\\"'::json;
SELECT '\\"\\\\u000g\\"'::json;
SELECT '\\"\\\\u0000\\"'::json;
SELECT '\\"\\\\uaBcD\\"'::json;
SELECT '{ \\"a\\":  \\"\\\\ud83d\\\\ude04\\\\ud83d\\\\udc36\\" }'::json->'a' AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"\\\\ud83d\\\\ud83d\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04\\\\ud83d\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"\\\\ud83dX\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04X\\" }'::json->'a';
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::json AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::json AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::json AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::json AS not_unescaped;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::json AS not_an_escape;
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::json->>'a' AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::json->>'a' AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::json->>'a' AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::json->>'a' AS fails;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::json->>'a' AS not_an_escape;
SELECT '\\"\\\\u\\"'::jsonb;
SELECT '\\"\\\\u00\\"'::jsonb;
SELECT '\\"\\\\u000g\\"'::jsonb;
SELECT '\\"\\\\u0045\\"'::jsonb;
SELECT '\\"\\\\u0000\\"'::jsonb;
SELECT octet_length('\\"\\\\uaBcD\\"'::jsonb::text);
SELECT octet_length(('{ \\"a\\":  \\"\\\\ud83d\\\\ude04\\\\ud83d\\\\udc36\\" }'::jsonb->'a')::text) AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"\\\\ud83d\\\\ud83d\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04\\\\ud83d\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"\\\\ud83dX\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"\\\\ude04X\\" }'::jsonb->'a';
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::jsonb AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::jsonb AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::jsonb AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::jsonb AS fails;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::jsonb AS not_an_escape;
SELECT '{ \\"a\\":  \\"the Copyright \\\\u00a9 sign\\" }'::jsonb->>'a' AS correct_in_utf8;
SELECT '{ \\"a\\":  \\"dollar \\\\u0024 character\\" }'::jsonb->>'a' AS correct_everywhere;
SELECT '{ \\"a\\":  \\"dollar \\\\\\\\u0024 character\\" }'::jsonb->>'a' AS not_an_escape;
SELECT '{ \\"a\\":  \\"null \\\\u0000 escape\\" }'::jsonb->>'a' AS fails;
SELECT '{ \\"a\\":  \\"null \\\\\\\\u0000 escape\\" }'::jsonb->>'a' AS not_an_escape;"
`;

exports[`kitchen sink upstream upstream/line.sql 1`] = `
"CREATE TABLE line_tbl (
s line
);
INSERT INTO line_tbl VALUES ('{1,-1,1}');
INSERT INTO line_tbl VALUES ('(0,0),(6,6)');
INSERT INTO line_tbl VALUES ('10,-10 ,-5,-4');
INSERT INTO line_tbl VALUES ('[-1e6,2e2,3e5, -4e1]');
INSERT INTO line_tbl VALUES ('(11,22,33,44)');
INSERT INTO line_tbl VALUES ('[(1,0),(1,0)]');
INSERT INTO line_tbl VALUES ('[(1,3),(2,3)]');
INSERT INTO line_tbl VALUES ('[(3,1),(3,2)]');
INSERT INTO line_tbl VALUES ('{0,0,1}');
INSERT INTO line_tbl VALUES ('(3asdf,2 ,3,4r2)');
INSERT INTO line_tbl VALUES ('[1,2,3, 4');
INSERT INTO line_tbl VALUES ('[(,2),(3,4)]');
INSERT INTO line_tbl VALUES ('[(1,2),(3,4)');
SELECT * FROM line_tbl;
SELECT * FROM line_tbl WHERE (s <-> '[(1,2),(3,4)]'::line) < 10;
SELECT * FROM line_tbl WHERE ('(0.1,0.1)'::point <-> s) < 1;
SELECT * FROM line_tbl WHERE ('[(0.1,0.1),(0.2,0.2)]'::lseg <-> s) < 1;
SELECT '[(1,1),(2,1)]'::line <-> '[(-1,-1),(-2,-1)]'::line;
SELECT '[(1,1),(2,1)]'::lseg <-> '[(-1,-1),(-2,-1)]'::line;
SELECT '(-1,1)'::point <-> '[(-3,0),(-4,0)]'::line;
SELECT '[(1,1),(5,5)]'::lseg ?# '[(2,0),(0,2)]'::line;
SELECT '[(1,1),(5,5)]'::lseg ?# '[(0,0),(1,0)]'::line;
SELECT '[(0,0),(1,1)]'::line ?# '(0,0,2,2)'::box;
SELECT '[(3,0),(4,1)]'::line ?# '(0,0,2,2)'::box;
SELECT '(1,1)'::point <@ '[(0,0),(2,2)]'::line;
SELECT '(1,1)'::point <@ '[(0,0),(1,0)]'::line;
SELECT '(1,1)'::point @ '[(0,0),(2,2)]'::line;
SELECT '(1,1)'::point @ '[(0,0),(1,0)]'::line;
SELECT '[(1,1),(2,2)]'::lseg <@ '[(0,0),(2,2)]'::line;
SELECT '[(1,1),(2,1)]'::lseg <@ '[(0,0),(1,0)]'::line;
SELECT '[(1,1),(2,2)]'::lseg @ '[(0,0),(2,2)]'::line;
SELECT '[(1,1),(2,1)]'::lseg @ '[(0,0),(1,0)]'::line;
SELECT '(0,1)'::point ## '[(0,0),(1,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ## '[(1,0),(2,0)]'::lseg;
SELECT '[(0,0),(1,1)]'::line ?# '[(1,0),(2,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?# '[(1,0),(1,1)]'::line;
SELECT '[(0,0),(1,1)]'::line # '[(1,0),(2,1)]'::line;
SELECT '[(0,0),(1,1)]'::line # '[(1,0),(1,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?|| '[(1,0),(2,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?|| '[(1,0),(1,1)]'::line;
SELECT '[(0,0),(1,0)]'::line ?-| '[(0,0),(0,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?-| '[(1,0),(1,1)]'::line;
SELECT ?-'[(0,0),(1,0)]'::line;
SELECT ?-'[(0,0),(1,1)]'::line;
SELECT ?|'[(0,0),(0,1)]'::line;
SELECT ?|'[(0,0),(1,1)]'::line;
SELECT line('(1,2)'::point, '(3,4)'::point);
SELECT '[(1,2),(3,4)]'::line = '[(3,4),(4,5)]'::line;
SELECT '[(1,2),(3,4)]'::line = '[(3,4),(4,4)]'::line;"
`;

exports[`kitchen sink upstream upstream/line.sql 2`] = `
"CREATE TABLE line_tbl (
s line
);
INSERT INTO line_tbl VALUES ('{1,-1,1}');
INSERT INTO line_tbl VALUES ('(0,0),(6,6)');
INSERT INTO line_tbl VALUES ('10,-10 ,-5,-4');
INSERT INTO line_tbl VALUES ('[-1e6,2e2,3e5, -4e1]');
INSERT INTO line_tbl VALUES ('(11,22,33,44)');
INSERT INTO line_tbl VALUES ('[(1,0),(1,0)]');
INSERT INTO line_tbl VALUES ('[(1,3),(2,3)]');
INSERT INTO line_tbl VALUES ('[(3,1),(3,2)]');
INSERT INTO line_tbl VALUES ('{0,0,1}');
INSERT INTO line_tbl VALUES ('(3asdf,2 ,3,4r2)');
INSERT INTO line_tbl VALUES ('[1,2,3, 4');
INSERT INTO line_tbl VALUES ('[(,2),(3,4)]');
INSERT INTO line_tbl VALUES ('[(1,2),(3,4)');
SELECT * FROM line_tbl;
SELECT * FROM line_tbl WHERE (s <-> '[(1,2),(3,4)]'::line) < 10;
SELECT * FROM line_tbl WHERE ('(0.1,0.1)'::point <-> s) < 1;
SELECT * FROM line_tbl WHERE ('[(0.1,0.1),(0.2,0.2)]'::lseg <-> s) < 1;
SELECT '[(1,1),(2,1)]'::line <-> '[(-1,-1),(-2,-1)]'::line;
SELECT '[(1,1),(2,1)]'::lseg <-> '[(-1,-1),(-2,-1)]'::line;
SELECT '(-1,1)'::point <-> '[(-3,0),(-4,0)]'::line;
SELECT '[(1,1),(5,5)]'::lseg ?# '[(2,0),(0,2)]'::line;
SELECT '[(1,1),(5,5)]'::lseg ?# '[(0,0),(1,0)]'::line;
SELECT '[(0,0),(1,1)]'::line ?# '(0,0,2,2)'::box;
SELECT '[(3,0),(4,1)]'::line ?# '(0,0,2,2)'::box;
SELECT '(1,1)'::point <@ '[(0,0),(2,2)]'::line;
SELECT '(1,1)'::point <@ '[(0,0),(1,0)]'::line;
SELECT '(1,1)'::point @ '[(0,0),(2,2)]'::line;
SELECT '(1,1)'::point @ '[(0,0),(1,0)]'::line;
SELECT '[(1,1),(2,2)]'::lseg <@ '[(0,0),(2,2)]'::line;
SELECT '[(1,1),(2,1)]'::lseg <@ '[(0,0),(1,0)]'::line;
SELECT '[(1,1),(2,2)]'::lseg @ '[(0,0),(2,2)]'::line;
SELECT '[(1,1),(2,1)]'::lseg @ '[(0,0),(1,0)]'::line;
SELECT '(0,1)'::point ## '[(0,0),(1,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ## '[(1,0),(2,0)]'::lseg;
SELECT '[(0,0),(1,1)]'::line ?# '[(1,0),(2,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?# '[(1,0),(1,1)]'::line;
SELECT '[(0,0),(1,1)]'::line # '[(1,0),(2,1)]'::line;
SELECT '[(0,0),(1,1)]'::line # '[(1,0),(1,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?|| '[(1,0),(2,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?|| '[(1,0),(1,1)]'::line;
SELECT '[(0,0),(1,0)]'::line ?-| '[(0,0),(0,1)]'::line;
SELECT '[(0,0),(1,1)]'::line ?-| '[(1,0),(1,1)]'::line;
SELECT ?-'[(0,0),(1,0)]'::line;
SELECT ?-'[(0,0),(1,1)]'::line;
SELECT ?|'[(0,0),(0,1)]'::line;
SELECT ?|'[(0,0),(1,1)]'::line;
SELECT line('(1,2)'::point, '(3,4)'::point);
SELECT '[(1,2),(3,4)]'::line = '[(3,4),(4,5)]'::line;
SELECT '[(1,2),(3,4)]'::line = '[(3,4),(4,4)]'::line;"
`;

exports[`kitchen sink upstream upstream/lseg.sql 1`] = `
"CREATE TABLE lseg_tbl (
s lseg
);
INSERT INTO lseg_tbl VALUES ('[(1,2),(3,4)]');
INSERT INTO lseg_tbl VALUES ('(0,0),(6,6)');
INSERT INTO lseg_tbl VALUES ('10,-10 ,-3,-4');
INSERT INTO lseg_tbl VALUES ('[-1e6,2e2,3e5, -4e1]');
INSERT INTO lseg_tbl VALUES ('(11,22,33,44)');
INSERT INTO lseg_tbl VALUES ('(3asdf,2 ,3,4r2)');
INSERT INTO lseg_tbl VALUES ('[1,2,3, 4');
INSERT INTO lseg_tbl VALUES ('[(,2),(3,4)]');
INSERT INTO lseg_tbl VALUES ('[(1,2),(3,4)');
SELECT * FROM lseg_tbl;
SELECT * FROM lseg_tbl WHERE s <= '[(1,2),(3,4)]'::lseg;
SELECT * FROM lseg_tbl WHERE (s <-> '[(1,2),(3,4)]'::lseg) < 10;"
`;

exports[`kitchen sink upstream upstream/lseg.sql 2`] = `
"CREATE TABLE lseg_tbl (
s lseg
);
INSERT INTO lseg_tbl VALUES ('[(1,2),(3,4)]');
INSERT INTO lseg_tbl VALUES ('(0,0),(6,6)');
INSERT INTO lseg_tbl VALUES ('10,-10 ,-3,-4');
INSERT INTO lseg_tbl VALUES ('[-1e6,2e2,3e5, -4e1]');
INSERT INTO lseg_tbl VALUES ('(11,22,33,44)');
INSERT INTO lseg_tbl VALUES ('(3asdf,2 ,3,4r2)');
INSERT INTO lseg_tbl VALUES ('[1,2,3, 4');
INSERT INTO lseg_tbl VALUES ('[(,2),(3,4)]');
INSERT INTO lseg_tbl VALUES ('[(1,2),(3,4)');
SELECT * FROM lseg_tbl;
SELECT * FROM lseg_tbl WHERE s <= '[(1,2),(3,4)]'::lseg;
SELECT * FROM lseg_tbl WHERE (s <-> '[(1,2),(3,4)]'::lseg) < 10;"
`;

exports[`kitchen sink upstream upstream/misc_functions.sql 1`] = `
"SELECT num_nonnulls(NULL);
SELECT num_nonnulls('1');
SELECT num_nonnulls(NULL::text);
SELECT num_nonnulls(NULL::text, NULL::int);
SELECT num_nonnulls(1, 2, NULL::text, NULL::point, '', '9'::int8, 1.0 / NULL);
SELECT num_nonnulls(VARIADIC '{1,2,NULL,3}'::int[]);
SELECT num_nonnulls(VARIADIC '{\\"1\\",\\"2\\",\\"3\\",\\"4\\"}'::text[]);
SELECT num_nonnulls(VARIADIC ARRAY (SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) AS i));
SELECT num_nulls(NULL);
SELECT num_nulls('1');
SELECT num_nulls(NULL::text);
SELECT num_nulls(NULL::text, NULL::int);
SELECT num_nulls(1, 2, NULL::text, NULL::point, '', '9'::int8, 1.0 / NULL);
SELECT num_nulls(VARIADIC '{1,2,NULL,3}'::int[]);
SELECT num_nulls(VARIADIC '{\\"1\\",\\"2\\",\\"3\\",\\"4\\"}'::text[]);
SELECT num_nulls(VARIADIC ARRAY (SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) AS i));
SELECT num_nonnulls(VARIADIC NULL::text[]);
SELECT num_nonnulls(VARIADIC '{}'::int[]);
SELECT num_nulls(VARIADIC NULL::text[]);
SELECT num_nulls(VARIADIC '{}'::int[]);
SELECT num_nonnulls();
SELECT num_nulls();"
`;

exports[`kitchen sink upstream upstream/misc_functions.sql 2`] = `
"SELECT num_nonnulls(NULL);
SELECT num_nonnulls('1');
SELECT num_nonnulls(NULL::text);
SELECT num_nonnulls(NULL::text, NULL::int);
SELECT num_nonnulls(1, 2, NULL::text, NULL::point, '', '9'::int8, 1.0 / NULL);
SELECT num_nonnulls(VARIADIC '{1,2,NULL,3}'::int[]);
SELECT num_nonnulls(VARIADIC '{\\"1\\",\\"2\\",\\"3\\",\\"4\\"}'::text[]);
SELECT num_nonnulls(VARIADIC ARRAY (SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) AS i));
SELECT num_nulls(NULL);
SELECT num_nulls('1');
SELECT num_nulls(NULL::text);
SELECT num_nulls(NULL::text, NULL::int);
SELECT num_nulls(1, 2, NULL::text, NULL::point, '', '9'::int8, 1.0 / NULL);
SELECT num_nulls(VARIADIC '{1,2,NULL,3}'::int[]);
SELECT num_nulls(VARIADIC '{\\"1\\",\\"2\\",\\"3\\",\\"4\\"}'::text[]);
SELECT num_nulls(VARIADIC ARRAY (SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) AS i));
SELECT num_nonnulls(VARIADIC NULL::text[]);
SELECT num_nonnulls(VARIADIC '{}'::int[]);
SELECT num_nulls(VARIADIC NULL::text[]);
SELECT num_nulls(VARIADIC '{}'::int[]);
SELECT num_nonnulls();
SELECT num_nulls();"
`;

exports[`kitchen sink upstream upstream/money.sql 1`] = `
"CREATE TABLE money_data (
m money
);
INSERT INTO money_data VALUES ('123');
SELECT * FROM money_data;
SELECT m + '123' FROM money_data;
SELECT m + '123.45' FROM money_data;
SELECT m - '123.45' FROM money_data;
SELECT m * 2 FROM money_data;
SELECT m / 2 FROM money_data;
SELECT m = '$123.00' FROM money_data;
SELECT m <> '$124.00' FROM money_data;
SELECT m <= '$123.00' FROM money_data;
SELECT m >= '$123.00' FROM money_data;
SELECT m < '$124.00' FROM money_data;
SELECT m > '$122.00' FROM money_data;
SELECT m = '$123.01' FROM money_data;
SELECT m <> '$123.00' FROM money_data;
SELECT m <= '$122.99' FROM money_data;
SELECT m >= '$123.01' FROM money_data;
SELECT m > '$124.00' FROM money_data;
SELECT m < '$122.00' FROM money_data;
SELECT cashlarger(m, '$124.00') FROM money_data;
SELECT cashsmaller(m, '$124.00') FROM money_data;
SELECT cash_words(m) FROM money_data;
SELECT cash_words(m + '1.23') FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.45');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.451');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.454');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.455');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.456');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.459');
SELECT * FROM money_data;
SELECT 1234567890::money;
SELECT 12345678901234567::money;
SELECT 123456789012345678::money;
SELECT 9223372036854775807::money;
SELECT (-12345)::money;
SELECT (-1234567890)::money;
SELECT (-12345678901234567)::money;
SELECT (-123456789012345678)::money;
SELECT (-9223372036854775808)::money;
SELECT 1234567890::int4::money;
SELECT 12345678901234567::int8::money;
SELECT (-1234567890)::int4::money;
SELECT (-12345678901234567)::int8::money;"
`;

exports[`kitchen sink upstream upstream/money.sql 2`] = `
"CREATE TABLE money_data (
m money
);
INSERT INTO money_data VALUES ('123');
SELECT * FROM money_data;
SELECT m + '123' FROM money_data;
SELECT m + '123.45' FROM money_data;
SELECT m - '123.45' FROM money_data;
SELECT m * 2 FROM money_data;
SELECT m / 2 FROM money_data;
SELECT m = '$123.00' FROM money_data;
SELECT m <> '$124.00' FROM money_data;
SELECT m <= '$123.00' FROM money_data;
SELECT m >= '$123.00' FROM money_data;
SELECT m < '$124.00' FROM money_data;
SELECT m > '$122.00' FROM money_data;
SELECT m = '$123.01' FROM money_data;
SELECT m <> '$123.00' FROM money_data;
SELECT m <= '$122.99' FROM money_data;
SELECT m >= '$123.01' FROM money_data;
SELECT m > '$124.00' FROM money_data;
SELECT m < '$122.00' FROM money_data;
SELECT cashlarger(m, '$124.00') FROM money_data;
SELECT cashsmaller(m, '$124.00') FROM money_data;
SELECT cash_words(m) FROM money_data;
SELECT cash_words(m + '1.23') FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.45');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.451');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.454');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.455');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.456');
SELECT * FROM money_data;
DELETE FROM money_data;
INSERT INTO money_data VALUES ('$123.459');
SELECT * FROM money_data;
SELECT 1234567890::money;
SELECT 12345678901234567::money;
SELECT 123456789012345678::money;
SELECT 9223372036854775807::money;
SELECT (-12345)::money;
SELECT (-1234567890)::money;
SELECT (-12345678901234567)::money;
SELECT (-123456789012345678)::money;
SELECT (-9223372036854775808)::money;
SELECT 1234567890::int4::money;
SELECT 12345678901234567::int8::money;
SELECT (-1234567890)::int4::money;
SELECT (-12345678901234567)::int8::money;"
`;

exports[`kitchen sink upstream upstream/numerology.sql 1`] = `
"CREATE TABLE temp_float (
f1 float8
);
INSERT INTO temp_float (f1) SELECT float8(f1) FROM int4_tbl;
INSERT INTO temp_float (f1) SELECT float8(f1) FROM int2_tbl;
SELECT '' AS ten,
f1 FROM temp_float ORDER BY f1;
CREATE TABLE temp_int4 (
f1 int4
);
INSERT INTO temp_int4 (f1) SELECT int4(f1) FROM float8_tbl WHERE f1 > (-2147483647) AND f1 < 2147483647;
INSERT INTO temp_int4 (f1) SELECT int4(f1) FROM int2_tbl;
SELECT '' AS nine,
f1 FROM temp_int4 ORDER BY f1;
CREATE TABLE temp_int2 (
f1 int2
);
INSERT INTO temp_int2 (f1) SELECT int2(f1) FROM float8_tbl WHERE f1 >= (-32767) AND f1 <= 32767;
INSERT INTO temp_int2 (f1) SELECT int2(f1) FROM int4_tbl WHERE f1 >= (-32767) AND f1 <= 32767;
SELECT '' AS five,
f1 FROM temp_int2 ORDER BY f1;
CREATE TABLE temp_group (
f1 int4,
f2 int4,
f3 float8
);
INSERT INTO temp_group SELECT 1,
-i.f1,
-f.f1 FROM int4_tbl AS i,
float8_tbl AS f;
INSERT INTO temp_group SELECT 2,
i.f1,
f.f1 FROM int4_tbl AS i,
float8_tbl AS f;
SELECT DISTINCT f1 AS two FROM temp_group ORDER BY 1;
SELECT f1 AS two,
max(f3) AS max_float,
min(f3) AS min_float FROM temp_group GROUP BY f1 ORDER BY two,
max_float,
min_float;
SELECT f1 AS two,
max(f3) AS max_float,
min(f3) AS min_float FROM temp_group GROUP BY two ORDER BY two,
max_float,
min_float;
SELECT f1 AS two,
max(f3) + 1 AS max_plus_1,
min(f3) - 1 AS min_minus_1 FROM temp_group GROUP BY f1 ORDER BY two,
min_minus_1;
SELECT f1 AS two,
max(f2) + min(f2) AS max_plus_min,
min(f3) - 1 AS min_minus_1 FROM temp_group GROUP BY f1 ORDER BY two,
min_minus_1;
DROP TABLE temp_int2;
DROP TABLE temp_int4;
DROP TABLE temp_float;
DROP TABLE temp_group;"
`;

exports[`kitchen sink upstream upstream/numerology.sql 2`] = `
"CREATE TABLE temp_float (
f1 float8
);
INSERT INTO temp_float ( f1 ) SELECT float8(f1) FROM int4_tbl;
INSERT INTO temp_float ( f1 ) SELECT float8(f1) FROM int2_tbl;
SELECT '' AS ten,
f1 FROM temp_float ORDER BY f1;
CREATE TABLE temp_int4 (
f1 int4
);
INSERT INTO temp_int4 ( f1 ) SELECT int4(f1) FROM float8_tbl WHERE f1 > (-2147483647) AND f1 < 2147483647;
INSERT INTO temp_int4 ( f1 ) SELECT int4(f1) FROM int2_tbl;
SELECT '' AS nine,
f1 FROM temp_int4 ORDER BY f1;
CREATE TABLE temp_int2 (
f1 int2
);
INSERT INTO temp_int2 ( f1 ) SELECT int2(f1) FROM float8_tbl WHERE f1 >= (-32767) AND f1 <= 32767;
INSERT INTO temp_int2 ( f1 ) SELECT int2(f1) FROM int4_tbl WHERE f1 >= (-32767) AND f1 <= 32767;
SELECT '' AS five,
f1 FROM temp_int2 ORDER BY f1;
CREATE TABLE temp_group (
f1 int4,
f2 int4,
f3 float8
);
INSERT INTO temp_group SELECT 1,
-i.f1,
-f.f1 FROM int4_tbl AS i,
float8_tbl AS f;
INSERT INTO temp_group SELECT 2,
i.f1,
f.f1 FROM int4_tbl AS i,
float8_tbl AS f;
SELECT DISTINCT f1 AS two FROM temp_group ORDER BY 1;
SELECT f1 AS two,
max(f3) AS max_float,
min(f3) AS min_float FROM temp_group GROUP BY f1 ORDER BY two,
max_float,
min_float;
SELECT f1 AS two,
max(f3) AS max_float,
min(f3) AS min_float FROM temp_group GROUP BY two ORDER BY two,
max_float,
min_float;
SELECT f1 AS two,
max(f3) + 1 AS max_plus_1,
min(f3) - 1 AS min_minus_1 FROM temp_group GROUP BY f1 ORDER BY two,
min_minus_1;
SELECT f1 AS two,
max(f2) + min(f2) AS max_plus_min,
min(f3) - 1 AS min_minus_1 FROM temp_group GROUP BY f1 ORDER BY two,
min_minus_1;
DROP TABLE temp_int2;
DROP TABLE temp_int4;
DROP TABLE temp_float;
DROP TABLE temp_group;"
`;

exports[`kitchen sink upstream upstream/oid.sql 1`] = `
"CREATE TABLE oid_tbl (
f1 oid
);
INSERT INTO oid_tbl (f1) VALUES ('1234');
INSERT INTO oid_tbl (f1) VALUES ('1235');
INSERT INTO oid_tbl (f1) VALUES ('987');
INSERT INTO oid_tbl (f1) VALUES ('-1040');
INSERT INTO oid_tbl (f1) VALUES ('99999999');
INSERT INTO oid_tbl (f1) VALUES ('5     ');
INSERT INTO oid_tbl (f1) VALUES ('   10  ');
INSERT INTO oid_tbl (f1) VALUES ('	  15 	  ');
INSERT INTO oid_tbl (f1) VALUES ('');
INSERT INTO oid_tbl (f1) VALUES ('    ');
INSERT INTO oid_tbl (f1) VALUES ('asdfasd');
INSERT INTO oid_tbl (f1) VALUES ('99asdfasd');
INSERT INTO oid_tbl (f1) VALUES ('5    d');
INSERT INTO oid_tbl (f1) VALUES ('    5d');
INSERT INTO oid_tbl (f1) VALUES ('5    5');
INSERT INTO oid_tbl (f1) VALUES (' - 500');
INSERT INTO oid_tbl (f1) VALUES ('32958209582039852935');
INSERT INTO oid_tbl (f1) VALUES ('-23582358720398502385');
SELECT '' AS six,
* FROM oid_tbl;
SELECT '' AS one,
o.* FROM oid_tbl AS o WHERE o.f1 = 1234;
SELECT '' AS five,
o.* FROM oid_tbl AS o WHERE o.f1 <> '1234';
SELECT '' AS three,
o.* FROM oid_tbl AS o WHERE o.f1 <= '1234';
SELECT '' AS two,
o.* FROM oid_tbl AS o WHERE o.f1 < '1234';
SELECT '' AS four,
o.* FROM oid_tbl AS o WHERE o.f1 >= '1234';
SELECT '' AS three,
o.* FROM oid_tbl AS o WHERE o.f1 > '1234';
DROP TABLE oid_tbl;"
`;

exports[`kitchen sink upstream upstream/oid.sql 2`] = `
"CREATE TABLE oid_tbl (
f1 oid
);
INSERT INTO oid_tbl ( f1 ) VALUES ('1234');
INSERT INTO oid_tbl ( f1 ) VALUES ('1235');
INSERT INTO oid_tbl ( f1 ) VALUES ('987');
INSERT INTO oid_tbl ( f1 ) VALUES ('-1040');
INSERT INTO oid_tbl ( f1 ) VALUES ('99999999');
INSERT INTO oid_tbl ( f1 ) VALUES ('5     ');
INSERT INTO oid_tbl ( f1 ) VALUES ('   10  ');
INSERT INTO oid_tbl ( f1 ) VALUES ('	  15 	  ');
INSERT INTO oid_tbl ( f1 ) VALUES ('');
INSERT INTO oid_tbl ( f1 ) VALUES ('    ');
INSERT INTO oid_tbl ( f1 ) VALUES ('asdfasd');
INSERT INTO oid_tbl ( f1 ) VALUES ('99asdfasd');
INSERT INTO oid_tbl ( f1 ) VALUES ('5    d');
INSERT INTO oid_tbl ( f1 ) VALUES ('    5d');
INSERT INTO oid_tbl ( f1 ) VALUES ('5    5');
INSERT INTO oid_tbl ( f1 ) VALUES (' - 500');
INSERT INTO oid_tbl ( f1 ) VALUES ('32958209582039852935');
INSERT INTO oid_tbl ( f1 ) VALUES ('-23582358720398502385');
SELECT '' AS six,
* FROM oid_tbl;
SELECT '' AS one,
o.* FROM oid_tbl AS o WHERE o.f1 = 1234;
SELECT '' AS five,
o.* FROM oid_tbl AS o WHERE o.f1 <> '1234';
SELECT '' AS three,
o.* FROM oid_tbl AS o WHERE o.f1 <= '1234';
SELECT '' AS two,
o.* FROM oid_tbl AS o WHERE o.f1 < '1234';
SELECT '' AS four,
o.* FROM oid_tbl AS o WHERE o.f1 >= '1234';
SELECT '' AS three,
o.* FROM oid_tbl AS o WHERE o.f1 > '1234';
DROP TABLE oid_tbl;"
`;

exports[`kitchen sink upstream upstream/oidjoins.sql 1`] = `
"SELECT ctid,
aggfnoid FROM pg_catalog.pg_aggregate AS fk WHERE aggfnoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggfnoid));
SELECT ctid,
aggtransfn FROM pg_catalog.pg_aggregate AS fk WHERE aggtransfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggtransfn));
SELECT ctid,
aggfinalfn FROM pg_catalog.pg_aggregate AS fk WHERE aggfinalfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggfinalfn));
SELECT ctid,
aggmtransfn FROM pg_catalog.pg_aggregate AS fk WHERE aggmtransfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggmtransfn));
SELECT ctid,
aggminvtransfn FROM pg_catalog.pg_aggregate AS fk WHERE aggminvtransfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggminvtransfn));
SELECT ctid,
aggmfinalfn FROM pg_catalog.pg_aggregate AS fk WHERE aggmfinalfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggmfinalfn));
SELECT ctid,
aggsortop FROM pg_catalog.pg_aggregate AS fk WHERE aggsortop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.aggsortop));
SELECT ctid,
aggtranstype FROM pg_catalog.pg_aggregate AS fk WHERE aggtranstype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.aggtranstype));
SELECT ctid,
aggmtranstype FROM pg_catalog.pg_aggregate AS fk WHERE aggmtranstype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.aggmtranstype));
SELECT ctid,
amhandler FROM pg_catalog.pg_am AS fk WHERE amhandler <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.amhandler));
SELECT ctid,
amopfamily FROM pg_catalog.pg_amop AS fk WHERE amopfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.amopfamily));
SELECT ctid,
amoplefttype FROM pg_catalog.pg_amop AS fk WHERE amoplefttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amoplefttype));
SELECT ctid,
amoprighttype FROM pg_catalog.pg_amop AS fk WHERE amoprighttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amoprighttype));
SELECT ctid,
amopopr FROM pg_catalog.pg_amop AS fk WHERE amopopr <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.amopopr));
SELECT ctid,
amopmethod FROM pg_catalog.pg_amop AS fk WHERE amopmethod <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.amopmethod));
SELECT ctid,
amopsortfamily FROM pg_catalog.pg_amop AS fk WHERE amopsortfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.amopsortfamily));
SELECT ctid,
amprocfamily FROM pg_catalog.pg_amproc AS fk WHERE amprocfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.amprocfamily));
SELECT ctid,
amproclefttype FROM pg_catalog.pg_amproc AS fk WHERE amproclefttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amproclefttype));
SELECT ctid,
amprocrighttype FROM pg_catalog.pg_amproc AS fk WHERE amprocrighttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amprocrighttype));
SELECT ctid,
amproc FROM pg_catalog.pg_amproc AS fk WHERE amproc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.amproc));
SELECT ctid,
adrelid FROM pg_catalog.pg_attrdef AS fk WHERE adrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.adrelid));
SELECT ctid,
attrelid FROM pg_catalog.pg_attribute AS fk WHERE attrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.attrelid));
SELECT ctid,
atttypid FROM pg_catalog.pg_attribute AS fk WHERE atttypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.atttypid));
SELECT ctid,
attcollation FROM pg_catalog.pg_attribute AS fk WHERE attcollation <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_collation AS pk WHERE pk.oid = fk.attcollation));
SELECT ctid,
castsource FROM pg_catalog.pg_cast AS fk WHERE castsource <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.castsource));
SELECT ctid,
casttarget FROM pg_catalog.pg_cast AS fk WHERE casttarget <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.casttarget));
SELECT ctid,
castfunc FROM pg_catalog.pg_cast AS fk WHERE castfunc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.castfunc));
SELECT ctid,
relnamespace FROM pg_catalog.pg_class AS fk WHERE relnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.relnamespace));
SELECT ctid,
reltype FROM pg_catalog.pg_class AS fk WHERE reltype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.reltype));
SELECT ctid,
reloftype FROM pg_catalog.pg_class AS fk WHERE reloftype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.reloftype));
SELECT ctid,
relowner FROM pg_catalog.pg_class AS fk WHERE relowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.relowner));
SELECT ctid,
relam FROM pg_catalog.pg_class AS fk WHERE relam <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.relam));
SELECT ctid,
reltablespace FROM pg_catalog.pg_class AS fk WHERE reltablespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_tablespace AS pk WHERE pk.oid = fk.reltablespace));
SELECT ctid,
reltoastrelid FROM pg_catalog.pg_class AS fk WHERE reltoastrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.reltoastrelid));
SELECT ctid,
collnamespace FROM pg_catalog.pg_collation AS fk WHERE collnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.collnamespace));
SELECT ctid,
collowner FROM pg_catalog.pg_collation AS fk WHERE collowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.collowner));
SELECT ctid,
connamespace FROM pg_catalog.pg_constraint AS fk WHERE connamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.connamespace));
SELECT ctid,
conrelid FROM pg_catalog.pg_constraint AS fk WHERE conrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.conrelid));
SELECT ctid,
contypid FROM pg_catalog.pg_constraint AS fk WHERE contypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.contypid));
SELECT ctid,
conindid FROM pg_catalog.pg_constraint AS fk WHERE conindid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.conindid));
SELECT ctid,
confrelid FROM pg_catalog.pg_constraint AS fk WHERE confrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.confrelid));
SELECT ctid,
connamespace FROM pg_catalog.pg_conversion AS fk WHERE connamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.connamespace));
SELECT ctid,
conowner FROM pg_catalog.pg_conversion AS fk WHERE conowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.conowner));
SELECT ctid,
conproc FROM pg_catalog.pg_conversion AS fk WHERE conproc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.conproc));
SELECT ctid,
datdba FROM pg_catalog.pg_database AS fk WHERE datdba <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.datdba));
SELECT ctid,
dattablespace FROM pg_catalog.pg_database AS fk WHERE dattablespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_tablespace AS pk WHERE pk.oid = fk.dattablespace));
SELECT ctid,
setdatabase FROM pg_catalog.pg_db_role_setting AS fk WHERE setdatabase <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_database AS pk WHERE pk.oid = fk.setdatabase));
SELECT ctid,
classid FROM pg_catalog.pg_depend AS fk WHERE classid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.classid));
SELECT ctid,
refclassid FROM pg_catalog.pg_depend AS fk WHERE refclassid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.refclassid));
SELECT ctid,
classoid FROM pg_catalog.pg_description AS fk WHERE classoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.classoid));
SELECT ctid,
enumtypid FROM pg_catalog.pg_enum AS fk WHERE enumtypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.enumtypid));
SELECT ctid,
extowner FROM pg_catalog.pg_extension AS fk WHERE extowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.extowner));
SELECT ctid,
extnamespace FROM pg_catalog.pg_extension AS fk WHERE extnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.extnamespace));
SELECT ctid,
fdwowner FROM pg_catalog.pg_foreign_data_wrapper AS fk WHERE fdwowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.fdwowner));
SELECT ctid,
srvowner FROM pg_catalog.pg_foreign_server AS fk WHERE srvowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.srvowner));
SELECT ctid,
srvfdw FROM pg_catalog.pg_foreign_server AS fk WHERE srvfdw <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_foreign_data_wrapper AS pk WHERE pk.oid = fk.srvfdw));
SELECT ctid,
indexrelid FROM pg_catalog.pg_index AS fk WHERE indexrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.indexrelid));
SELECT ctid,
indrelid FROM pg_catalog.pg_index AS fk WHERE indrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.indrelid));
SELECT ctid,
inhrelid FROM pg_catalog.pg_inherits AS fk WHERE inhrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.inhrelid));
SELECT ctid,
inhparent FROM pg_catalog.pg_inherits AS fk WHERE inhparent <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.inhparent));
SELECT ctid,
lanowner FROM pg_catalog.pg_language AS fk WHERE lanowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.lanowner));
SELECT ctid,
lanplcallfoid FROM pg_catalog.pg_language AS fk WHERE lanplcallfoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.lanplcallfoid));
SELECT ctid,
laninline FROM pg_catalog.pg_language AS fk WHERE laninline <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.laninline));
SELECT ctid,
lanvalidator FROM pg_catalog.pg_language AS fk WHERE lanvalidator <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.lanvalidator));
SELECT ctid,
loid FROM pg_catalog.pg_largeobject AS fk WHERE loid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_largeobject_metadata AS pk WHERE pk.oid = fk.loid));
SELECT ctid,
lomowner FROM pg_catalog.pg_largeobject_metadata AS fk WHERE lomowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.lomowner));
SELECT ctid,
nspowner FROM pg_catalog.pg_namespace AS fk WHERE nspowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.nspowner));
SELECT ctid,
opcmethod FROM pg_catalog.pg_opclass AS fk WHERE opcmethod <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.opcmethod));
SELECT ctid,
opcnamespace FROM pg_catalog.pg_opclass AS fk WHERE opcnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.opcnamespace));
SELECT ctid,
opcowner FROM pg_catalog.pg_opclass AS fk WHERE opcowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.opcowner));
SELECT ctid,
opcfamily FROM pg_catalog.pg_opclass AS fk WHERE opcfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.opcfamily));
SELECT ctid,
opcintype FROM pg_catalog.pg_opclass AS fk WHERE opcintype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.opcintype));
SELECT ctid,
opckeytype FROM pg_catalog.pg_opclass AS fk WHERE opckeytype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.opckeytype));
SELECT ctid,
oprnamespace FROM pg_catalog.pg_operator AS fk WHERE oprnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.oprnamespace));
SELECT ctid,
oprowner FROM pg_catalog.pg_operator AS fk WHERE oprowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.oprowner));
SELECT ctid,
oprleft FROM pg_catalog.pg_operator AS fk WHERE oprleft <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.oprleft));
SELECT ctid,
oprright FROM pg_catalog.pg_operator AS fk WHERE oprright <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.oprright));
SELECT ctid,
oprresult FROM pg_catalog.pg_operator AS fk WHERE oprresult <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.oprresult));
SELECT ctid,
oprcom FROM pg_catalog.pg_operator AS fk WHERE oprcom <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.oprcom));
SELECT ctid,
oprnegate FROM pg_catalog.pg_operator AS fk WHERE oprnegate <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.oprnegate));
SELECT ctid,
oprcode FROM pg_catalog.pg_operator AS fk WHERE oprcode <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.oprcode));
SELECT ctid,
oprrest FROM pg_catalog.pg_operator AS fk WHERE oprrest <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.oprrest));
SELECT ctid,
oprjoin FROM pg_catalog.pg_operator AS fk WHERE oprjoin <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.oprjoin));
SELECT ctid,
opfmethod FROM pg_catalog.pg_opfamily AS fk WHERE opfmethod <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.opfmethod));
SELECT ctid,
opfnamespace FROM pg_catalog.pg_opfamily AS fk WHERE opfnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.opfnamespace));
SELECT ctid,
opfowner FROM pg_catalog.pg_opfamily AS fk WHERE opfowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.opfowner));
SELECT ctid,
polrelid FROM pg_catalog.pg_policy AS fk WHERE polrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.polrelid));
SELECT ctid,
pronamespace FROM pg_catalog.pg_proc AS fk WHERE pronamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.pronamespace));
SELECT ctid,
proowner FROM pg_catalog.pg_proc AS fk WHERE proowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.proowner));
SELECT ctid,
prolang FROM pg_catalog.pg_proc AS fk WHERE prolang <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_language AS pk WHERE pk.oid = fk.prolang));
SELECT ctid,
provariadic FROM pg_catalog.pg_proc AS fk WHERE provariadic <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.provariadic));
SELECT ctid,
protransform FROM pg_catalog.pg_proc AS fk WHERE protransform <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.protransform));
SELECT ctid,
prorettype FROM pg_catalog.pg_proc AS fk WHERE prorettype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.prorettype));
SELECT ctid,
rngtypid FROM pg_catalog.pg_range AS fk WHERE rngtypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.rngtypid));
SELECT ctid,
rngsubtype FROM pg_catalog.pg_range AS fk WHERE rngsubtype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.rngsubtype));
SELECT ctid,
rngcollation FROM pg_catalog.pg_range AS fk WHERE rngcollation <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_collation AS pk WHERE pk.oid = fk.rngcollation));
SELECT ctid,
rngsubopc FROM pg_catalog.pg_range AS fk WHERE rngsubopc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opclass AS pk WHERE pk.oid = fk.rngsubopc));
SELECT ctid,
rngcanonical FROM pg_catalog.pg_range AS fk WHERE rngcanonical <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.rngcanonical));
SELECT ctid,
rngsubdiff FROM pg_catalog.pg_range AS fk WHERE rngsubdiff <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.rngsubdiff));
SELECT ctid,
ev_class FROM pg_catalog.pg_rewrite AS fk WHERE ev_class <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.ev_class));
SELECT ctid,
refclassid FROM pg_catalog.pg_shdepend AS fk WHERE refclassid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.refclassid));
SELECT ctid,
classoid FROM pg_catalog.pg_shdescription AS fk WHERE classoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.classoid));
SELECT ctid,
starelid FROM pg_catalog.pg_statistic AS fk WHERE starelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.starelid));
SELECT ctid,
staop1 FROM pg_catalog.pg_statistic AS fk WHERE staop1 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop1));
SELECT ctid,
staop2 FROM pg_catalog.pg_statistic AS fk WHERE staop2 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop2));
SELECT ctid,
staop3 FROM pg_catalog.pg_statistic AS fk WHERE staop3 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop3));
SELECT ctid,
staop4 FROM pg_catalog.pg_statistic AS fk WHERE staop4 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop4));
SELECT ctid,
staop5 FROM pg_catalog.pg_statistic AS fk WHERE staop5 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop5));
SELECT ctid,
spcowner FROM pg_catalog.pg_tablespace AS fk WHERE spcowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.spcowner));
SELECT ctid,
trftype FROM pg_catalog.pg_transform AS fk WHERE trftype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.trftype));
SELECT ctid,
trflang FROM pg_catalog.pg_transform AS fk WHERE trflang <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_language AS pk WHERE pk.oid = fk.trflang));
SELECT ctid,
trffromsql FROM pg_catalog.pg_transform AS fk WHERE trffromsql <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.trffromsql));
SELECT ctid,
trftosql FROM pg_catalog.pg_transform AS fk WHERE trftosql <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.trftosql));
SELECT ctid,
tgrelid FROM pg_catalog.pg_trigger AS fk WHERE tgrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.tgrelid));
SELECT ctid,
tgfoid FROM pg_catalog.pg_trigger AS fk WHERE tgfoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.tgfoid));
SELECT ctid,
tgconstrrelid FROM pg_catalog.pg_trigger AS fk WHERE tgconstrrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.tgconstrrelid));
SELECT ctid,
tgconstrindid FROM pg_catalog.pg_trigger AS fk WHERE tgconstrindid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.tgconstrindid));
SELECT ctid,
tgconstraint FROM pg_catalog.pg_trigger AS fk WHERE tgconstraint <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_constraint AS pk WHERE pk.oid = fk.tgconstraint));
SELECT ctid,
cfgnamespace FROM pg_catalog.pg_ts_config AS fk WHERE cfgnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.cfgnamespace));
SELECT ctid,
cfgowner FROM pg_catalog.pg_ts_config AS fk WHERE cfgowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.cfgowner));
SELECT ctid,
cfgparser FROM pg_catalog.pg_ts_config AS fk WHERE cfgparser <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_parser AS pk WHERE pk.oid = fk.cfgparser));
SELECT ctid,
mapcfg FROM pg_catalog.pg_ts_config_map AS fk WHERE mapcfg <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_config AS pk WHERE pk.oid = fk.mapcfg));
SELECT ctid,
mapdict FROM pg_catalog.pg_ts_config_map AS fk WHERE mapdict <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_dict AS pk WHERE pk.oid = fk.mapdict));
SELECT ctid,
dictnamespace FROM pg_catalog.pg_ts_dict AS fk WHERE dictnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.dictnamespace));
SELECT ctid,
dictowner FROM pg_catalog.pg_ts_dict AS fk WHERE dictowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.dictowner));
SELECT ctid,
dicttemplate FROM pg_catalog.pg_ts_dict AS fk WHERE dicttemplate <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_template AS pk WHERE pk.oid = fk.dicttemplate));
SELECT ctid,
prsnamespace FROM pg_catalog.pg_ts_parser AS fk WHERE prsnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.prsnamespace));
SELECT ctid,
prsstart FROM pg_catalog.pg_ts_parser AS fk WHERE prsstart <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prsstart));
SELECT ctid,
prstoken FROM pg_catalog.pg_ts_parser AS fk WHERE prstoken <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prstoken));
SELECT ctid,
prsend FROM pg_catalog.pg_ts_parser AS fk WHERE prsend <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prsend));
SELECT ctid,
prsheadline FROM pg_catalog.pg_ts_parser AS fk WHERE prsheadline <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prsheadline));
SELECT ctid,
prslextype FROM pg_catalog.pg_ts_parser AS fk WHERE prslextype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prslextype));
SELECT ctid,
tmplnamespace FROM pg_catalog.pg_ts_template AS fk WHERE tmplnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.tmplnamespace));
SELECT ctid,
tmplinit FROM pg_catalog.pg_ts_template AS fk WHERE tmplinit <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.tmplinit));
SELECT ctid,
tmpllexize FROM pg_catalog.pg_ts_template AS fk WHERE tmpllexize <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.tmpllexize));
SELECT ctid,
typnamespace FROM pg_catalog.pg_type AS fk WHERE typnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.typnamespace));
SELECT ctid,
typowner FROM pg_catalog.pg_type AS fk WHERE typowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.typowner));
SELECT ctid,
typrelid FROM pg_catalog.pg_type AS fk WHERE typrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.typrelid));
SELECT ctid,
typelem FROM pg_catalog.pg_type AS fk WHERE typelem <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.typelem));
SELECT ctid,
typarray FROM pg_catalog.pg_type AS fk WHERE typarray <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.typarray));
SELECT ctid,
typinput FROM pg_catalog.pg_type AS fk WHERE typinput <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typinput));
SELECT ctid,
typoutput FROM pg_catalog.pg_type AS fk WHERE typoutput <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typoutput));
SELECT ctid,
typreceive FROM pg_catalog.pg_type AS fk WHERE typreceive <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typreceive));
SELECT ctid,
typsend FROM pg_catalog.pg_type AS fk WHERE typsend <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typsend));
SELECT ctid,
typmodin FROM pg_catalog.pg_type AS fk WHERE typmodin <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typmodin));
SELECT ctid,
typmodout FROM pg_catalog.pg_type AS fk WHERE typmodout <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typmodout));
SELECT ctid,
typanalyze FROM pg_catalog.pg_type AS fk WHERE typanalyze <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typanalyze));
SELECT ctid,
typbasetype FROM pg_catalog.pg_type AS fk WHERE typbasetype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.typbasetype));
SELECT ctid,
typcollation FROM pg_catalog.pg_type AS fk WHERE typcollation <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_collation AS pk WHERE pk.oid = fk.typcollation));
SELECT ctid,
conpfeqop FROM (SELECT ctid,
unnest(conpfeqop) AS conpfeqop FROM pg_catalog.pg_constraint) AS fk WHERE conpfeqop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conpfeqop));
SELECT ctid,
conppeqop FROM (SELECT ctid,
unnest(conppeqop) AS conppeqop FROM pg_catalog.pg_constraint) AS fk WHERE conppeqop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conppeqop));
SELECT ctid,
conffeqop FROM (SELECT ctid,
unnest(conffeqop) AS conffeqop FROM pg_catalog.pg_constraint) AS fk WHERE conffeqop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conffeqop));
SELECT ctid,
conexclop FROM (SELECT ctid,
unnest(conexclop) AS conexclop FROM pg_catalog.pg_constraint) AS fk WHERE conexclop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conexclop));
SELECT ctid,
proallargtypes FROM (SELECT ctid,
unnest(proallargtypes) AS proallargtypes FROM pg_catalog.pg_proc) AS fk WHERE proallargtypes <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.proallargtypes));"
`;

exports[`kitchen sink upstream upstream/oidjoins.sql 2`] = `
"SELECT ctid,
aggfnoid FROM pg_catalog.pg_aggregate AS fk WHERE aggfnoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggfnoid));
SELECT ctid,
aggtransfn FROM pg_catalog.pg_aggregate AS fk WHERE aggtransfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggtransfn));
SELECT ctid,
aggfinalfn FROM pg_catalog.pg_aggregate AS fk WHERE aggfinalfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggfinalfn));
SELECT ctid,
aggmtransfn FROM pg_catalog.pg_aggregate AS fk WHERE aggmtransfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggmtransfn));
SELECT ctid,
aggminvtransfn FROM pg_catalog.pg_aggregate AS fk WHERE aggminvtransfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggminvtransfn));
SELECT ctid,
aggmfinalfn FROM pg_catalog.pg_aggregate AS fk WHERE aggmfinalfn <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.aggmfinalfn));
SELECT ctid,
aggsortop FROM pg_catalog.pg_aggregate AS fk WHERE aggsortop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.aggsortop));
SELECT ctid,
aggtranstype FROM pg_catalog.pg_aggregate AS fk WHERE aggtranstype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.aggtranstype));
SELECT ctid,
aggmtranstype FROM pg_catalog.pg_aggregate AS fk WHERE aggmtranstype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.aggmtranstype));
SELECT ctid,
amhandler FROM pg_catalog.pg_am AS fk WHERE amhandler <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.amhandler));
SELECT ctid,
amopfamily FROM pg_catalog.pg_amop AS fk WHERE amopfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.amopfamily));
SELECT ctid,
amoplefttype FROM pg_catalog.pg_amop AS fk WHERE amoplefttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amoplefttype));
SELECT ctid,
amoprighttype FROM pg_catalog.pg_amop AS fk WHERE amoprighttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amoprighttype));
SELECT ctid,
amopopr FROM pg_catalog.pg_amop AS fk WHERE amopopr <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.amopopr));
SELECT ctid,
amopmethod FROM pg_catalog.pg_amop AS fk WHERE amopmethod <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.amopmethod));
SELECT ctid,
amopsortfamily FROM pg_catalog.pg_amop AS fk WHERE amopsortfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.amopsortfamily));
SELECT ctid,
amprocfamily FROM pg_catalog.pg_amproc AS fk WHERE amprocfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.amprocfamily));
SELECT ctid,
amproclefttype FROM pg_catalog.pg_amproc AS fk WHERE amproclefttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amproclefttype));
SELECT ctid,
amprocrighttype FROM pg_catalog.pg_amproc AS fk WHERE amprocrighttype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.amprocrighttype));
SELECT ctid,
amproc FROM pg_catalog.pg_amproc AS fk WHERE amproc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.amproc));
SELECT ctid,
adrelid FROM pg_catalog.pg_attrdef AS fk WHERE adrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.adrelid));
SELECT ctid,
attrelid FROM pg_catalog.pg_attribute AS fk WHERE attrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.attrelid));
SELECT ctid,
atttypid FROM pg_catalog.pg_attribute AS fk WHERE atttypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.atttypid));
SELECT ctid,
attcollation FROM pg_catalog.pg_attribute AS fk WHERE attcollation <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_collation AS pk WHERE pk.oid = fk.attcollation));
SELECT ctid,
castsource FROM pg_catalog.pg_cast AS fk WHERE castsource <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.castsource));
SELECT ctid,
casttarget FROM pg_catalog.pg_cast AS fk WHERE casttarget <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.casttarget));
SELECT ctid,
castfunc FROM pg_catalog.pg_cast AS fk WHERE castfunc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.castfunc));
SELECT ctid,
relnamespace FROM pg_catalog.pg_class AS fk WHERE relnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.relnamespace));
SELECT ctid,
reltype FROM pg_catalog.pg_class AS fk WHERE reltype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.reltype));
SELECT ctid,
reloftype FROM pg_catalog.pg_class AS fk WHERE reloftype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.reloftype));
SELECT ctid,
relowner FROM pg_catalog.pg_class AS fk WHERE relowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.relowner));
SELECT ctid,
relam FROM pg_catalog.pg_class AS fk WHERE relam <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.relam));
SELECT ctid,
reltablespace FROM pg_catalog.pg_class AS fk WHERE reltablespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_tablespace AS pk WHERE pk.oid = fk.reltablespace));
SELECT ctid,
reltoastrelid FROM pg_catalog.pg_class AS fk WHERE reltoastrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.reltoastrelid));
SELECT ctid,
collnamespace FROM pg_catalog.pg_collation AS fk WHERE collnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.collnamespace));
SELECT ctid,
collowner FROM pg_catalog.pg_collation AS fk WHERE collowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.collowner));
SELECT ctid,
connamespace FROM pg_catalog.pg_constraint AS fk WHERE connamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.connamespace));
SELECT ctid,
conrelid FROM pg_catalog.pg_constraint AS fk WHERE conrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.conrelid));
SELECT ctid,
contypid FROM pg_catalog.pg_constraint AS fk WHERE contypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.contypid));
SELECT ctid,
conindid FROM pg_catalog.pg_constraint AS fk WHERE conindid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.conindid));
SELECT ctid,
confrelid FROM pg_catalog.pg_constraint AS fk WHERE confrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.confrelid));
SELECT ctid,
connamespace FROM pg_catalog.pg_conversion AS fk WHERE connamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.connamespace));
SELECT ctid,
conowner FROM pg_catalog.pg_conversion AS fk WHERE conowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.conowner));
SELECT ctid,
conproc FROM pg_catalog.pg_conversion AS fk WHERE conproc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.conproc));
SELECT ctid,
datdba FROM pg_catalog.pg_database AS fk WHERE datdba <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.datdba));
SELECT ctid,
dattablespace FROM pg_catalog.pg_database AS fk WHERE dattablespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_tablespace AS pk WHERE pk.oid = fk.dattablespace));
SELECT ctid,
setdatabase FROM pg_catalog.pg_db_role_setting AS fk WHERE setdatabase <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_database AS pk WHERE pk.oid = fk.setdatabase));
SELECT ctid,
classid FROM pg_catalog.pg_depend AS fk WHERE classid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.classid));
SELECT ctid,
refclassid FROM pg_catalog.pg_depend AS fk WHERE refclassid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.refclassid));
SELECT ctid,
classoid FROM pg_catalog.pg_description AS fk WHERE classoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.classoid));
SELECT ctid,
enumtypid FROM pg_catalog.pg_enum AS fk WHERE enumtypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.enumtypid));
SELECT ctid,
extowner FROM pg_catalog.pg_extension AS fk WHERE extowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.extowner));
SELECT ctid,
extnamespace FROM pg_catalog.pg_extension AS fk WHERE extnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.extnamespace));
SELECT ctid,
fdwowner FROM pg_catalog.pg_foreign_data_wrapper AS fk WHERE fdwowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.fdwowner));
SELECT ctid,
srvowner FROM pg_catalog.pg_foreign_server AS fk WHERE srvowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.srvowner));
SELECT ctid,
srvfdw FROM pg_catalog.pg_foreign_server AS fk WHERE srvfdw <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_foreign_data_wrapper AS pk WHERE pk.oid = fk.srvfdw));
SELECT ctid,
indexrelid FROM pg_catalog.pg_index AS fk WHERE indexrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.indexrelid));
SELECT ctid,
indrelid FROM pg_catalog.pg_index AS fk WHERE indrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.indrelid));
SELECT ctid,
inhrelid FROM pg_catalog.pg_inherits AS fk WHERE inhrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.inhrelid));
SELECT ctid,
inhparent FROM pg_catalog.pg_inherits AS fk WHERE inhparent <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.inhparent));
SELECT ctid,
lanowner FROM pg_catalog.pg_language AS fk WHERE lanowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.lanowner));
SELECT ctid,
lanplcallfoid FROM pg_catalog.pg_language AS fk WHERE lanplcallfoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.lanplcallfoid));
SELECT ctid,
laninline FROM pg_catalog.pg_language AS fk WHERE laninline <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.laninline));
SELECT ctid,
lanvalidator FROM pg_catalog.pg_language AS fk WHERE lanvalidator <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.lanvalidator));
SELECT ctid,
loid FROM pg_catalog.pg_largeobject AS fk WHERE loid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_largeobject_metadata AS pk WHERE pk.oid = fk.loid));
SELECT ctid,
lomowner FROM pg_catalog.pg_largeobject_metadata AS fk WHERE lomowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.lomowner));
SELECT ctid,
nspowner FROM pg_catalog.pg_namespace AS fk WHERE nspowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.nspowner));
SELECT ctid,
opcmethod FROM pg_catalog.pg_opclass AS fk WHERE opcmethod <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.opcmethod));
SELECT ctid,
opcnamespace FROM pg_catalog.pg_opclass AS fk WHERE opcnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.opcnamespace));
SELECT ctid,
opcowner FROM pg_catalog.pg_opclass AS fk WHERE opcowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.opcowner));
SELECT ctid,
opcfamily FROM pg_catalog.pg_opclass AS fk WHERE opcfamily <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opfamily AS pk WHERE pk.oid = fk.opcfamily));
SELECT ctid,
opcintype FROM pg_catalog.pg_opclass AS fk WHERE opcintype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.opcintype));
SELECT ctid,
opckeytype FROM pg_catalog.pg_opclass AS fk WHERE opckeytype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.opckeytype));
SELECT ctid,
oprnamespace FROM pg_catalog.pg_operator AS fk WHERE oprnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.oprnamespace));
SELECT ctid,
oprowner FROM pg_catalog.pg_operator AS fk WHERE oprowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.oprowner));
SELECT ctid,
oprleft FROM pg_catalog.pg_operator AS fk WHERE oprleft <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.oprleft));
SELECT ctid,
oprright FROM pg_catalog.pg_operator AS fk WHERE oprright <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.oprright));
SELECT ctid,
oprresult FROM pg_catalog.pg_operator AS fk WHERE oprresult <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.oprresult));
SELECT ctid,
oprcom FROM pg_catalog.pg_operator AS fk WHERE oprcom <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.oprcom));
SELECT ctid,
oprnegate FROM pg_catalog.pg_operator AS fk WHERE oprnegate <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.oprnegate));
SELECT ctid,
oprcode FROM pg_catalog.pg_operator AS fk WHERE oprcode <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.oprcode));
SELECT ctid,
oprrest FROM pg_catalog.pg_operator AS fk WHERE oprrest <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.oprrest));
SELECT ctid,
oprjoin FROM pg_catalog.pg_operator AS fk WHERE oprjoin <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.oprjoin));
SELECT ctid,
opfmethod FROM pg_catalog.pg_opfamily AS fk WHERE opfmethod <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_am AS pk WHERE pk.oid = fk.opfmethod));
SELECT ctid,
opfnamespace FROM pg_catalog.pg_opfamily AS fk WHERE opfnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.opfnamespace));
SELECT ctid,
opfowner FROM pg_catalog.pg_opfamily AS fk WHERE opfowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.opfowner));
SELECT ctid,
polrelid FROM pg_catalog.pg_policy AS fk WHERE polrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.polrelid));
SELECT ctid,
pronamespace FROM pg_catalog.pg_proc AS fk WHERE pronamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.pronamespace));
SELECT ctid,
proowner FROM pg_catalog.pg_proc AS fk WHERE proowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.proowner));
SELECT ctid,
prolang FROM pg_catalog.pg_proc AS fk WHERE prolang <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_language AS pk WHERE pk.oid = fk.prolang));
SELECT ctid,
provariadic FROM pg_catalog.pg_proc AS fk WHERE provariadic <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.provariadic));
SELECT ctid,
protransform FROM pg_catalog.pg_proc AS fk WHERE protransform <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.protransform));
SELECT ctid,
prorettype FROM pg_catalog.pg_proc AS fk WHERE prorettype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.prorettype));
SELECT ctid,
rngtypid FROM pg_catalog.pg_range AS fk WHERE rngtypid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.rngtypid));
SELECT ctid,
rngsubtype FROM pg_catalog.pg_range AS fk WHERE rngsubtype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.rngsubtype));
SELECT ctid,
rngcollation FROM pg_catalog.pg_range AS fk WHERE rngcollation <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_collation AS pk WHERE pk.oid = fk.rngcollation));
SELECT ctid,
rngsubopc FROM pg_catalog.pg_range AS fk WHERE rngsubopc <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_opclass AS pk WHERE pk.oid = fk.rngsubopc));
SELECT ctid,
rngcanonical FROM pg_catalog.pg_range AS fk WHERE rngcanonical <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.rngcanonical));
SELECT ctid,
rngsubdiff FROM pg_catalog.pg_range AS fk WHERE rngsubdiff <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.rngsubdiff));
SELECT ctid,
ev_class FROM pg_catalog.pg_rewrite AS fk WHERE ev_class <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.ev_class));
SELECT ctid,
refclassid FROM pg_catalog.pg_shdepend AS fk WHERE refclassid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.refclassid));
SELECT ctid,
classoid FROM pg_catalog.pg_shdescription AS fk WHERE classoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.classoid));
SELECT ctid,
starelid FROM pg_catalog.pg_statistic AS fk WHERE starelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.starelid));
SELECT ctid,
staop1 FROM pg_catalog.pg_statistic AS fk WHERE staop1 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop1));
SELECT ctid,
staop2 FROM pg_catalog.pg_statistic AS fk WHERE staop2 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop2));
SELECT ctid,
staop3 FROM pg_catalog.pg_statistic AS fk WHERE staop3 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop3));
SELECT ctid,
staop4 FROM pg_catalog.pg_statistic AS fk WHERE staop4 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop4));
SELECT ctid,
staop5 FROM pg_catalog.pg_statistic AS fk WHERE staop5 <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.staop5));
SELECT ctid,
spcowner FROM pg_catalog.pg_tablespace AS fk WHERE spcowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.spcowner));
SELECT ctid,
trftype FROM pg_catalog.pg_transform AS fk WHERE trftype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.trftype));
SELECT ctid,
trflang FROM pg_catalog.pg_transform AS fk WHERE trflang <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_language AS pk WHERE pk.oid = fk.trflang));
SELECT ctid,
trffromsql FROM pg_catalog.pg_transform AS fk WHERE trffromsql <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.trffromsql));
SELECT ctid,
trftosql FROM pg_catalog.pg_transform AS fk WHERE trftosql <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.trftosql));
SELECT ctid,
tgrelid FROM pg_catalog.pg_trigger AS fk WHERE tgrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.tgrelid));
SELECT ctid,
tgfoid FROM pg_catalog.pg_trigger AS fk WHERE tgfoid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.tgfoid));
SELECT ctid,
tgconstrrelid FROM pg_catalog.pg_trigger AS fk WHERE tgconstrrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.tgconstrrelid));
SELECT ctid,
tgconstrindid FROM pg_catalog.pg_trigger AS fk WHERE tgconstrindid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.tgconstrindid));
SELECT ctid,
tgconstraint FROM pg_catalog.pg_trigger AS fk WHERE tgconstraint <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_constraint AS pk WHERE pk.oid = fk.tgconstraint));
SELECT ctid,
cfgnamespace FROM pg_catalog.pg_ts_config AS fk WHERE cfgnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.cfgnamespace));
SELECT ctid,
cfgowner FROM pg_catalog.pg_ts_config AS fk WHERE cfgowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.cfgowner));
SELECT ctid,
cfgparser FROM pg_catalog.pg_ts_config AS fk WHERE cfgparser <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_parser AS pk WHERE pk.oid = fk.cfgparser));
SELECT ctid,
mapcfg FROM pg_catalog.pg_ts_config_map AS fk WHERE mapcfg <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_config AS pk WHERE pk.oid = fk.mapcfg));
SELECT ctid,
mapdict FROM pg_catalog.pg_ts_config_map AS fk WHERE mapdict <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_dict AS pk WHERE pk.oid = fk.mapdict));
SELECT ctid,
dictnamespace FROM pg_catalog.pg_ts_dict AS fk WHERE dictnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.dictnamespace));
SELECT ctid,
dictowner FROM pg_catalog.pg_ts_dict AS fk WHERE dictowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.dictowner));
SELECT ctid,
dicttemplate FROM pg_catalog.pg_ts_dict AS fk WHERE dicttemplate <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_ts_template AS pk WHERE pk.oid = fk.dicttemplate));
SELECT ctid,
prsnamespace FROM pg_catalog.pg_ts_parser AS fk WHERE prsnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.prsnamespace));
SELECT ctid,
prsstart FROM pg_catalog.pg_ts_parser AS fk WHERE prsstart <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prsstart));
SELECT ctid,
prstoken FROM pg_catalog.pg_ts_parser AS fk WHERE prstoken <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prstoken));
SELECT ctid,
prsend FROM pg_catalog.pg_ts_parser AS fk WHERE prsend <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prsend));
SELECT ctid,
prsheadline FROM pg_catalog.pg_ts_parser AS fk WHERE prsheadline <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prsheadline));
SELECT ctid,
prslextype FROM pg_catalog.pg_ts_parser AS fk WHERE prslextype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.prslextype));
SELECT ctid,
tmplnamespace FROM pg_catalog.pg_ts_template AS fk WHERE tmplnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.tmplnamespace));
SELECT ctid,
tmplinit FROM pg_catalog.pg_ts_template AS fk WHERE tmplinit <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.tmplinit));
SELECT ctid,
tmpllexize FROM pg_catalog.pg_ts_template AS fk WHERE tmpllexize <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.tmpllexize));
SELECT ctid,
typnamespace FROM pg_catalog.pg_type AS fk WHERE typnamespace <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_namespace AS pk WHERE pk.oid = fk.typnamespace));
SELECT ctid,
typowner FROM pg_catalog.pg_type AS fk WHERE typowner <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_authid AS pk WHERE pk.oid = fk.typowner));
SELECT ctid,
typrelid FROM pg_catalog.pg_type AS fk WHERE typrelid <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_class AS pk WHERE pk.oid = fk.typrelid));
SELECT ctid,
typelem FROM pg_catalog.pg_type AS fk WHERE typelem <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.typelem));
SELECT ctid,
typarray FROM pg_catalog.pg_type AS fk WHERE typarray <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.typarray));
SELECT ctid,
typinput FROM pg_catalog.pg_type AS fk WHERE typinput <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typinput));
SELECT ctid,
typoutput FROM pg_catalog.pg_type AS fk WHERE typoutput <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typoutput));
SELECT ctid,
typreceive FROM pg_catalog.pg_type AS fk WHERE typreceive <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typreceive));
SELECT ctid,
typsend FROM pg_catalog.pg_type AS fk WHERE typsend <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typsend));
SELECT ctid,
typmodin FROM pg_catalog.pg_type AS fk WHERE typmodin <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typmodin));
SELECT ctid,
typmodout FROM pg_catalog.pg_type AS fk WHERE typmodout <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typmodout));
SELECT ctid,
typanalyze FROM pg_catalog.pg_type AS fk WHERE typanalyze <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_proc AS pk WHERE pk.oid = fk.typanalyze));
SELECT ctid,
typbasetype FROM pg_catalog.pg_type AS fk WHERE typbasetype <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.typbasetype));
SELECT ctid,
typcollation FROM pg_catalog.pg_type AS fk WHERE typcollation <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_collation AS pk WHERE pk.oid = fk.typcollation));
SELECT ctid,
conpfeqop FROM (SELECT ctid,
unnest(conpfeqop) AS conpfeqop FROM pg_catalog.pg_constraint) AS fk WHERE conpfeqop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conpfeqop));
SELECT ctid,
conppeqop FROM (SELECT ctid,
unnest(conppeqop) AS conppeqop FROM pg_catalog.pg_constraint) AS fk WHERE conppeqop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conppeqop));
SELECT ctid,
conffeqop FROM (SELECT ctid,
unnest(conffeqop) AS conffeqop FROM pg_catalog.pg_constraint) AS fk WHERE conffeqop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conffeqop));
SELECT ctid,
conexclop FROM (SELECT ctid,
unnest(conexclop) AS conexclop FROM pg_catalog.pg_constraint) AS fk WHERE conexclop <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_operator AS pk WHERE pk.oid = fk.conexclop));
SELECT ctid,
proallargtypes FROM (SELECT ctid,
unnest(proallargtypes) AS proallargtypes FROM pg_catalog.pg_proc) AS fk WHERE proallargtypes <> 0 AND NOT (EXISTS (SELECT 1 FROM pg_catalog.pg_type AS pk WHERE pk.oid = fk.proallargtypes));"
`;

exports[`kitchen sink upstream upstream/path.sql 1`] = `
"CREATE TABLE path_tbl (
f1 path
);
INSERT INTO path_tbl VALUES ('[(1,2),(3,4)]');
INSERT INTO path_tbl VALUES ('((1,2),(3,4))');
INSERT INTO path_tbl VALUES ('[(0,0),(3,0),(4,5),(1,6)]');
INSERT INTO path_tbl VALUES ('((1,2),(3,4))');
INSERT INTO path_tbl VALUES ('1,2 ,3,4');
INSERT INTO path_tbl VALUES ('[1,2,3, 4]');
INSERT INTO path_tbl VALUES ('[11,12,13,14]');
INSERT INTO path_tbl VALUES ('(11,12,13,14)');
INSERT INTO path_tbl VALUES ('[(,2),(3,4)]');
INSERT INTO path_tbl VALUES ('[(1,2),(3,4)');
SELECT f1 FROM path_tbl;
SELECT '' AS count,
f1 AS open_path FROM path_tbl WHERE isopen(f1);
SELECT '' AS count,
f1 AS closed_path FROM path_tbl WHERE isclosed(f1);
SELECT '' AS count,
pclose(f1) AS closed_path FROM path_tbl;
SELECT '' AS count,
popen(f1) AS open_path FROM path_tbl;"
`;

exports[`kitchen sink upstream upstream/path.sql 2`] = `
"CREATE TABLE path_tbl (
f1 path
);
INSERT INTO path_tbl VALUES ('[(1,2),(3,4)]');
INSERT INTO path_tbl VALUES ('((1,2),(3,4))');
INSERT INTO path_tbl VALUES ('[(0,0),(3,0),(4,5),(1,6)]');
INSERT INTO path_tbl VALUES ('((1,2),(3,4))');
INSERT INTO path_tbl VALUES ('1,2 ,3,4');
INSERT INTO path_tbl VALUES ('[1,2,3, 4]');
INSERT INTO path_tbl VALUES ('[11,12,13,14]');
INSERT INTO path_tbl VALUES ('(11,12,13,14)');
INSERT INTO path_tbl VALUES ('[(,2),(3,4)]');
INSERT INTO path_tbl VALUES ('[(1,2),(3,4)');
SELECT f1 FROM path_tbl;
SELECT '' AS count,
f1 AS open_path FROM path_tbl WHERE isopen(f1);
SELECT '' AS count,
f1 AS closed_path FROM path_tbl WHERE isclosed(f1);
SELECT '' AS count,
pclose(f1) AS closed_path FROM path_tbl;
SELECT '' AS count,
popen(f1) AS open_path FROM path_tbl;"
`;

exports[`kitchen sink upstream upstream/polygon.sql 1`] = `
"CREATE TABLE polygon_tbl (
f1 polygon
);
INSERT INTO polygon_tbl (f1) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
INSERT INTO polygon_tbl (f1) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
INSERT INTO polygon_tbl (f1) VALUES ('(0.0,0.0)');
INSERT INTO polygon_tbl (f1) VALUES ('(0.0,1.0),(0.0,1.0)');
INSERT INTO polygon_tbl (f1) VALUES ('0.0');
INSERT INTO polygon_tbl (f1) VALUES ('(0.0 0.0');
INSERT INTO polygon_tbl (f1) VALUES ('(0,1,2)');
INSERT INTO polygon_tbl (f1) VALUES ('(0,1,2,3');
INSERT INTO polygon_tbl (f1) VALUES ('asdf');
SELECT '' AS four,
* FROM polygon_tbl;
SELECT '' AS three,
p.* FROM polygon_tbl AS p WHERE p.f1 && '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS four,
p.* FROM polygon_tbl AS p WHERE p.f1 &< '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS two,
p.* FROM polygon_tbl AS p WHERE p.f1 &> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 << '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS zero,
p.* FROM polygon_tbl AS p WHERE p.f1 >> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 <@ '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon;
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 ~= '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon;
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 @> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon;
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon << '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon << '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"true\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon &> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon >> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon <@ '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon @> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '((0,4),(6,4),(1,2),(6,0),(0,0))'::polygon @> '((2,1),(2,3),(3,3),(3,1))'::polygon AS \\"false\\";
SELECT '((0,4),(6,4),(3,2),(6,0),(0,0))'::polygon @> '((2,1),(2,3),(3,3),(3,1))'::polygon AS \\"true\\";
SELECT '((1,1),(1,4),(5,4),(5,3),(2,3),(2,2),(5,2),(5,1))'::polygon @> '((3,2),(3,3),(4,3),(4,2))'::polygon AS \\"false\\";
SELECT '((0,0),(0,3),(3,3),(3,0))'::polygon @> '((2,1),(2,2),(3,2),(3,1))'::polygon AS \\"true\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon ~= '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon && '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"true\\";
SELECT '((0,4),(6,4),(1,2),(6,0),(0,0))'::polygon && '((2,1),(2,3),(3,3),(3,1))'::polygon AS \\"true\\";
SELECT '((1,4),(1,1),(4,1),(4,2),(2,2),(2,4),(1,4))'::polygon && '((3,3),(4,3),(4,4),(3,4),(3,3))'::polygon AS \\"false\\";
SELECT '((200,800),(800,800),(800,200),(200,200))' && '(1000,1000,0,0)'::polygon AS \\"true\\";
SELECT '(0,0)'::point <-> '((0,0),(1,2),(2,1))'::polygon AS on_corner,
'(1,1)'::point <-> '((0,0),(2,2),(1,3))'::polygon AS on_segment,
'(2,2)'::point <-> '((0,0),(1,4),(3,1))'::polygon AS inside,
'(3,3)'::point <-> '((0,2),(2,0),(2,2))'::polygon AS near_corner,
'(4,4)'::point <-> '((0,0),(0,3),(4,0))'::polygon AS near_segment;"
`;

exports[`kitchen sink upstream upstream/polygon.sql 2`] = `
"CREATE TABLE polygon_tbl (
f1 polygon
);
INSERT INTO polygon_tbl ( f1 ) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
INSERT INTO polygon_tbl ( f1 ) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
INSERT INTO polygon_tbl ( f1 ) VALUES ('(0.0,0.0)');
INSERT INTO polygon_tbl ( f1 ) VALUES ('(0.0,1.0),(0.0,1.0)');
INSERT INTO polygon_tbl ( f1 ) VALUES ('0.0');
INSERT INTO polygon_tbl ( f1 ) VALUES ('(0.0 0.0');
INSERT INTO polygon_tbl ( f1 ) VALUES ('(0,1,2)');
INSERT INTO polygon_tbl ( f1 ) VALUES ('(0,1,2,3');
INSERT INTO polygon_tbl ( f1 ) VALUES ('asdf');
SELECT '' AS four,
* FROM polygon_tbl;
SELECT '' AS three,
p.* FROM polygon_tbl AS p WHERE p.f1 && '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS four,
p.* FROM polygon_tbl AS p WHERE p.f1 &< '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS two,
p.* FROM polygon_tbl AS p WHERE p.f1 &> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 << '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS zero,
p.* FROM polygon_tbl AS p WHERE p.f1 >> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 <@ '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon;
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 ~= '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon;
SELECT '' AS one,
p.* FROM polygon_tbl AS p WHERE p.f1 @> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon;
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon << '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon << '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"true\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon &> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon >> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon <@ '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon @> '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '((0,4),(6,4),(1,2),(6,0),(0,0))'::polygon @> '((2,1),(2,3),(3,3),(3,1))'::polygon AS \\"false\\";
SELECT '((0,4),(6,4),(3,2),(6,0),(0,0))'::polygon @> '((2,1),(2,3),(3,3),(3,1))'::polygon AS \\"true\\";
SELECT '((1,1),(1,4),(5,4),(5,3),(2,3),(2,2),(5,2),(5,1))'::polygon @> '((3,2),(3,3),(4,3),(4,2))'::polygon AS \\"false\\";
SELECT '((0,0),(0,3),(3,3),(3,0))'::polygon @> '((2,1),(2,2),(3,2),(3,1))'::polygon AS \\"true\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon ~= '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"false\\";
SELECT '(2.0,0.0),(2.0,4.0),(0.0,0.0)'::polygon && '(3.0,1.0),(3.0,3.0),(1.0,0.0)'::polygon AS \\"true\\";
SELECT '((0,4),(6,4),(1,2),(6,0),(0,0))'::polygon && '((2,1),(2,3),(3,3),(3,1))'::polygon AS \\"true\\";
SELECT '((1,4),(1,1),(4,1),(4,2),(2,2),(2,4),(1,4))'::polygon && '((3,3),(4,3),(4,4),(3,4),(3,3))'::polygon AS \\"false\\";
SELECT '((200,800),(800,800),(800,200),(200,200))' && '(1000,1000,0,0)'::polygon AS \\"true\\";
SELECT '(0,0)'::point <-> '((0,0),(1,2),(2,1))'::polygon AS on_corner,
'(1,1)'::point <-> '((0,0),(2,2),(1,3))'::polygon AS on_segment,
'(2,2)'::point <-> '((0,0),(1,4),(3,1))'::polygon AS inside,
'(3,3)'::point <-> '((0,2),(2,0),(2,2))'::polygon AS near_corner,
'(4,4)'::point <-> '((0,0),(0,3),(4,0))'::polygon AS near_segment;"
`;

exports[`kitchen sink upstream upstream/random.sql 1`] = `
"SELECT count(*) FROM onek;
( ( SELECT unique1 AS random FROM onek ORDER BY random() LIMIT 1 ) INTERSECT ( SELECT unique1 AS random FROM onek ORDER BY random() LIMIT 1 ) ) INTERSECT ( SELECT unique1 AS random FROM onek ORDER BY random() LIMIT 1 );
SELECT count(*) AS random INTO random_tbl FROM onek WHERE random() < (1.0 / 10);
INSERT INTO random_tbl (random) SELECT count(*) FROM onek WHERE random() < (1.0 / 10);
INSERT INTO random_tbl (random) SELECT count(*) FROM onek WHERE random() < (1.0 / 10);
INSERT INTO random_tbl (random) SELECT count(*) FROM onek WHERE random() < (1.0 / 10);
SELECT random,
count(random) FROM random_tbl GROUP BY random HAVING count(random) > 3;
SELECT avg(random) FROM random_tbl HAVING avg(random) NOT BETWEEN 80 AND 120;"
`;

exports[`kitchen sink upstream upstream/random.sql 2`] = `
"SELECT count(*) FROM onek;
((SELECT unique1 AS random FROM onek ORDER BY random() LIMIT 1) INTERSECT (SELECT unique1 AS random FROM onek ORDER BY random() LIMIT 1)) INTERSECT (SELECT unique1 AS random FROM onek ORDER BY random() LIMIT 1);
SELECT count(*) AS random INTO random_tbl FROM onek WHERE random() < (1.0 / 10);
INSERT INTO random_tbl ( random ) SELECT count(*) FROM onek WHERE random() < (1.0 / 10);
INSERT INTO random_tbl ( random ) SELECT count(*) FROM onek WHERE random() < (1.0 / 10);
INSERT INTO random_tbl ( random ) SELECT count(*) FROM onek WHERE random() < (1.0 / 10);
SELECT random,
count(random) FROM random_tbl GROUP BY random HAVING count(random) > 3;
SELECT avg(random) FROM random_tbl HAVING avg(random) NOT BETWEEN 80 AND 120;"
`;

exports[`kitchen sink upstream upstream/reltime.sql 1`] = `
"CREATE TABLE reltime_tbl (
f1 reltime
);
INSERT INTO reltime_tbl (f1) VALUES ('@ 1 minute');
INSERT INTO reltime_tbl (f1) VALUES ('@ 5 hour');
INSERT INTO reltime_tbl (f1) VALUES ('@ 10 day');
INSERT INTO reltime_tbl (f1) VALUES ('@ 34 year');
INSERT INTO reltime_tbl (f1) VALUES ('@ 3 months');
INSERT INTO reltime_tbl (f1) VALUES ('@ 14 seconds ago');
INSERT INTO reltime_tbl (f1) VALUES ('badly formatted reltime');
INSERT INTO reltime_tbl (f1) VALUES ('@ 30 eons ago');
SELECT '' AS six,
* FROM reltime_tbl;
SELECT '' AS five,
* FROM reltime_tbl WHERE reltime_tbl.f1 <> '@ 10 days'::reltime;
SELECT '' AS three,
* FROM reltime_tbl WHERE reltime_tbl.f1 <= '@ 5 hours'::reltime;
SELECT '' AS three,
* FROM reltime_tbl WHERE reltime_tbl.f1 < '@ 1 day'::reltime;
SELECT '' AS one,
* FROM reltime_tbl WHERE reltime_tbl.f1 = '@ 34 years'::reltime;
SELECT '' AS two,
* FROM reltime_tbl WHERE reltime_tbl.f1 >= '@ 1 month'::reltime;
SELECT '' AS five,
* FROM reltime_tbl WHERE reltime_tbl.f1 > '@ 3 seconds ago'::reltime;
SELECT '' AS fifteen,
r1.*,
r2.* FROM reltime_tbl AS r1,
reltime_tbl AS r2 WHERE r1.f1 > r2.f1 ORDER BY r1.f1,
r2.f1;"
`;

exports[`kitchen sink upstream upstream/reltime.sql 2`] = `
"CREATE TABLE reltime_tbl (
f1 reltime
);
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 1 minute');
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 5 hour');
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 10 day');
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 34 year');
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 3 months');
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 14 seconds ago');
INSERT INTO reltime_tbl ( f1 ) VALUES ('badly formatted reltime');
INSERT INTO reltime_tbl ( f1 ) VALUES ('@ 30 eons ago');
SELECT '' AS six,
* FROM reltime_tbl;
SELECT '' AS five,
* FROM reltime_tbl WHERE reltime_tbl.f1 <> '@ 10 days'::reltime;
SELECT '' AS three,
* FROM reltime_tbl WHERE reltime_tbl.f1 <= '@ 5 hours'::reltime;
SELECT '' AS three,
* FROM reltime_tbl WHERE reltime_tbl.f1 < '@ 1 day'::reltime;
SELECT '' AS one,
* FROM reltime_tbl WHERE reltime_tbl.f1 = '@ 34 years'::reltime;
SELECT '' AS two,
* FROM reltime_tbl WHERE reltime_tbl.f1 >= '@ 1 month'::reltime;
SELECT '' AS five,
* FROM reltime_tbl WHERE reltime_tbl.f1 > '@ 3 seconds ago'::reltime;
SELECT '' AS fifteen,
r1.*,
r2.* FROM reltime_tbl AS r1,
reltime_tbl AS r2 WHERE r1.f1 > r2.f1 ORDER BY r1.f1,
r2.f1;"
`;

exports[`kitchen sink upstream upstream/select_distinct_on.sql 1`] = `
"SELECT DISTINCT ON ( string4 ) string4,
two,
ten FROM tmp ORDER BY string4 USING <,
two USING >,
ten USING <;
SELECT DISTINCT ON ( string4,
ten ) string4,
two,
ten FROM tmp ORDER BY string4 USING <,
two USING <,
ten USING <;
SELECT DISTINCT ON ( string4,
ten ) string4,
ten,
two FROM tmp ORDER BY string4 USING <,
ten USING >,
two USING <;
SELECT DISTINCT ON ( 1 ) floor(random()) AS r,
f1 FROM int4_tbl ORDER BY 1,
2;"
`;

exports[`kitchen sink upstream upstream/select_distinct_on.sql 2`] = `
"SELECT DISTINCT ON (string4) string4,
two,
ten FROM tmp ORDER BY string4 USING <,
two USING >,
ten USING <;
SELECT DISTINCT ON (string4,
ten) string4,
two,
ten FROM tmp ORDER BY string4 USING <,
two USING <,
ten USING <;
SELECT DISTINCT ON (string4,
ten) string4,
ten,
two FROM tmp ORDER BY string4 USING <,
ten USING >,
two USING <;
SELECT DISTINCT ON (1) floor(random()) AS r,
f1 FROM int4_tbl ORDER BY 1,
2;"
`;

exports[`kitchen sink upstream upstream/select_having.sql 1`] = `
"CREATE TABLE test_having (
a int,
b int,
c char(8),
d char(1)
);
INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A');
INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b');
INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c');
INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D');
INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e');
INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F');
INSERT INTO test_having VALUES (6, 4, 'cccc', 'g');
INSERT INTO test_having VALUES (7, 4, 'cccc', 'h');
INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I');
INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j');
SELECT b,
c FROM test_having GROUP BY b,
c HAVING count(*) = 1 ORDER BY b,
c;
SELECT b,
c FROM test_having GROUP BY b,
c HAVING b = 3 ORDER BY b,
c;
SELECT lower(c),
count(c) FROM test_having GROUP BY lower(c) HAVING count(*) > 2 OR min(a) = max(a) ORDER BY lower(c);
SELECT c,
max(a) FROM test_having GROUP BY c HAVING count(*) > 2 OR min(a) = max(a) ORDER BY c;
SELECT min(a),
max(a) FROM test_having HAVING min(a) = max(a);
SELECT min(a),
max(a) FROM test_having HAVING min(a) < max(a);
SELECT a FROM test_having HAVING min(a) < max(a);
SELECT 1 AS one FROM test_having HAVING a > 1;
SELECT 1 AS one FROM test_having HAVING 1 > 2;
SELECT 1 AS one FROM test_having HAVING 1 < 2;
SELECT 1 AS one FROM test_having WHERE (1 / a) = 1 HAVING 1 < 2;
DROP TABLE test_having;"
`;

exports[`kitchen sink upstream upstream/select_having.sql 2`] = `
"CREATE TABLE test_having (
a int,
b int,
c char(8),
d char(1)
);
INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A');
INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b');
INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c');
INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D');
INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e');
INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F');
INSERT INTO test_having VALUES (6, 4, 'cccc', 'g');
INSERT INTO test_having VALUES (7, 4, 'cccc', 'h');
INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I');
INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j');
SELECT b,
c FROM test_having GROUP BY b,
c HAVING count(*) = 1 ORDER BY b,
c;
SELECT b,
c FROM test_having GROUP BY b,
c HAVING b = 3 ORDER BY b,
c;
SELECT lower(c),
count(c) FROM test_having GROUP BY lower(c) HAVING count(*) > 2 OR min(a) = max(a) ORDER BY lower(c);
SELECT c,
max(a) FROM test_having GROUP BY c HAVING count(*) > 2 OR min(a) = max(a) ORDER BY c;
SELECT min(a),
max(a) FROM test_having HAVING min(a) = max(a);
SELECT min(a),
max(a) FROM test_having HAVING min(a) < max(a);
SELECT a FROM test_having HAVING min(a) < max(a);
SELECT 1 AS one FROM test_having HAVING a > 1;
SELECT 1 AS one FROM test_having HAVING 1 > 2;
SELECT 1 AS one FROM test_having HAVING 1 < 2;
SELECT 1 AS one FROM test_having WHERE (1 / a) = 1 HAVING 1 < 2;
DROP TABLE test_having;"
`;

exports[`kitchen sink upstream upstream/select_implicit.sql 1`] = `
"CREATE TABLE test_missing_target (
a int,
b int,
c char(8),
d char(1)
);
INSERT INTO test_missing_target VALUES (0, 1, 'XXXX', 'A');
INSERT INTO test_missing_target VALUES (1, 2, 'ABAB', 'b');
INSERT INTO test_missing_target VALUES (2, 2, 'ABAB', 'c');
INSERT INTO test_missing_target VALUES (3, 3, 'BBBB', 'D');
INSERT INTO test_missing_target VALUES (4, 3, 'BBBB', 'e');
INSERT INTO test_missing_target VALUES (5, 3, 'bbbb', 'F');
INSERT INTO test_missing_target VALUES (6, 4, 'cccc', 'g');
INSERT INTO test_missing_target VALUES (7, 4, 'cccc', 'h');
INSERT INTO test_missing_target VALUES (8, 4, 'CCCC', 'I');
INSERT INTO test_missing_target VALUES (9, 4, 'CCCC', 'j');
SELECT c,
count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c;
SELECT count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c;
SELECT count(*) FROM test_missing_target GROUP BY a ORDER BY b;
SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b;
SELECT test_missing_target.b,
count(*) FROM test_missing_target GROUP BY b ORDER BY b;
SELECT c FROM test_missing_target ORDER BY a;
SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b DESC;
SELECT count(*) FROM test_missing_target ORDER BY 1 DESC;
SELECT c,
count(*) FROM test_missing_target GROUP BY 1 ORDER BY 1;
SELECT c,
count(*) FROM test_missing_target GROUP BY 3;
SELECT count(*) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY b ORDER BY b;
SELECT a,
a FROM test_missing_target ORDER BY a;
SELECT a / 2,
a / 2 FROM test_missing_target ORDER BY a / 2;
SELECT a / 2,
a / 2 FROM test_missing_target GROUP BY a / 2 ORDER BY a / 2;
SELECT x.b,
count(*) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b ORDER BY x.b;
SELECT count(*) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b ORDER BY x.b;
SELECT count(*) INTO test_missing_target2 FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b ORDER BY x.b;
SELECT * FROM test_missing_target2;
SELECT a % 2,
count(b) FROM test_missing_target GROUP BY test_missing_target.a % 2 ORDER BY test_missing_target.a % 2;
SELECT count(c) FROM test_missing_target GROUP BY lower(test_missing_target.c) ORDER BY lower(test_missing_target.c);
SELECT count(a) FROM test_missing_target GROUP BY a ORDER BY b;
SELECT count(b) FROM test_missing_target GROUP BY b / 2 ORDER BY b / 2;
SELECT lower(test_missing_target.c),
count(c) FROM test_missing_target GROUP BY lower(c) ORDER BY lower(c);
SELECT a FROM test_missing_target ORDER BY upper(d);
SELECT count(b) FROM test_missing_target GROUP BY (b + 1) / 2 ORDER BY (b + 1) / 2 DESC;
SELECT count(x.a) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY b / 2 ORDER BY b / 2;
SELECT x.b / 2,
count(x.b) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b / 2 ORDER BY x.b / 2;
SELECT count(b) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b / 2;
SELECT count(x.b) INTO test_missing_target3 FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b / 2 ORDER BY x.b / 2;
SELECT * FROM test_missing_target3;
DROP TABLE test_missing_target;
DROP TABLE test_missing_target2;
DROP TABLE test_missing_target3;"
`;

exports[`kitchen sink upstream upstream/select_implicit.sql 2`] = `
"CREATE TABLE test_missing_target (
a int,
b int,
c char(8),
d char(1)
);
INSERT INTO test_missing_target VALUES (0, 1, 'XXXX', 'A');
INSERT INTO test_missing_target VALUES (1, 2, 'ABAB', 'b');
INSERT INTO test_missing_target VALUES (2, 2, 'ABAB', 'c');
INSERT INTO test_missing_target VALUES (3, 3, 'BBBB', 'D');
INSERT INTO test_missing_target VALUES (4, 3, 'BBBB', 'e');
INSERT INTO test_missing_target VALUES (5, 3, 'bbbb', 'F');
INSERT INTO test_missing_target VALUES (6, 4, 'cccc', 'g');
INSERT INTO test_missing_target VALUES (7, 4, 'cccc', 'h');
INSERT INTO test_missing_target VALUES (8, 4, 'CCCC', 'I');
INSERT INTO test_missing_target VALUES (9, 4, 'CCCC', 'j');
SELECT c,
count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c;
SELECT count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c;
SELECT count(*) FROM test_missing_target GROUP BY a ORDER BY b;
SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b;
SELECT test_missing_target.b,
count(*) FROM test_missing_target GROUP BY b ORDER BY b;
SELECT c FROM test_missing_target ORDER BY a;
SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b DESC;
SELECT count(*) FROM test_missing_target ORDER BY 1 DESC;
SELECT c,
count(*) FROM test_missing_target GROUP BY 1 ORDER BY 1;
SELECT c,
count(*) FROM test_missing_target GROUP BY 3;
SELECT count(*) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY b ORDER BY b;
SELECT a,
a FROM test_missing_target ORDER BY a;
SELECT a / 2,
a / 2 FROM test_missing_target ORDER BY a / 2;
SELECT a / 2,
a / 2 FROM test_missing_target GROUP BY a / 2 ORDER BY a / 2;
SELECT x.b,
count(*) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b ORDER BY x.b;
SELECT count(*) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b ORDER BY x.b;
SELECT count(*) INTO test_missing_target2 FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b ORDER BY x.b;
SELECT * FROM test_missing_target2;
SELECT a % 2,
count(b) FROM test_missing_target GROUP BY test_missing_target.a % 2 ORDER BY test_missing_target.a % 2;
SELECT count(c) FROM test_missing_target GROUP BY lower(test_missing_target.c) ORDER BY lower(test_missing_target.c);
SELECT count(a) FROM test_missing_target GROUP BY a ORDER BY b;
SELECT count(b) FROM test_missing_target GROUP BY b / 2 ORDER BY b / 2;
SELECT lower(test_missing_target.c),
count(c) FROM test_missing_target GROUP BY lower(c) ORDER BY lower(c);
SELECT a FROM test_missing_target ORDER BY upper(d);
SELECT count(b) FROM test_missing_target GROUP BY (b + 1) / 2 ORDER BY (b + 1) / 2 DESC;
SELECT count(x.a) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY b / 2 ORDER BY b / 2;
SELECT x.b / 2,
count(x.b) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b / 2 ORDER BY x.b / 2;
SELECT count(b) FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b / 2;
SELECT count(x.b) INTO test_missing_target3 FROM test_missing_target AS x,
test_missing_target AS y WHERE x.a = y.a GROUP BY x.b / 2 ORDER BY x.b / 2;
SELECT * FROM test_missing_target3;
DROP TABLE test_missing_target;
DROP TABLE test_missing_target2;
DROP TABLE test_missing_target3;"
`;

exports[`kitchen sink upstream upstream/text.sql 1`] = `
"SELECT 'this is a text string'::text = 'this is a text string'::text AS \\"true\\";
SELECT 'this is a text string'::text = 'this is a text strin'::text AS \\"false\\";
CREATE TABLE text_tbl (
f1 text
);
INSERT INTO text_tbl VALUES ('doh!');
INSERT INTO text_tbl VALUES ('hi de ho neighbor');
SELECT '' AS two,
* FROM text_tbl;
SELECT length(42);
SELECT 'four: '::text || (2 + 2);
SELECT 'four: ' || (2 + 2);
SELECT 3 || 4.0;
SELECT concat('one');
SELECT concat(1, 2, 3, 'hello', TRUE, FALSE, to_date('20100309', 'YYYYMMDD'));
SELECT concat_ws('#', 'one');
SELECT concat_ws('#', 1, 2, 3, 'hello', TRUE, FALSE, to_date('20100309', 'YYYYMMDD'));
SELECT concat_ws(',', 10, 20, NULL, 30);
SELECT concat_ws('', 10, 20, NULL, 30);
SELECT concat_ws(NULL, 10, 20, NULL, 30) IS NULL;
SELECT reverse('abcde');
SELECT i,
\\"left\\"('ahoj', i),
\\"right\\"('ahoj', i) FROM generate_series((-5), 5) AS t (i) ORDER BY i;
SELECT quote_literal('');
SELECT quote_literal('abc''');
SELECT quote_literal('\\\\');
SELECT concat(VARIADIC ARRAY[1, 2, 3]);
SELECT concat_ws(',', VARIADIC ARRAY[1, 2, 3]);
SELECT concat_ws(',', VARIADIC NULL::int[]);
SELECT concat(VARIADIC NULL::int[]) IS NULL;
SELECT concat(VARIADIC '{}'::int[]) = '';
SELECT concat_ws(',', VARIADIC 10);
SELECT format(NULL);
SELECT format('Hello');
SELECT format('Hello %s', 'World');
SELECT format('Hello %%');
SELECT format('Hello %%%%');
SELECT format('Hello %s %s', 'World');
SELECT format('Hello %s');
SELECT format('Hello %x', 20);
SELECT format('INSERT INTO %I VALUES(%L,%L)', 'mytab', 10, 'Hello');
SELECT format('%s%s%s', 'Hello', NULL, 'World');
SELECT format('INSERT INTO %I VALUES(%L,%L)', 'mytab', 10, NULL);
SELECT format('INSERT INTO %I VALUES(%L,%L)', 'mytab', NULL, 'Hello');
SELECT format('INSERT INTO %I VALUES(%L,%L)', NULL, 10, 'Hello');
SELECT format('%1$s %3$s', 1, 2, 3);
SELECT format('%1$s %12$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
SELECT format('%1$s %4$s', 1, 2, 3);
SELECT format('%1$s %13$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
SELECT format('%0$s', 'Hello');
SELECT format('%*0$s', 'Hello');
SELECT format('%1$', 1);
SELECT format('%1$1', 1);
SELECT format('Hello %s %1$s %s', 'World', 'Hello again');
SELECT format('Hello %s %s, %2$s %2$s', 'World', 'Hello again');
SELECT format('%s, %s', VARIADIC ARRAY['Hello', 'World']);
SELECT format('%s, %s', VARIADIC ARRAY[1, 2]);
SELECT format('%s, %s', VARIADIC ARRAY[TRUE, FALSE]);
SELECT format('%s, %s', VARIADIC ARRAY[TRUE, FALSE]::text[]);
SELECT format('%2$s, %1$s', VARIADIC ARRAY['first', 'second']);
SELECT format('%2$s, %1$s', VARIADIC ARRAY[1, 2]);
SELECT format('Hello', VARIADIC NULL::int[]);
SELECT format(string_agg('%s', ','), VARIADIC array_agg(i)) FROM generate_series(1, 200) AS g (i);
SELECT format('>>%10s<<', 'Hello');
SELECT format('>>%10s<<', NULL);
SELECT format('>>%10s<<', '');
SELECT format('>>%-10s<<', '');
SELECT format('>>%-10s<<', 'Hello');
SELECT format('>>%-10s<<', NULL);
SELECT format('>>%1$10s<<', 'Hello');
SELECT format('>>%1$-10I<<', 'Hello');
SELECT format('>>%2$*1$L<<', 10, 'Hello');
SELECT format('>>%2$*1$L<<', 10, NULL);
SELECT format('>>%2$*1$L<<', (-10), NULL);
SELECT format('>>%*s<<', 10, 'Hello');
SELECT format('>>%*1$s<<', 10, 'Hello');
SELECT format('>>%-s<<', 'Hello');
SELECT format('>>%10L<<', NULL);
SELECT format('>>%2$*1$L<<', NULL, 'Hello');
SELECT format('>>%2$*1$L<<', 0, 'Hello');"
`;

exports[`kitchen sink upstream upstream/text.sql 2`] = `
"SELECT 'this is a text string'::text = 'this is a text string'::text AS \\"true\\";
SELECT 'this is a text string'::text = 'this is a text strin'::text AS \\"false\\";
CREATE TABLE text_tbl (
f1 text
);
INSERT INTO text_tbl VALUES ('doh!');
INSERT INTO text_tbl VALUES ('hi de ho neighbor');
SELECT '' AS two,
* FROM text_tbl;
SELECT length(42);
SELECT 'four: '::text || (2 + 2);
SELECT 'four: ' || (2 + 2);
SELECT 3 || 4.0;
SELECT concat('one');
SELECT concat(1, 2, 3, 'hello', TRUE, FALSE, to_date('20100309', 'YYYYMMDD'));
SELECT concat_ws('#', 'one');
SELECT concat_ws('#', 1, 2, 3, 'hello', TRUE, FALSE, to_date('20100309', 'YYYYMMDD'));
SELECT concat_ws(',', 10, 20, NULL, 30);
SELECT concat_ws('', 10, 20, NULL, 30);
SELECT concat_ws(NULL, 10, 20, NULL, 30) IS NULL;
SELECT reverse('abcde');
SELECT i,
left('ahoj', i),
right('ahoj', i) FROM generate_series((-5), 5) AS t(i) ORDER BY i;
SELECT quote_literal('');
SELECT quote_literal('abc''');
SELECT quote_literal('\\\\');
SELECT concat(VARIADIC ARRAY[1, 2, 3]);
SELECT concat_ws(',', VARIADIC ARRAY[1, 2, 3]);
SELECT concat_ws(',', VARIADIC NULL::int[]);
SELECT concat(VARIADIC NULL::int[]) IS NULL;
SELECT concat(VARIADIC '{}'::int[]) = '';
SELECT concat_ws(',', VARIADIC 10);
SELECT format(NULL);
SELECT format('Hello');
SELECT format('Hello %s', 'World');
SELECT format('Hello %%');
SELECT format('Hello %%%%');
SELECT format('Hello %s %s', 'World');
SELECT format('Hello %s');
SELECT format('Hello %x', 20);
SELECT format('INSERT INTO %I VALUES(%L,%L)', 'mytab', 10, 'Hello');
SELECT format('%s%s%s', 'Hello', NULL, 'World');
SELECT format('INSERT INTO %I VALUES(%L,%L)', 'mytab', 10, NULL);
SELECT format('INSERT INTO %I VALUES(%L,%L)', 'mytab', NULL, 'Hello');
SELECT format('INSERT INTO %I VALUES(%L,%L)', NULL, 10, 'Hello');
SELECT format('%1$s %3$s', 1, 2, 3);
SELECT format('%1$s %12$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
SELECT format('%1$s %4$s', 1, 2, 3);
SELECT format('%1$s %13$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
SELECT format('%0$s', 'Hello');
SELECT format('%*0$s', 'Hello');
SELECT format('%1$', 1);
SELECT format('%1$1', 1);
SELECT format('Hello %s %1$s %s', 'World', 'Hello again');
SELECT format('Hello %s %s, %2$s %2$s', 'World', 'Hello again');
SELECT format('%s, %s', VARIADIC ARRAY['Hello', 'World']);
SELECT format('%s, %s', VARIADIC ARRAY[1, 2]);
SELECT format('%s, %s', VARIADIC ARRAY[TRUE, FALSE]);
SELECT format('%s, %s', VARIADIC ARRAY[TRUE, FALSE]::text[]);
SELECT format('%2$s, %1$s', VARIADIC ARRAY['first', 'second']);
SELECT format('%2$s, %1$s', VARIADIC ARRAY[1, 2]);
SELECT format('Hello', VARIADIC NULL::int[]);
SELECT format(string_agg('%s', ','), VARIADIC array_agg(i)) FROM generate_series(1, 200) AS g(i);
SELECT format('>>%10s<<', 'Hello');
SELECT format('>>%10s<<', NULL);
SELECT format('>>%10s<<', '');
SELECT format('>>%-10s<<', '');
SELECT format('>>%-10s<<', 'Hello');
SELECT format('>>%-10s<<', NULL);
SELECT format('>>%1$10s<<', 'Hello');
SELECT format('>>%1$-10I<<', 'Hello');
SELECT format('>>%2$*1$L<<', 10, 'Hello');
SELECT format('>>%2$*1$L<<', 10, NULL);
SELECT format('>>%2$*1$L<<', (-10), NULL);
SELECT format('>>%*s<<', 10, 'Hello');
SELECT format('>>%*1$s<<', 10, 'Hello');
SELECT format('>>%-s<<', 'Hello');
SELECT format('>>%10L<<', NULL);
SELECT format('>>%2$*1$L<<', NULL, 'Hello');
SELECT format('>>%2$*1$L<<', 0, 'Hello');"
`;

exports[`kitchen sink upstream upstream/time.sql 1`] = `
"CREATE TABLE time_tbl (
f1 time(2)
);
INSERT INTO time_tbl VALUES ('00:00');
INSERT INTO time_tbl VALUES ('01:00');
INSERT INTO time_tbl VALUES ('02:03 PST');
INSERT INTO time_tbl VALUES ('11:59 EDT');
INSERT INTO time_tbl VALUES ('12:00');
INSERT INTO time_tbl VALUES ('12:01');
INSERT INTO time_tbl VALUES ('23:59');
INSERT INTO time_tbl VALUES ('11:59:59.99 PM');
INSERT INTO time_tbl VALUES ('2003-03-07 15:36:39 America/New_York');
INSERT INTO time_tbl VALUES ('2003-07-07 15:36:39 America/New_York');
INSERT INTO time_tbl VALUES ('15:36:39 America/New_York');
SELECT f1 AS \\"Time\\" FROM time_tbl;
SELECT f1 AS \\"Three\\" FROM time_tbl WHERE f1 < '05:06:07';
SELECT f1 AS \\"Five\\" FROM time_tbl WHERE f1 > '05:06:07';
SELECT f1 AS \\"None\\" FROM time_tbl WHERE f1 < '00:00';
SELECT f1 AS \\"Eight\\" FROM time_tbl WHERE f1 >= '00:00';
SELECT f1 + '00:01'::time AS \\"Illegal\\" FROM time_tbl;"
`;

exports[`kitchen sink upstream upstream/time.sql 2`] = `
"CREATE TABLE time_tbl (
f1 time(2)
);
INSERT INTO time_tbl VALUES ('00:00');
INSERT INTO time_tbl VALUES ('01:00');
INSERT INTO time_tbl VALUES ('02:03 PST');
INSERT INTO time_tbl VALUES ('11:59 EDT');
INSERT INTO time_tbl VALUES ('12:00');
INSERT INTO time_tbl VALUES ('12:01');
INSERT INTO time_tbl VALUES ('23:59');
INSERT INTO time_tbl VALUES ('11:59:59.99 PM');
INSERT INTO time_tbl VALUES ('2003-03-07 15:36:39 America/New_York');
INSERT INTO time_tbl VALUES ('2003-07-07 15:36:39 America/New_York');
INSERT INTO time_tbl VALUES ('15:36:39 America/New_York');
SELECT f1 AS \\"Time\\" FROM time_tbl;
SELECT f1 AS \\"Three\\" FROM time_tbl WHERE f1 < '05:06:07';
SELECT f1 AS \\"Five\\" FROM time_tbl WHERE f1 > '05:06:07';
SELECT f1 AS \\"None\\" FROM time_tbl WHERE f1 < '00:00';
SELECT f1 AS \\"Eight\\" FROM time_tbl WHERE f1 >= '00:00';
SELECT f1 + '00:01'::time AS \\"Illegal\\" FROM time_tbl;"
`;

exports[`kitchen sink upstream upstream/timetz.sql 1`] = `
"CREATE TABLE timetz_tbl (
f1 pg_catalog.timetz(2)
);
INSERT INTO timetz_tbl VALUES ('00:01 PDT');
INSERT INTO timetz_tbl VALUES ('01:00 PDT');
INSERT INTO timetz_tbl VALUES ('02:03 PDT');
INSERT INTO timetz_tbl VALUES ('07:07 PST');
INSERT INTO timetz_tbl VALUES ('08:08 EDT');
INSERT INTO timetz_tbl VALUES ('11:59 PDT');
INSERT INTO timetz_tbl VALUES ('12:00 PDT');
INSERT INTO timetz_tbl VALUES ('12:01 PDT');
INSERT INTO timetz_tbl VALUES ('23:59 PDT');
INSERT INTO timetz_tbl VALUES ('11:59:59.99 PM PDT');
INSERT INTO timetz_tbl VALUES ('2003-03-07 15:36:39 America/New_York');
INSERT INTO timetz_tbl VALUES ('2003-07-07 15:36:39 America/New_York');
INSERT INTO timetz_tbl VALUES ('15:36:39 America/New_York');
SELECT f1 AS \\"Time TZ\\" FROM timetz_tbl;
SELECT f1 AS \\"Three\\" FROM timetz_tbl WHERE f1 < '05:06:07-07';
SELECT f1 AS \\"Seven\\" FROM timetz_tbl WHERE f1 > '05:06:07-07';
SELECT f1 AS \\"None\\" FROM timetz_tbl WHERE f1 < '00:00-07';
SELECT f1 AS \\"Ten\\" FROM timetz_tbl WHERE f1 >= '00:00-07';
SELECT f1 + '00:01'::pg_catalog.timetz AS \\"Illegal\\" FROM timetz_tbl;"
`;

exports[`kitchen sink upstream upstream/timetz.sql 2`] = `
"CREATE TABLE timetz_tbl (
f1 pg_catalog.timetz(2)
);
INSERT INTO timetz_tbl VALUES ('00:01 PDT');
INSERT INTO timetz_tbl VALUES ('01:00 PDT');
INSERT INTO timetz_tbl VALUES ('02:03 PDT');
INSERT INTO timetz_tbl VALUES ('07:07 PST');
INSERT INTO timetz_tbl VALUES ('08:08 EDT');
INSERT INTO timetz_tbl VALUES ('11:59 PDT');
INSERT INTO timetz_tbl VALUES ('12:00 PDT');
INSERT INTO timetz_tbl VALUES ('12:01 PDT');
INSERT INTO timetz_tbl VALUES ('23:59 PDT');
INSERT INTO timetz_tbl VALUES ('11:59:59.99 PM PDT');
INSERT INTO timetz_tbl VALUES ('2003-03-07 15:36:39 America/New_York');
INSERT INTO timetz_tbl VALUES ('2003-07-07 15:36:39 America/New_York');
INSERT INTO timetz_tbl VALUES ('15:36:39 America/New_York');
SELECT f1 AS \\"Time TZ\\" FROM timetz_tbl;
SELECT f1 AS \\"Three\\" FROM timetz_tbl WHERE f1 < '05:06:07-07';
SELECT f1 AS \\"Seven\\" FROM timetz_tbl WHERE f1 > '05:06:07-07';
SELECT f1 AS \\"None\\" FROM timetz_tbl WHERE f1 < '00:00-07';
SELECT f1 AS \\"Ten\\" FROM timetz_tbl WHERE f1 >= '00:00-07';
SELECT f1 + '00:01'::pg_catalog.timetz AS \\"Illegal\\" FROM timetz_tbl;"
`;

exports[`kitchen sink upstream upstream/tinterval.sql 1`] = `
"CREATE TABLE tinterval_tbl (
f1 tinterval
);
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"-infinity\\" \\"infinity\\"]');
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"May 10, 1947 23:59:12\\" \\"Jan 14, 1973 03:14:21\\"]');
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"Sep 4, 1983 23:59:12\\" \\"Oct 4, 1983 23:59:12\\"]');
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"epoch\\" \\"Mon May  1 00:30:30 1995\\"]');
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"Feb 15 1990 12:15:03\\" \\"2001-09-23 11:12:13\\"]');
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"bad time specifications\\" \\"\\"]');
INSERT INTO tinterval_tbl (f1) VALUES ('[\\"\\" \\"infinity\\"]');
SELECT '' AS five,
* FROM tinterval_tbl;
SELECT '' AS one,
t.* FROM tinterval_tbl AS t WHERE t.f1 #= '@ 1 months';
SELECT '' AS three,
t.* FROM tinterval_tbl AS t WHERE t.f1 #<> '@ 1 months';
SELECT '' AS zero,
t.* FROM tinterval_tbl AS t WHERE t.f1 #< '@ 1 month';
SELECT '' AS one,
t.* FROM tinterval_tbl AS t WHERE t.f1 #<= '@ 1 month';
SELECT '' AS three,
t.* FROM tinterval_tbl AS t WHERE t.f1 #> '@ 1 year';
SELECT '' AS three,
t.* FROM tinterval_tbl AS t WHERE t.f1 #>= '@ 3 years';
SELECT '' AS three,
t1.* FROM tinterval_tbl AS t1 WHERE t1.f1 && '[\\"Aug 15 14:23:19 1983\\" \\"Sep 16 14:23:19 1983\\"]'::tinterval;
SELECT '' AS five,
t1.f1,
t2.f1 FROM tinterval_tbl AS t1,
tinterval_tbl AS t2 WHERE t1.f1 && t2.f1 AND t1.f1 = t2.f1 ORDER BY t1.f1,
t2.f1;
SELECT '' AS fourteen,
t1.f1 AS interval1,
t2.f1 AS interval2 FROM tinterval_tbl AS t1,
tinterval_tbl AS t2 WHERE t1.f1 && t2.f1 AND NOT (t1.f1 = t2.f1) ORDER BY interval1,
interval2;
SELECT '' AS five,
t1.f1 FROM tinterval_tbl AS t1 WHERE NOT (t1.f1 << '[\\"Aug 15 14:23:19 1980\\" \\"Sep 16 14:23:19 1990\\"]'::tinterval) ORDER BY t1.f1;
SELECT '' AS three,
t1.f1 FROM tinterval_tbl AS t1 WHERE t1.f1 && ('Aug 15 14:23:19 1983'::abstime <#> 'Sep 16 14:23:19 1983'::abstime) ORDER BY t1.f1;"
`;

exports[`kitchen sink upstream upstream/tinterval.sql 2`] = `
"CREATE TABLE tinterval_tbl (
f1 tinterval
);
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"-infinity\\" \\"infinity\\"]');
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"May 10, 1947 23:59:12\\" \\"Jan 14, 1973 03:14:21\\"]');
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"Sep 4, 1983 23:59:12\\" \\"Oct 4, 1983 23:59:12\\"]');
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"epoch\\" \\"Mon May  1 00:30:30 1995\\"]');
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"Feb 15 1990 12:15:03\\" \\"2001-09-23 11:12:13\\"]');
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"bad time specifications\\" \\"\\"]');
INSERT INTO tinterval_tbl ( f1 ) VALUES ('[\\"\\" \\"infinity\\"]');
SELECT '' AS five,
* FROM tinterval_tbl;
SELECT '' AS one,
t.* FROM tinterval_tbl AS t WHERE t.f1 #= '@ 1 months';
SELECT '' AS three,
t.* FROM tinterval_tbl AS t WHERE t.f1 #<> '@ 1 months';
SELECT '' AS zero,
t.* FROM tinterval_tbl AS t WHERE t.f1 #< '@ 1 month';
SELECT '' AS one,
t.* FROM tinterval_tbl AS t WHERE t.f1 #<= '@ 1 month';
SELECT '' AS three,
t.* FROM tinterval_tbl AS t WHERE t.f1 #> '@ 1 year';
SELECT '' AS three,
t.* FROM tinterval_tbl AS t WHERE t.f1 #>= '@ 3 years';
SELECT '' AS three,
t1.* FROM tinterval_tbl AS t1 WHERE t1.f1 && '[\\"Aug 15 14:23:19 1983\\" \\"Sep 16 14:23:19 1983\\"]'::tinterval;
SELECT '' AS five,
t1.f1,
t2.f1 FROM tinterval_tbl AS t1,
tinterval_tbl AS t2 WHERE t1.f1 && t2.f1 AND t1.f1 = t2.f1 ORDER BY t1.f1,
t2.f1;
SELECT '' AS fourteen,
t1.f1 AS interval1,
t2.f1 AS interval2 FROM tinterval_tbl AS t1,
tinterval_tbl AS t2 WHERE t1.f1 && t2.f1 AND NOT (t1.f1 = t2.f1) ORDER BY interval1,
interval2;
SELECT '' AS five,
t1.f1 FROM tinterval_tbl AS t1 WHERE NOT (t1.f1 << '[\\"Aug 15 14:23:19 1980\\" \\"Sep 16 14:23:19 1990\\"]'::tinterval) ORDER BY t1.f1;
SELECT '' AS three,
t1.f1 FROM tinterval_tbl AS t1 WHERE t1.f1 && ('Aug 15 14:23:19 1983'::abstime <#> 'Sep 16 14:23:19 1983'::abstime) ORDER BY t1.f1;"
`;

exports[`kitchen sink upstream upstream/tstypes.sql 1`] = `
"SELECT '1'::tsvector;
SELECT '1 '::tsvector;
SELECT ' 1'::tsvector;
SELECT ' 1 '::tsvector;
SELECT '1 2'::tsvector;
SELECT '''1 2'''::tsvector;
SELECT '''1 \\\\''2'''::tsvector;
SELECT '''1 \\\\''2''3'::tsvector;
SELECT '''1 \\\\''2'' 3'::tsvector;
SELECT '''1 \\\\''2'' '' 3'' 4 '::tsvector;
SELECT '''\\\\\\\\as'' ab\\\\c ab\\\\\\\\c AB\\\\\\\\\\\\c ab\\\\\\\\\\\\\\\\c'::tsvector;
SELECT tsvectorin(tsvectorout('''\\\\\\\\as'' ab\\\\c ab\\\\\\\\c AB\\\\\\\\\\\\c ab\\\\\\\\\\\\\\\\c'::tsvector));
SELECT '''w'':4A,3B,2C,1D,5 a:8';
SELECT 'a:3A b:2a'::tsvector || 'ba:1234 a:1B';
SELECT '1'::tsquery;
SELECT '1 '::tsquery;
SELECT ' 1'::tsquery;
SELECT ' 1 '::tsquery;
SELECT '''1 2'''::tsquery;
SELECT '''1 \\\\''2'''::tsquery;
SELECT '!1'::tsquery;
SELECT '1|2'::tsquery;
SELECT '1|!2'::tsquery;
SELECT '!1|2'::tsquery;
SELECT '!1|!2'::tsquery;
SELECT '!(!1|!2)'::tsquery;
SELECT '!(!1|2)'::tsquery;
SELECT '!(1|!2)'::tsquery;
SELECT '!(1|2)'::tsquery;
SELECT '1&2'::tsquery;
SELECT '!1&2'::tsquery;
SELECT '1&!2'::tsquery;
SELECT '!1&!2'::tsquery;
SELECT '(1&2)'::tsquery;
SELECT '1&(2)'::tsquery;
SELECT '!(1)&2'::tsquery;
SELECT '!(1&2)'::tsquery;
SELECT '1|2&3'::tsquery;
SELECT '1|(2&3)'::tsquery;
SELECT '(1|2)&3'::tsquery;
SELECT '1|2&!3'::tsquery;
SELECT '1|!2&3'::tsquery;
SELECT '!1|2&3'::tsquery;
SELECT '!1|(2&3)'::tsquery;
SELECT '!(1|2)&3'::tsquery;
SELECT '(!1|2)&3'::tsquery;
SELECT '1|(2|(4|(5|6)))'::tsquery;
SELECT '1|2|4|5|6'::tsquery;
SELECT '1&(2&(4&(5&6)))'::tsquery;
SELECT '1&2&4&5&6'::tsquery;
SELECT '1&(2&(4&(5|6)))'::tsquery;
SELECT '1&(2&(4&(5|!6)))'::tsquery;
SELECT '1&(''2''&('' 4''&(\\\\|5 | ''6 \\\\'' !|&'')))'::tsquery;
SELECT '''\\\\\\\\as'''::tsquery;
SELECT 'a:* & nbb:*ac | doo:a* | goo'::tsquery;
SELECT 'a <-> (b|c)'::tsquery;
SELECT '(a|b) <-> c'::tsquery;
SELECT '(a|b) <-> (d|c)'::tsquery;
SELECT 'a <-> (b&c)'::tsquery;
SELECT '(a&b) <-> c'::tsquery;
SELECT '(a&b) <-> (d&c)'::tsquery;
SELECT 'a <-> !b'::tsquery;
SELECT '!a <-> b'::tsquery;
SELECT '!a <-> !b'::tsquery;
SELECT 'a <-> !(b&c)'::tsquery;
SELECT 'a <-> !(b|c)'::tsquery;
SELECT '!(a&b) <-> c'::tsquery;
SELECT '!(a|b) <-> c'::tsquery;
SELECT '(!a|b) <-> c'::tsquery;
SELECT '(!a&b) <-> c'::tsquery;
SELECT 'c <-> (!a|b)'::tsquery;
SELECT 'c <-> (!a&b)'::tsquery;
SELECT '(a|b) <-> !c'::tsquery;
SELECT '(a&b) <-> !c'::tsquery;
SELECT '!c <-> (a|b)'::tsquery;
SELECT '!c <-> (a&b)'::tsquery;
SELECT 'a' < 'b & c'::tsquery AS \\"true\\";
SELECT 'a' > 'b & c'::tsquery AS \\"false\\";
SELECT 'a | f' < 'b & c'::tsquery AS \\"false\\";
SELECT 'a | ff' < 'b & c'::tsquery AS \\"false\\";
SELECT 'a | f | g' < 'b & c'::tsquery AS \\"false\\";
SELECT numnode('new'::tsquery);
SELECT numnode('new & york'::tsquery);
SELECT numnode('new & york | qwery'::tsquery);
SELECT 'foo & bar'::tsquery && 'asd';
SELECT 'foo & bar'::tsquery || 'asd & fg';
SELECT 'foo & bar'::tsquery || (!!'asd & fg'::tsquery);
SELECT 'foo & bar'::tsquery && 'asd | fg';
SELECT 'a' <-> 'b & d'::tsquery;
SELECT 'a & g' <-> 'b & d'::tsquery;
SELECT 'a & g' <-> 'b | d'::tsquery;
SELECT 'a & g' <-> 'b <-> d'::tsquery;
SELECT tsquery_phrase('a <3> g', 'b & d', 10);
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:B' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:A' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:C' AS \\"false\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:CB' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*C' AS \\"false\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*CB' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b cb:80c d:34c'::tsvector @@ 'd:AC & c:*C' AS \\"true\\";
SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*C' AS \\"true\\";
SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*B' AS \\"true\\";
SELECT 'supernova'::tsvector @@ 'super'::tsquery AS \\"false\\";
SELECT 'supeanova supernova'::tsvector @@ 'super'::tsquery AS \\"false\\";
SELECT 'supeznova supernova'::tsvector @@ 'super'::tsquery AS \\"false\\";
SELECT 'supernova'::tsvector @@ 'super:*'::tsquery AS \\"true\\";
SELECT 'supeanova supernova'::tsvector @@ 'super:*'::tsquery AS \\"true\\";
SELECT 'supeznova supernova'::tsvector @@ 'super:*'::tsquery AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 2' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 2' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 3' AS \\"false\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 11 3') @@ '1 <-> 3' AS \\"false\\";
SELECT to_tsvector('simple', '1 2 11 3') @@ '1:* <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> 2 <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '(1 <-> 2) <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> (2 <-> 3)' AS \\"false\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <2> (2 <-> 3)' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '(1 <-> 2) <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '1 <-> 2 <-> 3' AS \\"true\\";
SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s:*');
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | sa:*');
SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a & s');
SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a & s');
SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s:*');
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | sa:*');
SELECT ts_rank_cd(' a:1 sa:3C sab:2c d g'::tsvector, 'a | sa:*');
SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2A d g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2 d:2A g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2,3A d:2A g'::tsvector, 'a <2> s:A');
SELECT ts_rank_cd(' a:1 b:2 s:3A d:2A g'::tsvector, 'a <2> s:A');
SELECT ts_rank_cd(' a:1 sa:2D sb:2A g'::tsvector, 'a <-> s:*');
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:*');
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:A');
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:B');
SELECT 'a:1 b:2'::tsvector @@ 'a <-> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:2'::tsvector @@ 'a <0> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:2'::tsvector @@ 'a <1> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:2'::tsvector @@ 'a <2> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <-> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <0> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <1> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <2> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <3> b'::tsquery AS \\"true\\";
SELECT strip('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd'::tsvector);
SELECT strip('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT strip('base hidden rebel spaceship strike'::tsvector);
SELECT ts_delete(to_tsvector('english', 'Rebel spaceships, striking from a hidden base'), 'spaceship');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'base');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bas');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bases');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'spaceship');
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, 'spaceship');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship', 'rebel']);
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceships', 'rebel']);
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceshi', 'rebel']);
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship', 'leya', 'rebel']);
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship', 'leya', 'rebel']);
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship', 'leya', 'rebel', NULL]);
SELECT unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT unnest('base hidden rebel spaceship strike'::tsvector);
SELECT * FROM unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT * FROM unnest('base hidden rebel spaceship strike'::tsvector);
SELECT lexeme,
(positions)[1] FROM unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT tsvector_to_array('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT tsvector_to_array('base hidden rebel spaceship strike'::tsvector);
SELECT array_to_tsvector(ARRAY['base', 'hidden', 'rebel', 'spaceship', 'strike']);
SELECT array_to_tsvector(ARRAY['base', 'hidden', 'rebel', 'spaceship', NULL]);
SELECT setweight('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd zxc:81,567,222A'::tsvector, 'c');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a,zxc}');
SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', '{a,zxc}');
SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', ARRAY['a', 'zxc', NULL]);
SELECT ts_filter('base:7A empir:17 evil:15 first:11 galact:16 hidden:6A rebel:1A spaceship:2A strike:3A victori:12 won:9'::tsvector, '{a}');
SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a}');
SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a,b,NULL}');"
`;

exports[`kitchen sink upstream upstream/tstypes.sql 2`] = `
"SELECT '1'::tsvector;
SELECT '1 '::tsvector;
SELECT ' 1'::tsvector;
SELECT ' 1 '::tsvector;
SELECT '1 2'::tsvector;
SELECT '''1 2'''::tsvector;
SELECT '''1 \\\\''2'''::tsvector;
SELECT '''1 \\\\''2''3'::tsvector;
SELECT '''1 \\\\''2'' 3'::tsvector;
SELECT '''1 \\\\''2'' '' 3'' 4 '::tsvector;
SELECT '''\\\\\\\\as'' ab\\\\c ab\\\\\\\\c AB\\\\\\\\\\\\c ab\\\\\\\\\\\\\\\\c'::tsvector;
SELECT tsvectorin(tsvectorout('''\\\\\\\\as'' ab\\\\c ab\\\\\\\\c AB\\\\\\\\\\\\c ab\\\\\\\\\\\\\\\\c'::tsvector));
SELECT '''w'':4A,3B,2C,1D,5 a:8';
SELECT 'a:3A b:2a'::tsvector || 'ba:1234 a:1B';
SELECT '1'::tsquery;
SELECT '1 '::tsquery;
SELECT ' 1'::tsquery;
SELECT ' 1 '::tsquery;
SELECT '''1 2'''::tsquery;
SELECT '''1 \\\\''2'''::tsquery;
SELECT '!1'::tsquery;
SELECT '1|2'::tsquery;
SELECT '1|!2'::tsquery;
SELECT '!1|2'::tsquery;
SELECT '!1|!2'::tsquery;
SELECT '!(!1|!2)'::tsquery;
SELECT '!(!1|2)'::tsquery;
SELECT '!(1|!2)'::tsquery;
SELECT '!(1|2)'::tsquery;
SELECT '1&2'::tsquery;
SELECT '!1&2'::tsquery;
SELECT '1&!2'::tsquery;
SELECT '!1&!2'::tsquery;
SELECT '(1&2)'::tsquery;
SELECT '1&(2)'::tsquery;
SELECT '!(1)&2'::tsquery;
SELECT '!(1&2)'::tsquery;
SELECT '1|2&3'::tsquery;
SELECT '1|(2&3)'::tsquery;
SELECT '(1|2)&3'::tsquery;
SELECT '1|2&!3'::tsquery;
SELECT '1|!2&3'::tsquery;
SELECT '!1|2&3'::tsquery;
SELECT '!1|(2&3)'::tsquery;
SELECT '!(1|2)&3'::tsquery;
SELECT '(!1|2)&3'::tsquery;
SELECT '1|(2|(4|(5|6)))'::tsquery;
SELECT '1|2|4|5|6'::tsquery;
SELECT '1&(2&(4&(5&6)))'::tsquery;
SELECT '1&2&4&5&6'::tsquery;
SELECT '1&(2&(4&(5|6)))'::tsquery;
SELECT '1&(2&(4&(5|!6)))'::tsquery;
SELECT '1&(''2''&('' 4''&(\\\\|5 | ''6 \\\\'' !|&'')))'::tsquery;
SELECT '''\\\\\\\\as'''::tsquery;
SELECT 'a:* & nbb:*ac | doo:a* | goo'::tsquery;
SELECT 'a <-> (b|c)'::tsquery;
SELECT '(a|b) <-> c'::tsquery;
SELECT '(a|b) <-> (d|c)'::tsquery;
SELECT 'a <-> (b&c)'::tsquery;
SELECT '(a&b) <-> c'::tsquery;
SELECT '(a&b) <-> (d&c)'::tsquery;
SELECT 'a <-> !b'::tsquery;
SELECT '!a <-> b'::tsquery;
SELECT '!a <-> !b'::tsquery;
SELECT 'a <-> !(b&c)'::tsquery;
SELECT 'a <-> !(b|c)'::tsquery;
SELECT '!(a&b) <-> c'::tsquery;
SELECT '!(a|b) <-> c'::tsquery;
SELECT '(!a|b) <-> c'::tsquery;
SELECT '(!a&b) <-> c'::tsquery;
SELECT 'c <-> (!a|b)'::tsquery;
SELECT 'c <-> (!a&b)'::tsquery;
SELECT '(a|b) <-> !c'::tsquery;
SELECT '(a&b) <-> !c'::tsquery;
SELECT '!c <-> (a|b)'::tsquery;
SELECT '!c <-> (a&b)'::tsquery;
SELECT 'a' < 'b & c'::tsquery AS \\"true\\";
SELECT 'a' > 'b & c'::tsquery AS \\"false\\";
SELECT 'a | f' < 'b & c'::tsquery AS \\"false\\";
SELECT 'a | ff' < 'b & c'::tsquery AS \\"false\\";
SELECT 'a | f | g' < 'b & c'::tsquery AS \\"false\\";
SELECT numnode('new'::tsquery);
SELECT numnode('new & york'::tsquery);
SELECT numnode('new & york | qwery'::tsquery);
SELECT 'foo & bar'::tsquery && 'asd';
SELECT 'foo & bar'::tsquery || 'asd & fg';
SELECT 'foo & bar'::tsquery || (!!'asd & fg'::tsquery);
SELECT 'foo & bar'::tsquery && 'asd | fg';
SELECT 'a' <-> 'b & d'::tsquery;
SELECT 'a & g' <-> 'b & d'::tsquery;
SELECT 'a & g' <-> 'b | d'::tsquery;
SELECT 'a & g' <-> 'b <-> d'::tsquery;
SELECT tsquery_phrase('a <3> g', 'b & d', 10);
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:B' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:A' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:C' AS \\"false\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:CB' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*C' AS \\"false\\";
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*CB' AS \\"true\\";
SELECT 'a b:89  ca:23A,64b cb:80c d:34c'::tsvector @@ 'd:AC & c:*C' AS \\"true\\";
SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*C' AS \\"true\\";
SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*B' AS \\"true\\";
SELECT 'supernova'::tsvector @@ 'super'::tsquery AS \\"false\\";
SELECT 'supeanova supernova'::tsvector @@ 'super'::tsquery AS \\"false\\";
SELECT 'supeznova supernova'::tsvector @@ 'super'::tsquery AS \\"false\\";
SELECT 'supernova'::tsvector @@ 'super:*'::tsquery AS \\"true\\";
SELECT 'supeanova supernova'::tsvector @@ 'super:*'::tsquery AS \\"true\\";
SELECT 'supeznova supernova'::tsvector @@ 'super:*'::tsquery AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 2' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 2' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 3' AS \\"false\\";
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 11 3') @@ '1 <-> 3' AS \\"false\\";
SELECT to_tsvector('simple', '1 2 11 3') @@ '1:* <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> 2 <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '(1 <-> 2) <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> (2 <-> 3)' AS \\"false\\";
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <2> (2 <-> 3)' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '(1 <-> 2) <-> 3' AS \\"true\\";
SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '1 <-> 2 <-> 3' AS \\"true\\";
SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s:*');
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | sa:*');
SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a | s');
SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a & s');
SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a & s');
SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s:*');
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | sa:*');
SELECT ts_rank_cd(' a:1 sa:3C sab:2c d g'::tsvector, 'a | sa:*');
SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a | s');
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a & s');
SELECT ts_rank_cd(' a:1 s:2A d g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2 d:2A g'::tsvector, 'a <-> s');
SELECT ts_rank_cd(' a:1 s:2,3A d:2A g'::tsvector, 'a <2> s:A');
SELECT ts_rank_cd(' a:1 b:2 s:3A d:2A g'::tsvector, 'a <2> s:A');
SELECT ts_rank_cd(' a:1 sa:2D sb:2A g'::tsvector, 'a <-> s:*');
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:*');
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:A');
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:B');
SELECT 'a:1 b:2'::tsvector @@ 'a <-> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:2'::tsvector @@ 'a <0> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:2'::tsvector @@ 'a <1> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:2'::tsvector @@ 'a <2> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <-> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <0> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <1> b'::tsquery AS \\"false\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <2> b'::tsquery AS \\"true\\";
SELECT 'a:1 b:3'::tsvector @@ 'a <3> b'::tsquery AS \\"true\\";
SELECT strip('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd'::tsvector);
SELECT strip('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT strip('base hidden rebel spaceship strike'::tsvector);
SELECT ts_delete(to_tsvector('english', 'Rebel spaceships, striking from a hidden base'), 'spaceship');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'base');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bas');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bases');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'spaceship');
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, 'spaceship');
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship', 'rebel']);
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceships', 'rebel']);
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceshi', 'rebel']);
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship', 'leya', 'rebel']);
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship', 'leya', 'rebel']);
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship', 'leya', 'rebel', NULL]);
SELECT unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT unnest('base hidden rebel spaceship strike'::tsvector);
SELECT * FROM unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT * FROM unnest('base hidden rebel spaceship strike'::tsvector);
SELECT lexeme,
(positions)[1] FROM unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT tsvector_to_array('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector);
SELECT tsvector_to_array('base hidden rebel spaceship strike'::tsvector);
SELECT array_to_tsvector(ARRAY['base', 'hidden', 'rebel', 'spaceship', 'strike']);
SELECT array_to_tsvector(ARRAY['base', 'hidden', 'rebel', 'spaceship', NULL]);
SELECT setweight('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd zxc:81,567,222A'::tsvector, 'c');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}');
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a,zxc}');
SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', '{a,zxc}');
SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', ARRAY['a', 'zxc', NULL]);
SELECT ts_filter('base:7A empir:17 evil:15 first:11 galact:16 hidden:6A rebel:1A spaceship:2A strike:3A victori:12 won:9'::tsvector, '{a}');
SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a}');
SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a,b,NULL}');"
`;

exports[`kitchen sink upstream upstream/txid.sql 1`] = `
"SELECT '12:13:'::txid_snapshot;
SELECT '12:18:14,16'::txid_snapshot;
SELECT '12:16:14,14'::txid_snapshot;
SELECT '31:12:'::txid_snapshot;
SELECT '0:1:'::txid_snapshot;
SELECT '12:13:0'::txid_snapshot;
SELECT '12:16:14,13'::txid_snapshot;
CREATE TEMPORARY TABLE snapshot_test (
nr int,
snap txid_snapshot
);
INSERT INTO snapshot_test VALUES (1, '12:13:');
INSERT INTO snapshot_test VALUES (2, '12:20:13,15,18');
INSERT INTO snapshot_test VALUES (3, '100001:100009:100005,100007,100008');
INSERT INTO snapshot_test VALUES (4, '100:150:101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131');
SELECT snap FROM snapshot_test ORDER BY nr;
SELECT txid_snapshot_xmin(snap),
txid_snapshot_xmax(snap),
txid_snapshot_xip(snap) FROM snapshot_test ORDER BY nr;
SELECT id,
txid_visible_in_snapshot(id, snap) FROM snapshot_test,
generate_series(11, 21) AS id WHERE nr = 2;
SELECT id,
txid_visible_in_snapshot(id, snap) FROM snapshot_test,
generate_series(90, 160) AS id WHERE nr = 4;
SELECT txid_current() >= txid_snapshot_xmin(txid_current_snapshot());
SELECT txid_visible_in_snapshot(txid_current(), txid_current_snapshot());
SELECT '1000100010001000:1000100010001100:1000100010001012,1000100010001013'::txid_snapshot;
SELECT txid_visible_in_snapshot('1000100010001012', '1000100010001000:1000100010001100:1000100010001012,1000100010001013');
SELECT txid_visible_in_snapshot('1000100010001015', '1000100010001000:1000100010001100:1000100010001012,1000100010001013');
SELECT '1:9223372036854775807:3'::txid_snapshot;
SELECT '1:9223372036854775808:3'::txid_snapshot;"
`;

exports[`kitchen sink upstream upstream/txid.sql 2`] = `
"SELECT '12:13:'::txid_snapshot;
SELECT '12:18:14,16'::txid_snapshot;
SELECT '12:16:14,14'::txid_snapshot;
SELECT '31:12:'::txid_snapshot;
SELECT '0:1:'::txid_snapshot;
SELECT '12:13:0'::txid_snapshot;
SELECT '12:16:14,13'::txid_snapshot;
CREATE TEMPORARY TABLE snapshot_test (
nr int,
snap txid_snapshot
);
INSERT INTO snapshot_test VALUES (1, '12:13:');
INSERT INTO snapshot_test VALUES (2, '12:20:13,15,18');
INSERT INTO snapshot_test VALUES (3, '100001:100009:100005,100007,100008');
INSERT INTO snapshot_test VALUES (4, '100:150:101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131');
SELECT snap FROM snapshot_test ORDER BY nr;
SELECT txid_snapshot_xmin(snap),
txid_snapshot_xmax(snap),
txid_snapshot_xip(snap) FROM snapshot_test ORDER BY nr;
SELECT id,
txid_visible_in_snapshot(id, snap) FROM snapshot_test,
generate_series(11, 21) AS id WHERE nr = 2;
SELECT id,
txid_visible_in_snapshot(id, snap) FROM snapshot_test,
generate_series(90, 160) AS id WHERE nr = 4;
SELECT txid_current() >= txid_snapshot_xmin(txid_current_snapshot());
SELECT txid_visible_in_snapshot(txid_current(), txid_current_snapshot());
SELECT '1000100010001000:1000100010001100:1000100010001012,1000100010001013'::txid_snapshot;
SELECT txid_visible_in_snapshot('1000100010001012', '1000100010001000:1000100010001100:1000100010001012,1000100010001013');
SELECT txid_visible_in_snapshot('1000100010001015', '1000100010001000:1000100010001100:1000100010001012,1000100010001013');
SELECT '1:9223372036854775807:3'::txid_snapshot;
SELECT '1:9223372036854775808:3'::txid_snapshot;"
`;

exports[`kitchen sink upstream upstream/varchar.sql 1`] = `
"CREATE TABLE varchar_tbl (
f1 varchar(1)
);
INSERT INTO varchar_tbl (f1) VALUES ('a');
INSERT INTO varchar_tbl (f1) VALUES ('A');
INSERT INTO varchar_tbl (f1) VALUES ('1');
INSERT INTO varchar_tbl (f1) VALUES (2);
INSERT INTO varchar_tbl (f1) VALUES ('3');
INSERT INTO varchar_tbl (f1) VALUES ('');
INSERT INTO varchar_tbl (f1) VALUES ('cd');
INSERT INTO varchar_tbl (f1) VALUES ('c     ');
SELECT '' AS seven,
* FROM varchar_tbl;
SELECT '' AS six,
c.* FROM varchar_tbl AS c WHERE c.f1 <> 'a';
SELECT '' AS one,
c.* FROM varchar_tbl AS c WHERE c.f1 = 'a';
SELECT '' AS five,
c.* FROM varchar_tbl AS c WHERE c.f1 < 'a';
SELECT '' AS six,
c.* FROM varchar_tbl AS c WHERE c.f1 <= 'a';
SELECT '' AS one,
c.* FROM varchar_tbl AS c WHERE c.f1 > 'a';
SELECT '' AS two,
c.* FROM varchar_tbl AS c WHERE c.f1 >= 'a';
DROP TABLE varchar_tbl;
CREATE TABLE varchar_tbl (
f1 varchar(4)
);
INSERT INTO varchar_tbl (f1) VALUES ('a');
INSERT INTO varchar_tbl (f1) VALUES ('ab');
INSERT INTO varchar_tbl (f1) VALUES ('abcd');
INSERT INTO varchar_tbl (f1) VALUES ('abcde');
INSERT INTO varchar_tbl (f1) VALUES ('abcd    ');
SELECT '' AS four,
* FROM varchar_tbl;"
`;

exports[`kitchen sink upstream upstream/varchar.sql 2`] = `
"CREATE TABLE varchar_tbl (
f1 varchar(1)
);
INSERT INTO varchar_tbl ( f1 ) VALUES ('a');
INSERT INTO varchar_tbl ( f1 ) VALUES ('A');
INSERT INTO varchar_tbl ( f1 ) VALUES ('1');
INSERT INTO varchar_tbl ( f1 ) VALUES (2);
INSERT INTO varchar_tbl ( f1 ) VALUES ('3');
INSERT INTO varchar_tbl ( f1 ) VALUES ('');
INSERT INTO varchar_tbl ( f1 ) VALUES ('cd');
INSERT INTO varchar_tbl ( f1 ) VALUES ('c     ');
SELECT '' AS seven,
* FROM varchar_tbl;
SELECT '' AS six,
c.* FROM varchar_tbl AS c WHERE c.f1 <> 'a';
SELECT '' AS one,
c.* FROM varchar_tbl AS c WHERE c.f1 = 'a';
SELECT '' AS five,
c.* FROM varchar_tbl AS c WHERE c.f1 < 'a';
SELECT '' AS six,
c.* FROM varchar_tbl AS c WHERE c.f1 <= 'a';
SELECT '' AS one,
c.* FROM varchar_tbl AS c WHERE c.f1 > 'a';
SELECT '' AS two,
c.* FROM varchar_tbl AS c WHERE c.f1 >= 'a';
DROP TABLE varchar_tbl;
CREATE TABLE varchar_tbl (
f1 varchar(4)
);
INSERT INTO varchar_tbl ( f1 ) VALUES ('a');
INSERT INTO varchar_tbl ( f1 ) VALUES ('ab');
INSERT INTO varchar_tbl ( f1 ) VALUES ('abcd');
INSERT INTO varchar_tbl ( f1 ) VALUES ('abcde');
INSERT INTO varchar_tbl ( f1 ) VALUES ('abcd    ');
SELECT '' AS four,
* FROM varchar_tbl;"
`;

exports[`kitchen sink views create 1`] = `
"CREATE VIEW collaboration_public.direct_project_permits AS SELECT * FROM permits;
CREATE MATERIALIZED VIEW collaboration_public.direct_project_permits AS SELECT * FROM permits;
CREATE VIEW superschema.app_columns AS SELECT attname AS name,
t.typname AS type,
c.relname AS table_name,
n.nspname AS schema_name FROM pg_attribute AS a INNER JOIN pg_type AS t ON t.oid = a.atttypid INNER JOIN pg_class AS c ON c.oid = a.attrelid INNER JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname NOT IN ( 'pg_catalog', 'information_schema', 'pg_toast' ) AND attnum > 0 AND NOT (attisdropped) ORDER BY attnum;
CREATE VIEW superschema.app_columns AS SELECT attname AS name,
t.typname AS type,
c.relname AS table_name,
n.nspname AS schema_name FROM pg_attribute AS a INNER JOIN pg_type AS t ON t.oid = a.atttypid INNER JOIN pg_class AS c ON c.oid = a.attrelid INNER JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname IN ( 'pg_catalog', 'information_schema', 'pg_toast' ) AND attnum > 0 AND NOT (attisdropped) ORDER BY attnum;"
`;

exports[`kitchen sink views create 2`] = `
"CREATE VIEW collaboration_public.direct_project_permits AS SELECT * FROM permits;
CREATE MATERIALIZED VIEW collaboration_public.direct_project_permits AS SELECT * FROM permits;
CREATE VIEW superschema.app_columns AS SELECT attname AS name,
t.typname AS type,
c.relname AS table_name,
n.nspname AS schema_name FROM pg_attribute AS a INNER JOIN pg_type AS t ON t.oid = a.atttypid INNER JOIN pg_class AS c ON c.oid = a.attrelid INNER JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast') AND attnum > 0 AND NOT (attisdropped) ORDER BY attnum;
CREATE VIEW superschema.app_columns AS SELECT attname AS name,
t.typname AS type,
c.relname AS table_name,
n.nspname AS schema_name FROM pg_attribute AS a INNER JOIN pg_type AS t ON t.oid = a.atttypid INNER JOIN pg_class AS c ON c.oid = a.attrelid INNER JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname IN ('pg_catalog', 'information_schema', 'pg_toast') AND attnum > 0 AND NOT (attisdropped) ORDER BY attnum;"
`;

exports[`parens 1`] = `
"SELECT (node->'relation')->'RangeVar' IS NOT NULL FROM my_json_store;
SELECT (node->'relation')->'RangeVar' IS NOT NULL AND ((node->'relation')->'RangeVar')->>'inh' IS NULL FROM my_json_store;
SELECT (a IS NOT NULL AND b IS NULL) OR (c IS NOT NULL AND (a->'inh')::bool IS FALSE) FROM my_json_store;
SELECT ((node->'relation')->'RangeVar' IS NOT NULL AND ((node->'relation')->'RangeVar')->'inh' IS NULL) OR (((node->'relation')->'RangeVar')->'inh' IS NOT NULL AND (((node->'relation')->'RangeVar')->'inh')::bool IS FALSE) FROM my_json_store;
SELECT (a AND b AND c) OR d FROM t;
SELECT (a AND b AND c) OR d OR ((e AND f) OR g) FROM t;
SELECT (a AND b AND c::bool IS TRUE) OR d OR ((e AND f) OR g) FROM t;
SELECT (NOT ((a AND b)) AND c) OR NOT (d) FROM t;
SELECT NOT ((a AND b)) AND c FROM t;
SELECT NOT ((a AND b)) AND c FROM t;
SELECT (field = 1 OR field = 2) IS TRUE;
SELECT field = 1 OR field = 2 IS TRUE;"
`;

exports[`parens 2`] = `
"SELECT (node->'relation')->'RangeVar' IS NOT NULL FROM my_json_store;
SELECT (node->'relation')->'RangeVar' IS NOT NULL AND ((node->'relation')->'RangeVar')->>'inh' IS NULL FROM my_json_store;
SELECT (a IS NOT NULL AND b IS NULL) OR (c IS NOT NULL AND (a->'inh')::bool IS FALSE) FROM my_json_store;
SELECT ((node->'relation')->'RangeVar' IS NOT NULL AND ((node->'relation')->'RangeVar')->'inh' IS NULL) OR (((node->'relation')->'RangeVar')->'inh' IS NOT NULL AND (((node->'relation')->'RangeVar')->'inh')::bool IS FALSE) FROM my_json_store;
SELECT (a AND b AND c) OR d FROM t;
SELECT (a AND b AND c) OR d OR ((e AND f) OR g) FROM t;
SELECT (a AND b AND c::bool IS TRUE) OR d OR ((e AND f) OR g) FROM t;
SELECT (NOT ((a AND b)) AND c) OR NOT (d) FROM t;
SELECT NOT ((a AND b)) AND c FROM t;
SELECT NOT ((a AND b)) AND c FROM t;
SELECT (field = 1 OR field = 2) IS TRUE;
SELECT field = 1 OR field = 2 IS TRUE;"
`;

exports[`pg_catalog 1`] = `
"CREATE TABLE table_without_pg_catalog (
bigint_type bigint,
bigserial_type bigserial,
bit_opt_1_type bit(1),
bit_opt_2_type bit(2),
bit_opt_16_type bit(16),
bit_varying_opt_1_type varbit(1),
bit_varying_opt_2_type varbit(2),
bool_type bool,
boolean_type boolean,
box_type box,
bytea_type bytea,
char_opt_1_type char(1),
char_opt_140_type char(140),
char_opt_1000_type char(1000),
char_type char(1),
character_type char(1),
character_varying_opt_1_type varchar(1),
character_varying_opt_10_type varchar(10),
character_varying_opt_140_type varchar(140),
character_varying_opt_1000_type varchar(1000),
character_varying_type varchar,
cidr_type cidr,
circle_type circle,
date_type date,
double_precision_type pg_catalog.float8,
float_4_type float4,
float_8_type float8,
float_type pg_catalog.float8,
float_opt_1_type pg_catalog.float4,
float_opt_2_type pg_catalog.float4,
float_opt_3_type pg_catalog.float4,
float_opt_4_type pg_catalog.float4,
float_opt_5_type pg_catalog.float4,
float_opt_6_type pg_catalog.float4,
float_opt_7_type pg_catalog.float4,
float_opt_8_type pg_catalog.float4,
inet_type inet,
int_type int,
int2_type int2,
int4_type int4,
int8_type int8,
interval_year_type interval year,
interval_month_type interval month,
interval_day_type interval day,
interval_hour_type interval hour,
interval_minute_type interval minute,
interval_type interval,
json_type json,
jsonb_type jsonb,
line_type line,
lseg_type lseg,
macaddr_type macaddr,
money_type money,
numeric_type numeric,
numeric_opt_type numeric(10, 10),
path_type path,
pg_lsn_type pg_lsn,
point_type point,
polygon_type polygon,
real_type pg_catalog.float4,
serial_type serial,
serial4_type serial4,
serial8_type serial8,
smallint_type smallint,
text_type text,
time_opt_2_type time(2),
time_type time,
timestamp_type timestamp,
timestamptz_type timestamptz,
timetz_opt_2_type pg_catalog.timetz(2),
timetz_type timetz,
tsquery_type tsquery,
tsvector_type tsvector,
uuid_type uuid,
varbit_1_type varbit(1),
varbit_2_type varbit(2),
varbit_16_type varbit(16),
varbit_type varbit,
varchar_opt_1_type varchar(1),
varchar_opt_140_type varchar(140),
varchar_opt_1000_type varchar(1000),
varchar_type varchar,
xml_type xml
);
CREATE TABLE table_with_pg_catalog (
bigint_type bigint,
bigserial_type bigserial,
bit_opt_1_type bit(1),
bit_opt_2_type bit(2),
bit_opt_16_type bit(16),
bit_varying_opt_1_type pg_catalog.varbit(1),
bit_varying_opt_2_type pg_catalog.varbit(2),
bool_type boolean,
boolean_type boolean,
box_type pg_catalog.box,
bytea_type pg_catalog.bytea,
char_opt_1_type char(1),
char_opt_140_type char(140),
char_opt_1000_type char(1000),
char_type pg_catalog.\\"char\\",
character_type char(1),
character_varying_opt_1_type varchar(1),
character_varying_opt_10_type varchar(10),
character_varying_opt_140_type varchar(140),
character_varying_opt_1000_type varchar(1000),
character_varying_type varchar,
cidr_type pg_catalog.cidr,
circle_type pg_catalog.circle,
date_type pg_catalog.date,
float_4_type pg_catalog.float4,
float_8_type pg_catalog.float8,
float_type pg_catalog.float8,
float_opt_1_type pg_catalog.float4,
float_opt_2_type pg_catalog.float4,
float_opt_3_type pg_catalog.float4,
float_opt_4_type pg_catalog.float4,
float_opt_5_type pg_catalog.float4,
float_opt_6_type pg_catalog.float4,
float_opt_7_type pg_catalog.float4,
float_opt_8_type pg_catalog.float4,
inet_type pg_catalog.inet,
int_type int,
int2_type smallint,
int4_type int,
int8_type bigint,
interval_year_type interval year,
interval_month_type interval month,
interval_day_type interval day,
interval_hour_type interval hour,
interval_minute_type interval minute,
interval_type interval,
json_type pg_catalog.json,
jsonb_type pg_catalog.jsonb,
line_type pg_catalog.line,
lseg_type pg_catalog.lseg,
macaddr_type pg_catalog.macaddr,
money_type pg_catalog.money,
numeric_type numeric,
numeric_opt_type numeric(10, 10),
path_type pg_catalog.path,
pg_lsn_type pg_catalog.pg_lsn,
point_type pg_catalog.point,
polygon_type pg_catalog.polygon,
serial_type serial,
serial4_type serial4,
serial8_type serial8,
smallint_type smallint,
text_type pg_catalog.text,
time_opt_2_type time(2),
time_type time,
time_type_mod time(2),
timestamp_type timestamp,
timestamptz_type pg_catalog.timestamptz,
timetz_opt_2_type pg_catalog.timetz(2),
timetz_type pg_catalog.timetz,
tsquery_type pg_catalog.tsquery,
tsvector_type pg_catalog.tsvector,
uuid_type uuid,
varbit_1_type pg_catalog.varbit(1),
varbit_2_type pg_catalog.varbit(2),
varbit_16_type pg_catalog.varbit(16),
varbit_type pg_catalog.varbit,
varchar_opt_1_type varchar(1),
varchar_opt_140_type varchar(140),
varchar_opt_1000_type varchar(1000),
varchar_type varchar,
xml_type pg_catalog.xml
);
CREATE TABLE table_with_pg_catalog_chars (
a char(1),
b bpchar
);
CREATE FUNCTION charfunc ( a pg_catalog.\\"char\\", b \\"char\\", c char(1) ) RETURNS void AS $LQLCODEZ$
BEGIN
END;
$LQLCODEZ$ LANGUAGE plpgsql VOLATILE;"
`;

exports[`pg_catalog 2`] = `
"CREATE TABLE table_without_pg_catalog (
bigint_type bigint,
bigserial_type bigserial,
bit_opt_1_type bit(1),
bit_opt_2_type bit(2),
bit_opt_16_type bit(16),
bit_varying_opt_1_type varbit(1),
bit_varying_opt_2_type varbit(2),
bool_type bool,
boolean_type boolean,
box_type box,
bytea_type bytea,
char_opt_1_type char(1),
char_opt_140_type char(140),
char_opt_1000_type char(1000),
char_type char(1),
character_type char(1),
character_varying_opt_1_type varchar(1),
character_varying_opt_10_type varchar(10),
character_varying_opt_140_type varchar(140),
character_varying_opt_1000_type varchar(1000),
character_varying_type varchar,
cidr_type cidr,
circle_type circle,
date_type date,
double_precision_type pg_catalog.float8,
float_4_type float4,
float_8_type float8,
float_type pg_catalog.float8,
float_opt_1_type pg_catalog.float4,
float_opt_2_type pg_catalog.float4,
float_opt_3_type pg_catalog.float4,
float_opt_4_type pg_catalog.float4,
float_opt_5_type pg_catalog.float4,
float_opt_6_type pg_catalog.float4,
float_opt_7_type pg_catalog.float4,
float_opt_8_type pg_catalog.float4,
inet_type inet,
int_type int,
int2_type int2,
int4_type int4,
int8_type int8,
interval_year_type interval year,
interval_month_type interval month,
interval_day_type interval day,
interval_hour_type interval hour,
interval_minute_type interval minute,
interval_type interval,
json_type json,
jsonb_type jsonb,
line_type line,
lseg_type lseg,
macaddr_type macaddr,
money_type money,
numeric_type numeric,
numeric_opt_type numeric(10, 10),
path_type path,
pg_lsn_type pg_lsn,
point_type point,
polygon_type polygon,
real_type pg_catalog.float4,
serial_type serial,
serial4_type serial4,
serial8_type serial8,
smallint_type smallint,
text_type text,
time_opt_2_type time(2),
time_type time,
timestamp_type timestamp,
timestamptz_type timestamptz,
timetz_opt_2_type pg_catalog.timetz(2),
timetz_type timetz,
tsquery_type tsquery,
tsvector_type tsvector,
uuid_type uuid,
varbit_1_type varbit(1),
varbit_2_type varbit(2),
varbit_16_type varbit(16),
varbit_type varbit,
varchar_opt_1_type varchar(1),
varchar_opt_140_type varchar(140),
varchar_opt_1000_type varchar(1000),
varchar_type varchar,
xml_type xml
);
CREATE TABLE table_with_pg_catalog (
bigint_type bigint,
bigserial_type bigserial,
bit_opt_1_type bit(1),
bit_opt_2_type bit(2),
bit_opt_16_type bit(16),
bit_varying_opt_1_type pg_catalog.varbit(1),
bit_varying_opt_2_type pg_catalog.varbit(2),
bool_type boolean,
boolean_type boolean,
box_type pg_catalog.box,
bytea_type pg_catalog.bytea,
char_opt_1_type char(1),
char_opt_140_type char(140),
char_opt_1000_type char(1000),
char_type pg_catalog.\\"char\\",
character_type char(1),
character_varying_opt_1_type varchar(1),
character_varying_opt_10_type varchar(10),
character_varying_opt_140_type varchar(140),
character_varying_opt_1000_type varchar(1000),
character_varying_type varchar,
cidr_type pg_catalog.cidr,
circle_type pg_catalog.circle,
date_type pg_catalog.date,
float_4_type pg_catalog.float4,
float_8_type pg_catalog.float8,
float_type pg_catalog.float8,
float_opt_1_type pg_catalog.float4,
float_opt_2_type pg_catalog.float4,
float_opt_3_type pg_catalog.float4,
float_opt_4_type pg_catalog.float4,
float_opt_5_type pg_catalog.float4,
float_opt_6_type pg_catalog.float4,
float_opt_7_type pg_catalog.float4,
float_opt_8_type pg_catalog.float4,
inet_type pg_catalog.inet,
int_type int,
int2_type smallint,
int4_type int,
int8_type bigint,
interval_year_type interval year,
interval_month_type interval month,
interval_day_type interval day,
interval_hour_type interval hour,
interval_minute_type interval minute,
interval_type interval,
json_type pg_catalog.json,
jsonb_type pg_catalog.jsonb,
line_type pg_catalog.line,
lseg_type pg_catalog.lseg,
macaddr_type pg_catalog.macaddr,
money_type pg_catalog.money,
numeric_type numeric,
numeric_opt_type numeric(10, 10),
path_type pg_catalog.path,
pg_lsn_type pg_catalog.pg_lsn,
point_type pg_catalog.point,
polygon_type pg_catalog.polygon,
serial_type serial,
serial4_type serial4,
serial8_type serial8,
smallint_type smallint,
text_type pg_catalog.text,
time_opt_2_type time(2),
time_type time,
time_type_mod time(2),
timestamp_type timestamp,
timestamptz_type pg_catalog.timestamptz,
timetz_opt_2_type pg_catalog.timetz(2),
timetz_type pg_catalog.timetz,
tsquery_type pg_catalog.tsquery,
tsvector_type pg_catalog.tsvector,
uuid_type uuid,
varbit_1_type pg_catalog.varbit(1),
varbit_2_type pg_catalog.varbit(2),
varbit_16_type pg_catalog.varbit(16),
varbit_type pg_catalog.varbit,
varchar_opt_1_type varchar(1),
varchar_opt_140_type varchar(140),
varchar_opt_1000_type varchar(1000),
varchar_type varchar,
xml_type pg_catalog.xml
);
CREATE TABLE table_with_pg_catalog_chars (
a char(1),
b bpchar
);
CREATE FUNCTION charfunc ( a pg_catalog.\\"char\\", b \\"char\\", c char(1) ) RETURNS void AS $EOFCODE$BEGIN
END;$EOFCODE$ LANGUAGE plpgsql VOLATILE;"
`;

exports[`privs-and-defaults 1`] = `
"ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT SELECT ON TABLES  TO your_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT ALL ON TABLES  TO your_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT ALL ON SEQUENCES  TO your_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT ALL ON FUNCTIONS  TO your_user;
GRANT ALL ON ALL TABLES IN SCHEMA schema_name TO your_user;
GRANT ALL ON ALL SEQUENCES IN SCHEMA schema_name TO your_user;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA schema_name TO your_user;"
`;

exports[`privs-and-defaults 2`] = `
"ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT SELECT ON TABLES  TO your_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT ALL ON TABLES  TO your_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT ALL ON SEQUENCES  TO your_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA schema_name
GRANT ALL ON FUNCTIONS  TO your_user;
GRANT ALL ON ALL TABLES IN SCHEMA schema_name TO your_user;
GRANT ALL ON ALL SEQUENCES IN SCHEMA schema_name TO your_user;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA schema_name TO your_user;"
`;
